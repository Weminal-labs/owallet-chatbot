diff --git a/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.d.ts b/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.d.ts
index 0317ca3..51d02f9 100644
--- a/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.d.ts
+++ b/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.d.ts
@@ -35,20 +35,20 @@ export default class Cosmos {
     serializePath(path: Buffer): Buffer;
     serializeHRP(hrp: string): Buffer;
     /**
-     * get Cosmos address for a given BIP 32 path.
-     * @param path a path in BIP 32 format
+     * get Cosmos address for a given BIP 32 path array.
+     * @param path a path in BIP 32 array format
      * @param hrp usually cosmos
      * @option boolDisplay optionally enable or not the display
      * @return an object with a publicKey, address and (optionally) chainCode
      * @example
-     * cosmos.getAddress("44'/60'/0'/0/0", "cosmos").then(o => o.address)
+     * cosmos.getAddress([44,60,0,0,0], "cosmos").then(o => o.address)
      */
-    getAddress(path: string, hrp: string, boolDisplay?: boolean): Promise<{
+    getAddress(path: number[], hrp: string, boolDisplay?: boolean): Promise<{
         publicKey: string;
         address: string;
     }>;
     foreach<T, A>(arr: T[], callback: (arg0: T, arg1: number) => Promise<A>): Promise<A[]>;
-    sign(path: string, message: string): Promise<{
+    sign(path: number[], message: string): Promise<{
         signature: null | Buffer;
         return_code: number | string;
     }>;
diff --git a/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.js b/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.js
index 2b17c6a..e9524e2 100644
--- a/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.js
+++ b/node_modules/@ledgerhq/hw-app-cosmos/lib/Cosmos.js
@@ -39,7 +39,6 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 exports.__esModule = true;
-var bip32_path_1 = __importDefault(require("bip32-path"));
 var errors_1 = require("@ledgerhq/errors");
 var CHUNK_SIZE = 250;
 var CLA = 0x55;
@@ -106,8 +105,7 @@ var Cosmos = /** @class */ (function () {
      * @example
      * cosmos.getAddress("44'/60'/0'/0/0", "cosmos").then(o => o.address)
      */
-    Cosmos.prototype.getAddress = function (path, hrp, boolDisplay) {
-        var bipPath = bip32_path_1["default"].fromString(path).toPathArray();
+    Cosmos.prototype.getAddress = function (bipPath, hrp, boolDisplay) {        
         var serializedPath = this.serializePath(bipPath);
         var data = Buffer.concat([this.serializeHRP(hrp), serializedPath]);
         return this.transport
@@ -134,12 +132,11 @@ var Cosmos = /** @class */ (function () {
         }
         return Promise.resolve().then(function () { return iterate(0, arr, []); });
     };
-    Cosmos.prototype.sign = function (path, message) {
+    Cosmos.prototype.sign = function (bipPath, message) {
         return __awaiter(this, void 0, void 0, function () {
-            var bipPath, serializedPath, chunks, buffer, i, end, response;
+            var serializedPath, chunks, buffer, i, end, response;
             var _this = this;
             return __generator(this, function (_a) {                
-                bipPath = bip32_path_1["default"].fromString(path).toPathArray();
                 serializedPath = this.serializePath(bipPath);
                 chunks = [];
                 chunks.push(serializedPath);
