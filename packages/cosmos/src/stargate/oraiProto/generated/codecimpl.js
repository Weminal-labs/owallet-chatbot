/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const cosmwasm = $root.cosmwasm = (() => {

    /**
     * Namespace cosmwasm.
     * @exports cosmwasm
     * @namespace
     */
    const cosmwasm = {};

    cosmwasm.wasm = (function () {

        /**
         * Namespace wasm.
         * @memberof cosmwasm
         * @namespace
         */
        const wasm = {};

        wasm.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmwasm.wasm
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryContractInfoRequest = (function () {

                /**
                 * Properties of a QueryContractInfoRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryContractInfoRequest
                 * @property {string|null} [address] QueryContractInfoRequest address
                 */

                /**
                 * Constructs a new QueryContractInfoRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryContractInfoRequest.
                 * @implements IQueryContractInfoRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractInfoRequest=} [p] Properties to set
                 */
                function QueryContractInfoRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryContractInfoRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoRequest
                 * @instance
                 */
                QueryContractInfoRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryContractInfoRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryContractInfoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractInfoRequest} m QueryContractInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractInfoRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    return w;
                };

                /**
                 * Decodes a QueryContractInfoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryContractInfoRequest} QueryContractInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractInfoRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryContractInfoRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryContractInfoRequest;
            })();

            v1beta1.QueryContractInfoResponse = (function () {

                /**
                 * Properties of a QueryContractInfoResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryContractInfoResponse
                 * @property {string|null} [address] QueryContractInfoResponse address
                 * @property {cosmwasm.wasm.v1beta1.IContractInfo|null} [contract_info] QueryContractInfoResponse contract_info
                 */

                /**
                 * Constructs a new QueryContractInfoResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryContractInfoResponse.
                 * @implements IQueryContractInfoResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractInfoResponse=} [p] Properties to set
                 */
                function QueryContractInfoResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryContractInfoResponse address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoResponse
                 * @instance
                 */
                QueryContractInfoResponse.prototype.address = "";

                /**
                 * QueryContractInfoResponse contract_info.
                 * @member {cosmwasm.wasm.v1beta1.IContractInfo|null|undefined} contract_info
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoResponse
                 * @instance
                 */
                QueryContractInfoResponse.prototype.contract_info = null;

                /**
                 * Encodes the specified QueryContractInfoResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryContractInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractInfoResponse} m QueryContractInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractInfoResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.contract_info != null && Object.hasOwnProperty.call(m, "contract_info"))
                        $root.cosmwasm.wasm.v1beta1.ContractInfo.encode(m.contract_info, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryContractInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryContractInfoResponse} QueryContractInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractInfoResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryContractInfoResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.contract_info = $root.cosmwasm.wasm.v1beta1.ContractInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryContractInfoResponse;
            })();

            v1beta1.QueryContractHistoryRequest = (function () {

                /**
                 * Properties of a QueryContractHistoryRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryContractHistoryRequest
                 * @property {string|null} [address] QueryContractHistoryRequest address
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryContractHistoryRequest pagination
                 */

                /**
                 * Constructs a new QueryContractHistoryRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryContractHistoryRequest.
                 * @implements IQueryContractHistoryRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractHistoryRequest=} [p] Properties to set
                 */
                function QueryContractHistoryRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryContractHistoryRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryRequest
                 * @instance
                 */
                QueryContractHistoryRequest.prototype.address = "";

                /**
                 * QueryContractHistoryRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryRequest
                 * @instance
                 */
                QueryContractHistoryRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractHistoryRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryContractHistoryRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractHistoryRequest} m QueryContractHistoryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractHistoryRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryContractHistoryRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryContractHistoryRequest} QueryContractHistoryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractHistoryRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryContractHistoryRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryContractHistoryRequest;
            })();

            v1beta1.QueryContractHistoryResponse = (function () {

                /**
                 * Properties of a QueryContractHistoryResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryContractHistoryResponse
                 * @property {Array.<cosmwasm.wasm.v1beta1.IContractCodeHistoryEntry>|null} [entries] QueryContractHistoryResponse entries
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryContractHistoryResponse pagination
                 */

                /**
                 * Constructs a new QueryContractHistoryResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryContractHistoryResponse.
                 * @implements IQueryContractHistoryResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractHistoryResponse=} [p] Properties to set
                 */
                function QueryContractHistoryResponse(p) {
                    this.entries = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryContractHistoryResponse entries.
                 * @member {Array.<cosmwasm.wasm.v1beta1.IContractCodeHistoryEntry>} entries
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryResponse
                 * @instance
                 */
                QueryContractHistoryResponse.prototype.entries = $util.emptyArray;

                /**
                 * QueryContractHistoryResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryResponse
                 * @instance
                 */
                QueryContractHistoryResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractHistoryResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryContractHistoryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractHistoryResponse} m QueryContractHistoryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractHistoryResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.entries != null && m.entries.length) {
                        for (var i = 0; i < m.entries.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry.encode(m.entries[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryContractHistoryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractHistoryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryContractHistoryResponse} QueryContractHistoryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractHistoryResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryContractHistoryResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.entries && m.entries.length))
                                    m.entries = [];
                                m.entries.push($root.cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryContractHistoryResponse;
            })();

            v1beta1.QueryContractsByCodeRequest = (function () {

                /**
                 * Properties of a QueryContractsByCodeRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryContractsByCodeRequest
                 * @property {Long|null} [code_id] QueryContractsByCodeRequest code_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryContractsByCodeRequest pagination
                 */

                /**
                 * Constructs a new QueryContractsByCodeRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryContractsByCodeRequest.
                 * @implements IQueryContractsByCodeRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractsByCodeRequest=} [p] Properties to set
                 */
                function QueryContractsByCodeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryContractsByCodeRequest code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest
                 * @instance
                 */
                QueryContractsByCodeRequest.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryContractsByCodeRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest
                 * @instance
                 */
                QueryContractsByCodeRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractsByCodeRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractsByCodeRequest} m QueryContractsByCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractsByCodeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(8).uint64(m.code_id);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryContractsByCodeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest} QueryContractsByCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractsByCodeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryContractsByCodeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_id = r.uint64();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryContractsByCodeRequest;
            })();

            v1beta1.ContractInfoWithAddress = (function () {

                /**
                 * Properties of a ContractInfoWithAddress.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IContractInfoWithAddress
                 * @property {string|null} [address] ContractInfoWithAddress address
                 * @property {cosmwasm.wasm.v1beta1.IContractInfo|null} [contract_info] ContractInfoWithAddress contract_info
                 */

                /**
                 * Constructs a new ContractInfoWithAddress.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a ContractInfoWithAddress.
                 * @implements IContractInfoWithAddress
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IContractInfoWithAddress=} [p] Properties to set
                 */
                function ContractInfoWithAddress(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ContractInfoWithAddress address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfoWithAddress
                 * @instance
                 */
                ContractInfoWithAddress.prototype.address = "";

                /**
                 * ContractInfoWithAddress contract_info.
                 * @member {cosmwasm.wasm.v1beta1.IContractInfo|null|undefined} contract_info
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfoWithAddress
                 * @instance
                 */
                ContractInfoWithAddress.prototype.contract_info = null;

                /**
                 * Encodes the specified ContractInfoWithAddress message. Does not implicitly {@link cosmwasm.wasm.v1beta1.ContractInfoWithAddress.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfoWithAddress
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IContractInfoWithAddress} m ContractInfoWithAddress message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractInfoWithAddress.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.contract_info != null && Object.hasOwnProperty.call(m, "contract_info"))
                        $root.cosmwasm.wasm.v1beta1.ContractInfo.encode(m.contract_info, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ContractInfoWithAddress message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfoWithAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.ContractInfoWithAddress} ContractInfoWithAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractInfoWithAddress.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.ContractInfoWithAddress();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.contract_info = $root.cosmwasm.wasm.v1beta1.ContractInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ContractInfoWithAddress;
            })();

            v1beta1.QueryContractsByCodeResponse = (function () {

                /**
                 * Properties of a QueryContractsByCodeResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryContractsByCodeResponse
                 * @property {Array.<cosmwasm.wasm.v1beta1.IContractInfoWithAddress>|null} [contract_infos] QueryContractsByCodeResponse contract_infos
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryContractsByCodeResponse pagination
                 */

                /**
                 * Constructs a new QueryContractsByCodeResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryContractsByCodeResponse.
                 * @implements IQueryContractsByCodeResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractsByCodeResponse=} [p] Properties to set
                 */
                function QueryContractsByCodeResponse(p) {
                    this.contract_infos = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryContractsByCodeResponse contract_infos.
                 * @member {Array.<cosmwasm.wasm.v1beta1.IContractInfoWithAddress>} contract_infos
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse
                 * @instance
                 */
                QueryContractsByCodeResponse.prototype.contract_infos = $util.emptyArray;

                /**
                 * QueryContractsByCodeResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse
                 * @instance
                 */
                QueryContractsByCodeResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractsByCodeResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryContractsByCodeResponse} m QueryContractsByCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractsByCodeResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract_infos != null && m.contract_infos.length) {
                        for (var i = 0; i < m.contract_infos.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.ContractInfoWithAddress.encode(m.contract_infos[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryContractsByCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse} QueryContractsByCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractsByCodeResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.contract_infos && m.contract_infos.length))
                                    m.contract_infos = [];
                                m.contract_infos.push($root.cosmwasm.wasm.v1beta1.ContractInfoWithAddress.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryContractsByCodeResponse;
            })();

            v1beta1.QueryAllContractStateRequest = (function () {

                /**
                 * Properties of a QueryAllContractStateRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryAllContractStateRequest
                 * @property {string|null} [address] QueryAllContractStateRequest address
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryAllContractStateRequest pagination
                 */

                /**
                 * Constructs a new QueryAllContractStateRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryAllContractStateRequest.
                 * @implements IQueryAllContractStateRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryAllContractStateRequest=} [p] Properties to set
                 */
                function QueryAllContractStateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAllContractStateRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateRequest
                 * @instance
                 */
                QueryAllContractStateRequest.prototype.address = "";

                /**
                 * QueryAllContractStateRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateRequest
                 * @instance
                 */
                QueryAllContractStateRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllContractStateRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryAllContractStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryAllContractStateRequest} m QueryAllContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllContractStateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAllContractStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryAllContractStateRequest} QueryAllContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllContractStateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryAllContractStateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAllContractStateRequest;
            })();

            v1beta1.QueryAllContractStateResponse = (function () {

                /**
                 * Properties of a QueryAllContractStateResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryAllContractStateResponse
                 * @property {Array.<cosmwasm.wasm.v1beta1.IModel>|null} [models] QueryAllContractStateResponse models
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryAllContractStateResponse pagination
                 */

                /**
                 * Constructs a new QueryAllContractStateResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryAllContractStateResponse.
                 * @implements IQueryAllContractStateResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryAllContractStateResponse=} [p] Properties to set
                 */
                function QueryAllContractStateResponse(p) {
                    this.models = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAllContractStateResponse models.
                 * @member {Array.<cosmwasm.wasm.v1beta1.IModel>} models
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateResponse
                 * @instance
                 */
                QueryAllContractStateResponse.prototype.models = $util.emptyArray;

                /**
                 * QueryAllContractStateResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateResponse
                 * @instance
                 */
                QueryAllContractStateResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllContractStateResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryAllContractStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryAllContractStateResponse} m QueryAllContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllContractStateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.models != null && m.models.length) {
                        for (var i = 0; i < m.models.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.Model.encode(m.models[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAllContractStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryAllContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryAllContractStateResponse} QueryAllContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllContractStateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryAllContractStateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.models && m.models.length))
                                    m.models = [];
                                m.models.push($root.cosmwasm.wasm.v1beta1.Model.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAllContractStateResponse;
            })();

            v1beta1.QueryRawContractStateRequest = (function () {

                /**
                 * Properties of a QueryRawContractStateRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryRawContractStateRequest
                 * @property {string|null} [address] QueryRawContractStateRequest address
                 * @property {Uint8Array|null} [query_data] QueryRawContractStateRequest query_data
                 */

                /**
                 * Constructs a new QueryRawContractStateRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryRawContractStateRequest.
                 * @implements IQueryRawContractStateRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryRawContractStateRequest=} [p] Properties to set
                 */
                function QueryRawContractStateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryRawContractStateRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateRequest
                 * @instance
                 */
                QueryRawContractStateRequest.prototype.address = "";

                /**
                 * QueryRawContractStateRequest query_data.
                 * @member {Uint8Array} query_data
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateRequest
                 * @instance
                 */
                QueryRawContractStateRequest.prototype.query_data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryRawContractStateRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryRawContractStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryRawContractStateRequest} m QueryRawContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRawContractStateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.query_data != null && Object.hasOwnProperty.call(m, "query_data"))
                        w.uint32(18).bytes(m.query_data);
                    return w;
                };

                /**
                 * Decodes a QueryRawContractStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryRawContractStateRequest} QueryRawContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRawContractStateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryRawContractStateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.query_data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryRawContractStateRequest;
            })();

            v1beta1.QueryRawContractStateResponse = (function () {

                /**
                 * Properties of a QueryRawContractStateResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryRawContractStateResponse
                 * @property {Uint8Array|null} [data] QueryRawContractStateResponse data
                 */

                /**
                 * Constructs a new QueryRawContractStateResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryRawContractStateResponse.
                 * @implements IQueryRawContractStateResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryRawContractStateResponse=} [p] Properties to set
                 */
                function QueryRawContractStateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryRawContractStateResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateResponse
                 * @instance
                 */
                QueryRawContractStateResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryRawContractStateResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryRawContractStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryRawContractStateResponse} m QueryRawContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRawContractStateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };

                /**
                 * Decodes a QueryRawContractStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryRawContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryRawContractStateResponse} QueryRawContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRawContractStateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryRawContractStateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryRawContractStateResponse;
            })();

            v1beta1.QuerySmartContractStateRequest = (function () {

                /**
                 * Properties of a QuerySmartContractStateRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQuerySmartContractStateRequest
                 * @property {string|null} [address] QuerySmartContractStateRequest address
                 * @property {Uint8Array|null} [query_data] QuerySmartContractStateRequest query_data
                 */

                /**
                 * Constructs a new QuerySmartContractStateRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QuerySmartContractStateRequest.
                 * @implements IQuerySmartContractStateRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQuerySmartContractStateRequest=} [p] Properties to set
                 */
                function QuerySmartContractStateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySmartContractStateRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest
                 * @instance
                 */
                QuerySmartContractStateRequest.prototype.address = "";

                /**
                 * QuerySmartContractStateRequest query_data.
                 * @member {Uint8Array} query_data
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest
                 * @instance
                 */
                QuerySmartContractStateRequest.prototype.query_data = $util.newBuffer([]);

                /**
                 * Encodes the specified QuerySmartContractStateRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQuerySmartContractStateRequest} m QuerySmartContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySmartContractStateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.query_data != null && Object.hasOwnProperty.call(m, "query_data"))
                        w.uint32(18).bytes(m.query_data);
                    return w;
                };

                /**
                 * Decodes a QuerySmartContractStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest} QuerySmartContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySmartContractStateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QuerySmartContractStateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.query_data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySmartContractStateRequest;
            })();

            v1beta1.QuerySmartContractStateResponse = (function () {

                /**
                 * Properties of a QuerySmartContractStateResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQuerySmartContractStateResponse
                 * @property {Uint8Array|null} [data] QuerySmartContractStateResponse data
                 */

                /**
                 * Constructs a new QuerySmartContractStateResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QuerySmartContractStateResponse.
                 * @implements IQuerySmartContractStateResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQuerySmartContractStateResponse=} [p] Properties to set
                 */
                function QuerySmartContractStateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySmartContractStateResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse
                 * @instance
                 */
                QuerySmartContractStateResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QuerySmartContractStateResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQuerySmartContractStateResponse} m QuerySmartContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySmartContractStateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };

                /**
                 * Decodes a QuerySmartContractStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse} QuerySmartContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySmartContractStateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySmartContractStateResponse;
            })();

            v1beta1.QueryCodeRequest = (function () {

                /**
                 * Properties of a QueryCodeRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryCodeRequest
                 * @property {Long|null} [code_id] QueryCodeRequest code_id
                 */

                /**
                 * Constructs a new QueryCodeRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryCodeRequest.
                 * @implements IQueryCodeRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodeRequest=} [p] Properties to set
                 */
                function QueryCodeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryCodeRequest code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeRequest
                 * @instance
                 */
                QueryCodeRequest.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified QueryCodeRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryCodeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodeRequest} m QueryCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(8).uint64(m.code_id);
                    return w;
                };

                /**
                 * Decodes a QueryCodeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryCodeRequest} QueryCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryCodeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_id = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCodeRequest;
            })();

            v1beta1.CodeInfoResponse = (function () {

                /**
                 * Properties of a CodeInfoResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface ICodeInfoResponse
                 * @property {Long|null} [code_id] CodeInfoResponse code_id
                 * @property {string|null} [creator] CodeInfoResponse creator
                 * @property {Uint8Array|null} [data_hash] CodeInfoResponse data_hash
                 * @property {string|null} [source] CodeInfoResponse source
                 * @property {string|null} [builder] CodeInfoResponse builder
                 */

                /**
                 * Constructs a new CodeInfoResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a CodeInfoResponse.
                 * @implements ICodeInfoResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.ICodeInfoResponse=} [p] Properties to set
                 */
                function CodeInfoResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CodeInfoResponse code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * CodeInfoResponse creator.
                 * @member {string} creator
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.creator = "";

                /**
                 * CodeInfoResponse data_hash.
                 * @member {Uint8Array} data_hash
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.data_hash = $util.newBuffer([]);

                /**
                 * CodeInfoResponse source.
                 * @member {string} source
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.source = "";

                /**
                 * CodeInfoResponse builder.
                 * @member {string} builder
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.builder = "";

                /**
                 * Encodes the specified CodeInfoResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.CodeInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.ICodeInfoResponse} m CodeInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CodeInfoResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(8).uint64(m.code_id);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(18).string(m.creator);
                    if (m.data_hash != null && Object.hasOwnProperty.call(m, "data_hash"))
                        w.uint32(26).bytes(m.data_hash);
                    if (m.source != null && Object.hasOwnProperty.call(m, "source"))
                        w.uint32(34).string(m.source);
                    if (m.builder != null && Object.hasOwnProperty.call(m, "builder"))
                        w.uint32(42).string(m.builder);
                    return w;
                };

                /**
                 * Decodes a CodeInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.CodeInfoResponse} CodeInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CodeInfoResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.CodeInfoResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_id = r.uint64();
                                break;
                            case 2:
                                m.creator = r.string();
                                break;
                            case 3:
                                m.data_hash = r.bytes();
                                break;
                            case 4:
                                m.source = r.string();
                                break;
                            case 5:
                                m.builder = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CodeInfoResponse;
            })();

            v1beta1.QueryCodeResponse = (function () {

                /**
                 * Properties of a QueryCodeResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryCodeResponse
                 * @property {cosmwasm.wasm.v1beta1.ICodeInfoResponse|null} [code_info] QueryCodeResponse code_info
                 * @property {Uint8Array|null} [data] QueryCodeResponse data
                 */

                /**
                 * Constructs a new QueryCodeResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryCodeResponse.
                 * @implements IQueryCodeResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodeResponse=} [p] Properties to set
                 */
                function QueryCodeResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryCodeResponse code_info.
                 * @member {cosmwasm.wasm.v1beta1.ICodeInfoResponse|null|undefined} code_info
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeResponse
                 * @instance
                 */
                QueryCodeResponse.prototype.code_info = null;

                /**
                 * QueryCodeResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeResponse
                 * @instance
                 */
                QueryCodeResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryCodeResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodeResponse} m QueryCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_info != null && Object.hasOwnProperty.call(m, "code_info"))
                        $root.cosmwasm.wasm.v1beta1.CodeInfoResponse.encode(m.code_info, w.uint32(10).fork()).ldelim();
                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                        w.uint32(18).bytes(m.data);
                    return w;
                };

                /**
                 * Decodes a QueryCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryCodeResponse} QueryCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryCodeResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_info = $root.cosmwasm.wasm.v1beta1.CodeInfoResponse.decode(r, r.uint32());
                                break;
                            case 2:
                                m.data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCodeResponse;
            })();

            v1beta1.QueryCodesRequest = (function () {

                /**
                 * Properties of a QueryCodesRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryCodesRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryCodesRequest pagination
                 */

                /**
                 * Constructs a new QueryCodesRequest.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryCodesRequest.
                 * @implements IQueryCodesRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodesRequest=} [p] Properties to set
                 */
                function QueryCodesRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryCodesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesRequest
                 * @instance
                 */
                QueryCodesRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryCodesRequest message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryCodesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodesRequest} m QueryCodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodesRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryCodesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryCodesRequest} QueryCodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodesRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryCodesRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCodesRequest;
            })();

            v1beta1.QueryCodesResponse = (function () {

                /**
                 * Properties of a QueryCodesResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IQueryCodesResponse
                 * @property {Array.<cosmwasm.wasm.v1beta1.ICodeInfoResponse>|null} [code_infos] QueryCodesResponse code_infos
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryCodesResponse pagination
                 */

                /**
                 * Constructs a new QueryCodesResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a QueryCodesResponse.
                 * @implements IQueryCodesResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodesResponse=} [p] Properties to set
                 */
                function QueryCodesResponse(p) {
                    this.code_infos = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryCodesResponse code_infos.
                 * @member {Array.<cosmwasm.wasm.v1beta1.ICodeInfoResponse>} code_infos
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesResponse
                 * @instance
                 */
                QueryCodesResponse.prototype.code_infos = $util.emptyArray;

                /**
                 * QueryCodesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesResponse
                 * @instance
                 */
                QueryCodesResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryCodesResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.QueryCodesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IQueryCodesResponse} m QueryCodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodesResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_infos != null && m.code_infos.length) {
                        for (var i = 0; i < m.code_infos.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.CodeInfoResponse.encode(m.code_infos[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryCodesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.QueryCodesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.QueryCodesResponse} QueryCodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodesResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.QueryCodesResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.code_infos && m.code_infos.length))
                                    m.code_infos = [];
                                m.code_infos.push($root.cosmwasm.wasm.v1beta1.CodeInfoResponse.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCodesResponse;
            })();

            v1beta1.StoreCodeProposal = (function () {

                /**
                 * Properties of a StoreCodeProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IStoreCodeProposal
                 * @property {string|null} [title] StoreCodeProposal title
                 * @property {string|null} [description] StoreCodeProposal description
                 * @property {string|null} [run_as] StoreCodeProposal run_as
                 * @property {Uint8Array|null} [wasm_byte_code] StoreCodeProposal wasm_byte_code
                 * @property {string|null} [source] StoreCodeProposal source
                 * @property {string|null} [builder] StoreCodeProposal builder
                 * @property {cosmwasm.wasm.v1beta1.IAccessConfig|null} [instantiate_permission] StoreCodeProposal instantiate_permission
                 */

                /**
                 * Constructs a new StoreCodeProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a StoreCodeProposal.
                 * @implements IStoreCodeProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IStoreCodeProposal=} [p] Properties to set
                 */
                function StoreCodeProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * StoreCodeProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.title = "";

                /**
                 * StoreCodeProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.description = "";

                /**
                 * StoreCodeProposal run_as.
                 * @member {string} run_as
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.run_as = "";

                /**
                 * StoreCodeProposal wasm_byte_code.
                 * @member {Uint8Array} wasm_byte_code
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.wasm_byte_code = $util.newBuffer([]);

                /**
                 * StoreCodeProposal source.
                 * @member {string} source
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.source = "";

                /**
                 * StoreCodeProposal builder.
                 * @member {string} builder
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.builder = "";

                /**
                 * StoreCodeProposal instantiate_permission.
                 * @member {cosmwasm.wasm.v1beta1.IAccessConfig|null|undefined} instantiate_permission
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.instantiate_permission = null;

                /**
                 * Encodes the specified StoreCodeProposal message. Does not implicitly {@link cosmwasm.wasm.v1beta1.StoreCodeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IStoreCodeProposal} m StoreCodeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreCodeProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.run_as != null && Object.hasOwnProperty.call(m, "run_as"))
                        w.uint32(26).string(m.run_as);
                    if (m.wasm_byte_code != null && Object.hasOwnProperty.call(m, "wasm_byte_code"))
                        w.uint32(34).bytes(m.wasm_byte_code);
                    if (m.source != null && Object.hasOwnProperty.call(m, "source"))
                        w.uint32(42).string(m.source);
                    if (m.builder != null && Object.hasOwnProperty.call(m, "builder"))
                        w.uint32(50).string(m.builder);
                    if (m.instantiate_permission != null && Object.hasOwnProperty.call(m, "instantiate_permission"))
                        $root.cosmwasm.wasm.v1beta1.AccessConfig.encode(m.instantiate_permission, w.uint32(58).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a StoreCodeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.StoreCodeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.StoreCodeProposal} StoreCodeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreCodeProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.StoreCodeProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.run_as = r.string();
                                break;
                            case 4:
                                m.wasm_byte_code = r.bytes();
                                break;
                            case 5:
                                m.source = r.string();
                                break;
                            case 6:
                                m.builder = r.string();
                                break;
                            case 7:
                                m.instantiate_permission = $root.cosmwasm.wasm.v1beta1.AccessConfig.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return StoreCodeProposal;
            })();

            v1beta1.InstantiateContractProposal = (function () {

                /**
                 * Properties of an InstantiateContractProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IInstantiateContractProposal
                 * @property {string|null} [title] InstantiateContractProposal title
                 * @property {string|null} [description] InstantiateContractProposal description
                 * @property {string|null} [run_as] InstantiateContractProposal run_as
                 * @property {string|null} [admin] InstantiateContractProposal admin
                 * @property {Long|null} [code_id] InstantiateContractProposal code_id
                 * @property {string|null} [label] InstantiateContractProposal label
                 * @property {Uint8Array|null} [init_msg] InstantiateContractProposal init_msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [init_funds] InstantiateContractProposal init_funds
                 */

                /**
                 * Constructs a new InstantiateContractProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents an InstantiateContractProposal.
                 * @implements IInstantiateContractProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IInstantiateContractProposal=} [p] Properties to set
                 */
                function InstantiateContractProposal(p) {
                    this.init_funds = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * InstantiateContractProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.title = "";

                /**
                 * InstantiateContractProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.description = "";

                /**
                 * InstantiateContractProposal run_as.
                 * @member {string} run_as
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.run_as = "";

                /**
                 * InstantiateContractProposal admin.
                 * @member {string} admin
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.admin = "";

                /**
                 * InstantiateContractProposal code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * InstantiateContractProposal label.
                 * @member {string} label
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.label = "";

                /**
                 * InstantiateContractProposal init_msg.
                 * @member {Uint8Array} init_msg
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.init_msg = $util.newBuffer([]);

                /**
                 * InstantiateContractProposal init_funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} init_funds
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.init_funds = $util.emptyArray;

                /**
                 * Encodes the specified InstantiateContractProposal message. Does not implicitly {@link cosmwasm.wasm.v1beta1.InstantiateContractProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IInstantiateContractProposal} m InstantiateContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InstantiateContractProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.run_as != null && Object.hasOwnProperty.call(m, "run_as"))
                        w.uint32(26).string(m.run_as);
                    if (m.admin != null && Object.hasOwnProperty.call(m, "admin"))
                        w.uint32(34).string(m.admin);
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(40).uint64(m.code_id);
                    if (m.label != null && Object.hasOwnProperty.call(m, "label"))
                        w.uint32(50).string(m.label);
                    if (m.init_msg != null && Object.hasOwnProperty.call(m, "init_msg"))
                        w.uint32(58).bytes(m.init_msg);
                    if (m.init_funds != null && m.init_funds.length) {
                        for (var i = 0; i < m.init_funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.init_funds[i], w.uint32(66).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes an InstantiateContractProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.InstantiateContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.InstantiateContractProposal} InstantiateContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InstantiateContractProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.InstantiateContractProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.run_as = r.string();
                                break;
                            case 4:
                                m.admin = r.string();
                                break;
                            case 5:
                                m.code_id = r.uint64();
                                break;
                            case 6:
                                m.label = r.string();
                                break;
                            case 7:
                                m.init_msg = r.bytes();
                                break;
                            case 8:
                                if (!(m.init_funds && m.init_funds.length))
                                    m.init_funds = [];
                                m.init_funds.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return InstantiateContractProposal;
            })();

            v1beta1.MigrateContractProposal = (function () {

                /**
                 * Properties of a MigrateContractProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMigrateContractProposal
                 * @property {string|null} [title] MigrateContractProposal title
                 * @property {string|null} [description] MigrateContractProposal description
                 * @property {string|null} [run_as] MigrateContractProposal run_as
                 * @property {string|null} [contract] MigrateContractProposal contract
                 * @property {Long|null} [code_id] MigrateContractProposal code_id
                 * @property {Uint8Array|null} [migrate_msg] MigrateContractProposal migrate_msg
                 */

                /**
                 * Constructs a new MigrateContractProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MigrateContractProposal.
                 * @implements IMigrateContractProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMigrateContractProposal=} [p] Properties to set
                 */
                function MigrateContractProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MigrateContractProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.title = "";

                /**
                 * MigrateContractProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.description = "";

                /**
                 * MigrateContractProposal run_as.
                 * @member {string} run_as
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.run_as = "";

                /**
                 * MigrateContractProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.contract = "";

                /**
                 * MigrateContractProposal code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * MigrateContractProposal migrate_msg.
                 * @member {Uint8Array} migrate_msg
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.migrate_msg = $util.newBuffer([]);

                /**
                 * Encodes the specified MigrateContractProposal message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MigrateContractProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMigrateContractProposal} m MigrateContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MigrateContractProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.run_as != null && Object.hasOwnProperty.call(m, "run_as"))
                        w.uint32(26).string(m.run_as);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(34).string(m.contract);
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(40).uint64(m.code_id);
                    if (m.migrate_msg != null && Object.hasOwnProperty.call(m, "migrate_msg"))
                        w.uint32(50).bytes(m.migrate_msg);
                    return w;
                };

                /**
                 * Decodes a MigrateContractProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MigrateContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MigrateContractProposal} MigrateContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MigrateContractProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MigrateContractProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.run_as = r.string();
                                break;
                            case 4:
                                m.contract = r.string();
                                break;
                            case 5:
                                m.code_id = r.uint64();
                                break;
                            case 6:
                                m.migrate_msg = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MigrateContractProposal;
            })();

            v1beta1.UpdateAdminProposal = (function () {

                /**
                 * Properties of an UpdateAdminProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IUpdateAdminProposal
                 * @property {string|null} [title] UpdateAdminProposal title
                 * @property {string|null} [description] UpdateAdminProposal description
                 * @property {string|null} [new_admin] UpdateAdminProposal new_admin
                 * @property {string|null} [contract] UpdateAdminProposal contract
                 */

                /**
                 * Constructs a new UpdateAdminProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents an UpdateAdminProposal.
                 * @implements IUpdateAdminProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IUpdateAdminProposal=} [p] Properties to set
                 */
                function UpdateAdminProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * UpdateAdminProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1beta1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.title = "";

                /**
                 * UpdateAdminProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1beta1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.description = "";

                /**
                 * UpdateAdminProposal new_admin.
                 * @member {string} new_admin
                 * @memberof cosmwasm.wasm.v1beta1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.new_admin = "";

                /**
                 * UpdateAdminProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.contract = "";

                /**
                 * Encodes the specified UpdateAdminProposal message. Does not implicitly {@link cosmwasm.wasm.v1beta1.UpdateAdminProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.UpdateAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IUpdateAdminProposal} m UpdateAdminProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateAdminProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.new_admin != null && Object.hasOwnProperty.call(m, "new_admin"))
                        w.uint32(26).string(m.new_admin);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(34).string(m.contract);
                    return w;
                };

                /**
                 * Decodes an UpdateAdminProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.UpdateAdminProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.UpdateAdminProposal} UpdateAdminProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateAdminProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.UpdateAdminProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.new_admin = r.string();
                                break;
                            case 4:
                                m.contract = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return UpdateAdminProposal;
            })();

            v1beta1.ClearAdminProposal = (function () {

                /**
                 * Properties of a ClearAdminProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IClearAdminProposal
                 * @property {string|null} [title] ClearAdminProposal title
                 * @property {string|null} [description] ClearAdminProposal description
                 * @property {string|null} [contract] ClearAdminProposal contract
                 */

                /**
                 * Constructs a new ClearAdminProposal.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a ClearAdminProposal.
                 * @implements IClearAdminProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IClearAdminProposal=} [p] Properties to set
                 */
                function ClearAdminProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ClearAdminProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1beta1.ClearAdminProposal
                 * @instance
                 */
                ClearAdminProposal.prototype.title = "";

                /**
                 * ClearAdminProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1beta1.ClearAdminProposal
                 * @instance
                 */
                ClearAdminProposal.prototype.description = "";

                /**
                 * ClearAdminProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.ClearAdminProposal
                 * @instance
                 */
                ClearAdminProposal.prototype.contract = "";

                /**
                 * Encodes the specified ClearAdminProposal message. Does not implicitly {@link cosmwasm.wasm.v1beta1.ClearAdminProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.ClearAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IClearAdminProposal} m ClearAdminProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClearAdminProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(26).string(m.contract);
                    return w;
                };

                /**
                 * Decodes a ClearAdminProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.ClearAdminProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.ClearAdminProposal} ClearAdminProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClearAdminProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.ClearAdminProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.contract = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ClearAdminProposal;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IGenesisState
                 * @property {cosmwasm.wasm.v1beta1.IParams|null} [params] GenesisState params
                 * @property {Array.<cosmwasm.wasm.v1beta1.ICode>|null} [codes] GenesisState codes
                 * @property {Array.<cosmwasm.wasm.v1beta1.IContract>|null} [contracts] GenesisState contracts
                 * @property {Array.<cosmwasm.wasm.v1beta1.ISequence>|null} [sequences] GenesisState sequences
                 * @property {Array.<cosmwasm.wasm.v1beta1.GenesisState.IGenMsgs>|null} [gen_msgs] GenesisState gen_msgs
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.codes = [];
                    this.contracts = [];
                    this.sequences = [];
                    this.gen_msgs = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmwasm.wasm.v1beta1.IParams|null|undefined} params
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState codes.
                 * @member {Array.<cosmwasm.wasm.v1beta1.ICode>} codes
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.codes = $util.emptyArray;

                /**
                 * GenesisState contracts.
                 * @member {Array.<cosmwasm.wasm.v1beta1.IContract>} contracts
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.contracts = $util.emptyArray;

                /**
                 * GenesisState sequences.
                 * @member {Array.<cosmwasm.wasm.v1beta1.ISequence>} sequences
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.sequences = $util.emptyArray;

                /**
                 * GenesisState gen_msgs.
                 * @member {Array.<cosmwasm.wasm.v1beta1.GenesisState.IGenMsgs>} gen_msgs
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.gen_msgs = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmwasm.wasm.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmwasm.wasm.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    if (m.codes != null && m.codes.length) {
                        for (var i = 0; i < m.codes.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.Code.encode(m.codes[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.contracts != null && m.contracts.length) {
                        for (var i = 0; i < m.contracts.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.Contract.encode(m.contracts[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.sequences != null && m.sequences.length) {
                        for (var i = 0; i < m.sequences.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.Sequence.encode(m.sequences[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.gen_msgs != null && m.gen_msgs.length) {
                        for (var i = 0; i < m.gen_msgs.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.GenesisState.GenMsgs.encode(m.gen_msgs[i], w.uint32(42).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmwasm.wasm.v1beta1.Params.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.codes && m.codes.length))
                                    m.codes = [];
                                m.codes.push($root.cosmwasm.wasm.v1beta1.Code.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.contracts && m.contracts.length))
                                    m.contracts = [];
                                m.contracts.push($root.cosmwasm.wasm.v1beta1.Contract.decode(r, r.uint32()));
                                break;
                            case 4:
                                if (!(m.sequences && m.sequences.length))
                                    m.sequences = [];
                                m.sequences.push($root.cosmwasm.wasm.v1beta1.Sequence.decode(r, r.uint32()));
                                break;
                            case 5:
                                if (!(m.gen_msgs && m.gen_msgs.length))
                                    m.gen_msgs = [];
                                m.gen_msgs.push($root.cosmwasm.wasm.v1beta1.GenesisState.GenMsgs.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                GenesisState.GenMsgs = (function () {

                    /**
                     * Properties of a GenMsgs.
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState
                     * @interface IGenMsgs
                     * @property {cosmwasm.wasm.v1beta1.IMsgStoreCode|null} [store_code] GenMsgs store_code
                     * @property {cosmwasm.wasm.v1beta1.IMsgInstantiateContract|null} [instantiate_contract] GenMsgs instantiate_contract
                     * @property {cosmwasm.wasm.v1beta1.IMsgExecuteContract|null} [execute_contract] GenMsgs execute_contract
                     */

                    /**
                     * Constructs a new GenMsgs.
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState
                     * @classdesc Represents a GenMsgs.
                     * @implements IGenMsgs
                     * @constructor
                     * @param {cosmwasm.wasm.v1beta1.GenesisState.IGenMsgs=} [p] Properties to set
                     */
                    function GenMsgs(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenMsgs store_code.
                     * @member {cosmwasm.wasm.v1beta1.IMsgStoreCode|null|undefined} store_code
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState.GenMsgs
                     * @instance
                     */
                    GenMsgs.prototype.store_code = null;

                    /**
                     * GenMsgs instantiate_contract.
                     * @member {cosmwasm.wasm.v1beta1.IMsgInstantiateContract|null|undefined} instantiate_contract
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState.GenMsgs
                     * @instance
                     */
                    GenMsgs.prototype.instantiate_contract = null;

                    /**
                     * GenMsgs execute_contract.
                     * @member {cosmwasm.wasm.v1beta1.IMsgExecuteContract|null|undefined} execute_contract
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState.GenMsgs
                     * @instance
                     */
                    GenMsgs.prototype.execute_contract = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * GenMsgs sum.
                     * @member {"store_code"|"instantiate_contract"|"execute_contract"|undefined} sum
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState.GenMsgs
                     * @instance
                     */
                    Object.defineProperty(GenMsgs.prototype, "sum", {
                        get: $util.oneOfGetter($oneOfFields = ["store_code", "instantiate_contract", "execute_contract"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified GenMsgs message. Does not implicitly {@link cosmwasm.wasm.v1beta1.GenesisState.GenMsgs.verify|verify} messages.
                     * @function encode
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState.GenMsgs
                     * @static
                     * @param {cosmwasm.wasm.v1beta1.GenesisState.IGenMsgs} m GenMsgs message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenMsgs.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.store_code != null && Object.hasOwnProperty.call(m, "store_code"))
                            $root.cosmwasm.wasm.v1beta1.MsgStoreCode.encode(m.store_code, w.uint32(10).fork()).ldelim();
                        if (m.instantiate_contract != null && Object.hasOwnProperty.call(m, "instantiate_contract"))
                            $root.cosmwasm.wasm.v1beta1.MsgInstantiateContract.encode(m.instantiate_contract, w.uint32(18).fork()).ldelim();
                        if (m.execute_contract != null && Object.hasOwnProperty.call(m, "execute_contract"))
                            $root.cosmwasm.wasm.v1beta1.MsgExecuteContract.encode(m.execute_contract, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GenMsgs message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmwasm.wasm.v1beta1.GenesisState.GenMsgs
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmwasm.wasm.v1beta1.GenesisState.GenMsgs} GenMsgs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenMsgs.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.GenesisState.GenMsgs();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.store_code = $root.cosmwasm.wasm.v1beta1.MsgStoreCode.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.instantiate_contract = $root.cosmwasm.wasm.v1beta1.MsgInstantiateContract.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.execute_contract = $root.cosmwasm.wasm.v1beta1.MsgExecuteContract.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenMsgs;
                })();

                return GenesisState;
            })();

            v1beta1.Code = (function () {

                /**
                 * Properties of a Code.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface ICode
                 * @property {Long|null} [code_id] Code code_id
                 * @property {cosmwasm.wasm.v1beta1.ICodeInfo|null} [code_info] Code code_info
                 * @property {Uint8Array|null} [code_bytes] Code code_bytes
                 */

                /**
                 * Constructs a new Code.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a Code.
                 * @implements ICode
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.ICode=} [p] Properties to set
                 */
                function Code(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Code code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.Code
                 * @instance
                 */
                Code.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Code code_info.
                 * @member {cosmwasm.wasm.v1beta1.ICodeInfo|null|undefined} code_info
                 * @memberof cosmwasm.wasm.v1beta1.Code
                 * @instance
                 */
                Code.prototype.code_info = null;

                /**
                 * Code code_bytes.
                 * @member {Uint8Array} code_bytes
                 * @memberof cosmwasm.wasm.v1beta1.Code
                 * @instance
                 */
                Code.prototype.code_bytes = $util.newBuffer([]);

                /**
                 * Encodes the specified Code message. Does not implicitly {@link cosmwasm.wasm.v1beta1.Code.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.Code
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.ICode} m Code message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Code.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(8).uint64(m.code_id);
                    if (m.code_info != null && Object.hasOwnProperty.call(m, "code_info"))
                        $root.cosmwasm.wasm.v1beta1.CodeInfo.encode(m.code_info, w.uint32(18).fork()).ldelim();
                    if (m.code_bytes != null && Object.hasOwnProperty.call(m, "code_bytes"))
                        w.uint32(26).bytes(m.code_bytes);
                    return w;
                };

                /**
                 * Decodes a Code message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.Code
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.Code} Code
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Code.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.Code();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_id = r.uint64();
                                break;
                            case 2:
                                m.code_info = $root.cosmwasm.wasm.v1beta1.CodeInfo.decode(r, r.uint32());
                                break;
                            case 3:
                                m.code_bytes = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Code;
            })();

            v1beta1.Contract = (function () {

                /**
                 * Properties of a Contract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IContract
                 * @property {string|null} [contract_address] Contract contract_address
                 * @property {cosmwasm.wasm.v1beta1.IContractInfo|null} [contract_info] Contract contract_info
                 * @property {Array.<cosmwasm.wasm.v1beta1.IModel>|null} [contract_state] Contract contract_state
                 */

                /**
                 * Constructs a new Contract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a Contract.
                 * @implements IContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IContract=} [p] Properties to set
                 */
                function Contract(p) {
                    this.contract_state = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Contract contract_address.
                 * @member {string} contract_address
                 * @memberof cosmwasm.wasm.v1beta1.Contract
                 * @instance
                 */
                Contract.prototype.contract_address = "";

                /**
                 * Contract contract_info.
                 * @member {cosmwasm.wasm.v1beta1.IContractInfo|null|undefined} contract_info
                 * @memberof cosmwasm.wasm.v1beta1.Contract
                 * @instance
                 */
                Contract.prototype.contract_info = null;

                /**
                 * Contract contract_state.
                 * @member {Array.<cosmwasm.wasm.v1beta1.IModel>} contract_state
                 * @memberof cosmwasm.wasm.v1beta1.Contract
                 * @instance
                 */
                Contract.prototype.contract_state = $util.emptyArray;

                /**
                 * Encodes the specified Contract message. Does not implicitly {@link cosmwasm.wasm.v1beta1.Contract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.Contract
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IContract} m Contract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract_address != null && Object.hasOwnProperty.call(m, "contract_address"))
                        w.uint32(10).string(m.contract_address);
                    if (m.contract_info != null && Object.hasOwnProperty.call(m, "contract_info"))
                        $root.cosmwasm.wasm.v1beta1.ContractInfo.encode(m.contract_info, w.uint32(18).fork()).ldelim();
                    if (m.contract_state != null && m.contract_state.length) {
                        for (var i = 0; i < m.contract_state.length; ++i)
                            $root.cosmwasm.wasm.v1beta1.Model.encode(m.contract_state[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Contract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.Contract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.Contract} Contract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.Contract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract_address = r.string();
                                break;
                            case 2:
                                m.contract_info = $root.cosmwasm.wasm.v1beta1.ContractInfo.decode(r, r.uint32());
                                break;
                            case 3:
                                if (!(m.contract_state && m.contract_state.length))
                                    m.contract_state = [];
                                m.contract_state.push($root.cosmwasm.wasm.v1beta1.Model.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Contract;
            })();

            v1beta1.Sequence = (function () {

                /**
                 * Properties of a Sequence.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface ISequence
                 * @property {Uint8Array|null} [id_key] Sequence id_key
                 * @property {Long|null} [value] Sequence value
                 */

                /**
                 * Constructs a new Sequence.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a Sequence.
                 * @implements ISequence
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.ISequence=} [p] Properties to set
                 */
                function Sequence(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Sequence id_key.
                 * @member {Uint8Array} id_key
                 * @memberof cosmwasm.wasm.v1beta1.Sequence
                 * @instance
                 */
                Sequence.prototype.id_key = $util.newBuffer([]);

                /**
                 * Sequence value.
                 * @member {Long} value
                 * @memberof cosmwasm.wasm.v1beta1.Sequence
                 * @instance
                 */
                Sequence.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified Sequence message. Does not implicitly {@link cosmwasm.wasm.v1beta1.Sequence.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.Sequence
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.ISequence} m Sequence message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Sequence.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.id_key != null && Object.hasOwnProperty.call(m, "id_key"))
                        w.uint32(10).bytes(m.id_key);
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(16).uint64(m.value);
                    return w;
                };

                /**
                 * Decodes a Sequence message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.Sequence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.Sequence} Sequence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Sequence.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.Sequence();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.id_key = r.bytes();
                                break;
                            case 2:
                                m.value = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Sequence;
            })();

            v1beta1.MsgStoreCode = (function () {

                /**
                 * Properties of a MsgStoreCode.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgStoreCode
                 * @property {string|null} [sender] MsgStoreCode sender
                 * @property {Uint8Array|null} [wasm_byte_code] MsgStoreCode wasm_byte_code
                 * @property {string|null} [source] MsgStoreCode source
                 * @property {string|null} [builder] MsgStoreCode builder
                 * @property {cosmwasm.wasm.v1beta1.IAccessConfig|null} [instantiate_permission] MsgStoreCode instantiate_permission
                 */

                /**
                 * Constructs a new MsgStoreCode.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgStoreCode.
                 * @implements IMsgStoreCode
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgStoreCode=} [p] Properties to set
                 */
                function MsgStoreCode(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgStoreCode sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.sender = "";

                /**
                 * MsgStoreCode wasm_byte_code.
                 * @member {Uint8Array} wasm_byte_code
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.wasm_byte_code = $util.newBuffer([]);

                /**
                 * MsgStoreCode source.
                 * @member {string} source
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.source = "";

                /**
                 * MsgStoreCode builder.
                 * @member {string} builder
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.builder = "";

                /**
                 * MsgStoreCode instantiate_permission.
                 * @member {cosmwasm.wasm.v1beta1.IAccessConfig|null|undefined} instantiate_permission
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.instantiate_permission = null;

                /**
                 * Encodes the specified MsgStoreCode message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgStoreCode.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgStoreCode} m MsgStoreCode message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgStoreCode.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.wasm_byte_code != null && Object.hasOwnProperty.call(m, "wasm_byte_code"))
                        w.uint32(18).bytes(m.wasm_byte_code);
                    if (m.source != null && Object.hasOwnProperty.call(m, "source"))
                        w.uint32(26).string(m.source);
                    if (m.builder != null && Object.hasOwnProperty.call(m, "builder"))
                        w.uint32(34).string(m.builder);
                    if (m.instantiate_permission != null && Object.hasOwnProperty.call(m, "instantiate_permission"))
                        $root.cosmwasm.wasm.v1beta1.AccessConfig.encode(m.instantiate_permission, w.uint32(42).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgStoreCode message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCode
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgStoreCode} MsgStoreCode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgStoreCode.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgStoreCode();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 2:
                                m.wasm_byte_code = r.bytes();
                                break;
                            case 3:
                                m.source = r.string();
                                break;
                            case 4:
                                m.builder = r.string();
                                break;
                            case 5:
                                m.instantiate_permission = $root.cosmwasm.wasm.v1beta1.AccessConfig.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgStoreCode;
            })();

            v1beta1.MsgStoreCodeResponse = (function () {

                /**
                 * Properties of a MsgStoreCodeResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgStoreCodeResponse
                 * @property {Long|null} [code_id] MsgStoreCodeResponse code_id
                 */

                /**
                 * Constructs a new MsgStoreCodeResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgStoreCodeResponse.
                 * @implements IMsgStoreCodeResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgStoreCodeResponse=} [p] Properties to set
                 */
                function MsgStoreCodeResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgStoreCodeResponse code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCodeResponse
                 * @instance
                 */
                MsgStoreCodeResponse.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified MsgStoreCodeResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgStoreCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgStoreCodeResponse} m MsgStoreCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgStoreCodeResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(8).uint64(m.code_id);
                    return w;
                };

                /**
                 * Decodes a MsgStoreCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgStoreCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgStoreCodeResponse} MsgStoreCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgStoreCodeResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgStoreCodeResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_id = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgStoreCodeResponse;
            })();

            v1beta1.MsgInstantiateContract = (function () {

                /**
                 * Properties of a MsgInstantiateContract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgInstantiateContract
                 * @property {string|null} [sender] MsgInstantiateContract sender
                 * @property {string|null} [admin] MsgInstantiateContract admin
                 * @property {Long|null} [code_id] MsgInstantiateContract code_id
                 * @property {string|null} [label] MsgInstantiateContract label
                 * @property {Uint8Array|null} [init_msg] MsgInstantiateContract init_msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [init_funds] MsgInstantiateContract init_funds
                 */

                /**
                 * Constructs a new MsgInstantiateContract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgInstantiateContract.
                 * @implements IMsgInstantiateContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgInstantiateContract=} [p] Properties to set
                 */
                function MsgInstantiateContract(p) {
                    this.init_funds = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgInstantiateContract sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.sender = "";

                /**
                 * MsgInstantiateContract admin.
                 * @member {string} admin
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.admin = "";

                /**
                 * MsgInstantiateContract code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * MsgInstantiateContract label.
                 * @member {string} label
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.label = "";

                /**
                 * MsgInstantiateContract init_msg.
                 * @member {Uint8Array} init_msg
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.init_msg = $util.newBuffer([]);

                /**
                 * MsgInstantiateContract init_funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} init_funds
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.init_funds = $util.emptyArray;

                /**
                 * Encodes the specified MsgInstantiateContract message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgInstantiateContract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgInstantiateContract} m MsgInstantiateContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgInstantiateContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.admin != null && Object.hasOwnProperty.call(m, "admin"))
                        w.uint32(18).string(m.admin);
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(24).uint64(m.code_id);
                    if (m.label != null && Object.hasOwnProperty.call(m, "label"))
                        w.uint32(34).string(m.label);
                    if (m.init_msg != null && Object.hasOwnProperty.call(m, "init_msg"))
                        w.uint32(42).bytes(m.init_msg);
                    if (m.init_funds != null && m.init_funds.length) {
                        for (var i = 0; i < m.init_funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.init_funds[i], w.uint32(50).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgInstantiateContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgInstantiateContract} MsgInstantiateContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgInstantiateContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgInstantiateContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 2:
                                m.admin = r.string();
                                break;
                            case 3:
                                m.code_id = r.uint64();
                                break;
                            case 4:
                                m.label = r.string();
                                break;
                            case 5:
                                m.init_msg = r.bytes();
                                break;
                            case 6:
                                if (!(m.init_funds && m.init_funds.length))
                                    m.init_funds = [];
                                m.init_funds.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgInstantiateContract;
            })();

            v1beta1.MsgInstantiateContractResponse = (function () {

                /**
                 * Properties of a MsgInstantiateContractResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgInstantiateContractResponse
                 * @property {string|null} [address] MsgInstantiateContractResponse address
                 */

                /**
                 * Constructs a new MsgInstantiateContractResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgInstantiateContractResponse.
                 * @implements IMsgInstantiateContractResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgInstantiateContractResponse=} [p] Properties to set
                 */
                function MsgInstantiateContractResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgInstantiateContractResponse address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse
                 * @instance
                 */
                MsgInstantiateContractResponse.prototype.address = "";

                /**
                 * Encodes the specified MsgInstantiateContractResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgInstantiateContractResponse} m MsgInstantiateContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgInstantiateContractResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    return w;
                };

                /**
                 * Decodes a MsgInstantiateContractResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse} MsgInstantiateContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgInstantiateContractResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgInstantiateContractResponse;
            })();

            v1beta1.MsgExecuteContract = (function () {

                /**
                 * Properties of a MsgExecuteContract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgExecuteContract
                 * @property {string|null} [sender] MsgExecuteContract sender
                 * @property {string|null} [contract] MsgExecuteContract contract
                 * @property {Uint8Array|null} [msg] MsgExecuteContract msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [sent_funds] MsgExecuteContract sent_funds
                 */

                /**
                 * Constructs a new MsgExecuteContract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgExecuteContract.
                 * @implements IMsgExecuteContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgExecuteContract=} [p] Properties to set
                 */
                function MsgExecuteContract(p) {
                    this.sent_funds = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgExecuteContract sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.sender = "";

                /**
                 * MsgExecuteContract contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.contract = "";

                /**
                 * MsgExecuteContract msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.msg = $util.newBuffer([]);

                /**
                 * MsgExecuteContract sent_funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} sent_funds
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.sent_funds = $util.emptyArray;

                /**
                 * Encodes the specified MsgExecuteContract message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgExecuteContract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContract
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgExecuteContract} m MsgExecuteContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(18).string(m.contract);
                    if (m.msg != null && Object.hasOwnProperty.call(m, "msg"))
                        w.uint32(26).bytes(m.msg);
                    if (m.sent_funds != null && m.sent_funds.length) {
                        for (var i = 0; i < m.sent_funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.sent_funds[i], w.uint32(42).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgExecuteContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgExecuteContract} MsgExecuteContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgExecuteContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 2:
                                m.contract = r.string();
                                break;
                            case 3:
                                m.msg = r.bytes();
                                break;
                            case 5:
                                if (!(m.sent_funds && m.sent_funds.length))
                                    m.sent_funds = [];
                                m.sent_funds.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgExecuteContract;
            })();

            v1beta1.MsgExecuteContractResponse = (function () {

                /**
                 * Properties of a MsgExecuteContractResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgExecuteContractResponse
                 * @property {Uint8Array|null} [data] MsgExecuteContractResponse data
                 */

                /**
                 * Constructs a new MsgExecuteContractResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgExecuteContractResponse.
                 * @implements IMsgExecuteContractResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgExecuteContractResponse=} [p] Properties to set
                 */
                function MsgExecuteContractResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgExecuteContractResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContractResponse
                 * @instance
                 */
                MsgExecuteContractResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgExecuteContractResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgExecuteContractResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgExecuteContractResponse} m MsgExecuteContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContractResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };

                /**
                 * Decodes a MsgExecuteContractResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgExecuteContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgExecuteContractResponse} MsgExecuteContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContractResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgExecuteContractResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgExecuteContractResponse;
            })();

            v1beta1.MsgMigrateContract = (function () {

                /**
                 * Properties of a MsgMigrateContract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgMigrateContract
                 * @property {string|null} [sender] MsgMigrateContract sender
                 * @property {string|null} [contract] MsgMigrateContract contract
                 * @property {Long|null} [code_id] MsgMigrateContract code_id
                 * @property {Uint8Array|null} [migrate_msg] MsgMigrateContract migrate_msg
                 */

                /**
                 * Constructs a new MsgMigrateContract.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgMigrateContract.
                 * @implements IMsgMigrateContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgMigrateContract=} [p] Properties to set
                 */
                function MsgMigrateContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgMigrateContract sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.sender = "";

                /**
                 * MsgMigrateContract contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.contract = "";

                /**
                 * MsgMigrateContract code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * MsgMigrateContract migrate_msg.
                 * @member {Uint8Array} migrate_msg
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.migrate_msg = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgMigrateContract message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgMigrateContract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContract
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgMigrateContract} m MsgMigrateContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMigrateContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(18).string(m.contract);
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(24).uint64(m.code_id);
                    if (m.migrate_msg != null && Object.hasOwnProperty.call(m, "migrate_msg"))
                        w.uint32(34).bytes(m.migrate_msg);
                    return w;
                };

                /**
                 * Decodes a MsgMigrateContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgMigrateContract} MsgMigrateContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMigrateContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgMigrateContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 2:
                                m.contract = r.string();
                                break;
                            case 3:
                                m.code_id = r.uint64();
                                break;
                            case 4:
                                m.migrate_msg = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgMigrateContract;
            })();

            v1beta1.MsgMigrateContractResponse = (function () {

                /**
                 * Properties of a MsgMigrateContractResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgMigrateContractResponse
                 * @property {Uint8Array|null} [data] MsgMigrateContractResponse data
                 */

                /**
                 * Constructs a new MsgMigrateContractResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgMigrateContractResponse.
                 * @implements IMsgMigrateContractResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgMigrateContractResponse=} [p] Properties to set
                 */
                function MsgMigrateContractResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgMigrateContractResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContractResponse
                 * @instance
                 */
                MsgMigrateContractResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgMigrateContractResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgMigrateContractResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgMigrateContractResponse} m MsgMigrateContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMigrateContractResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };

                /**
                 * Decodes a MsgMigrateContractResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgMigrateContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgMigrateContractResponse} MsgMigrateContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMigrateContractResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgMigrateContractResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgMigrateContractResponse;
            })();

            v1beta1.MsgUpdateAdmin = (function () {

                /**
                 * Properties of a MsgUpdateAdmin.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgUpdateAdmin
                 * @property {string|null} [sender] MsgUpdateAdmin sender
                 * @property {string|null} [new_admin] MsgUpdateAdmin new_admin
                 * @property {string|null} [contract] MsgUpdateAdmin contract
                 */

                /**
                 * Constructs a new MsgUpdateAdmin.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgUpdateAdmin.
                 * @implements IMsgUpdateAdmin
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgUpdateAdmin=} [p] Properties to set
                 */
                function MsgUpdateAdmin(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgUpdateAdmin sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdmin
                 * @instance
                 */
                MsgUpdateAdmin.prototype.sender = "";

                /**
                 * MsgUpdateAdmin new_admin.
                 * @member {string} new_admin
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdmin
                 * @instance
                 */
                MsgUpdateAdmin.prototype.new_admin = "";

                /**
                 * MsgUpdateAdmin contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdmin
                 * @instance
                 */
                MsgUpdateAdmin.prototype.contract = "";

                /**
                 * Encodes the specified MsgUpdateAdmin message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgUpdateAdmin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgUpdateAdmin} m MsgUpdateAdmin message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateAdmin.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.new_admin != null && Object.hasOwnProperty.call(m, "new_admin"))
                        w.uint32(18).string(m.new_admin);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(26).string(m.contract);
                    return w;
                };

                /**
                 * Decodes a MsgUpdateAdmin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdmin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgUpdateAdmin} MsgUpdateAdmin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateAdmin.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgUpdateAdmin();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 2:
                                m.new_admin = r.string();
                                break;
                            case 3:
                                m.contract = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgUpdateAdmin;
            })();

            v1beta1.MsgUpdateAdminResponse = (function () {

                /**
                 * Properties of a MsgUpdateAdminResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgUpdateAdminResponse
                 */

                /**
                 * Constructs a new MsgUpdateAdminResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgUpdateAdminResponse.
                 * @implements IMsgUpdateAdminResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgUpdateAdminResponse=} [p] Properties to set
                 */
                function MsgUpdateAdminResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgUpdateAdminResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgUpdateAdminResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgUpdateAdminResponse} m MsgUpdateAdminResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateAdminResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgUpdateAdminResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgUpdateAdminResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgUpdateAdminResponse} MsgUpdateAdminResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateAdminResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgUpdateAdminResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgUpdateAdminResponse;
            })();

            v1beta1.MsgClearAdmin = (function () {

                /**
                 * Properties of a MsgClearAdmin.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgClearAdmin
                 * @property {string|null} [sender] MsgClearAdmin sender
                 * @property {string|null} [contract] MsgClearAdmin contract
                 */

                /**
                 * Constructs a new MsgClearAdmin.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgClearAdmin.
                 * @implements IMsgClearAdmin
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgClearAdmin=} [p] Properties to set
                 */
                function MsgClearAdmin(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgClearAdmin sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1beta1.MsgClearAdmin
                 * @instance
                 */
                MsgClearAdmin.prototype.sender = "";

                /**
                 * MsgClearAdmin contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1beta1.MsgClearAdmin
                 * @instance
                 */
                MsgClearAdmin.prototype.contract = "";

                /**
                 * Encodes the specified MsgClearAdmin message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgClearAdmin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgClearAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgClearAdmin} m MsgClearAdmin message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgClearAdmin.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(26).string(m.contract);
                    return w;
                };

                /**
                 * Decodes a MsgClearAdmin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgClearAdmin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgClearAdmin} MsgClearAdmin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgClearAdmin.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgClearAdmin();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 3:
                                m.contract = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgClearAdmin;
            })();

            v1beta1.MsgClearAdminResponse = (function () {

                /**
                 * Properties of a MsgClearAdminResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IMsgClearAdminResponse
                 */

                /**
                 * Constructs a new MsgClearAdminResponse.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a MsgClearAdminResponse.
                 * @implements IMsgClearAdminResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IMsgClearAdminResponse=} [p] Properties to set
                 */
                function MsgClearAdminResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgClearAdminResponse message. Does not implicitly {@link cosmwasm.wasm.v1beta1.MsgClearAdminResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.MsgClearAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IMsgClearAdminResponse} m MsgClearAdminResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgClearAdminResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgClearAdminResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.MsgClearAdminResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.MsgClearAdminResponse} MsgClearAdminResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgClearAdminResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.MsgClearAdminResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgClearAdminResponse;
            })();

            /**
             * AccessType enum.
             * @name cosmwasm.wasm.v1beta1.AccessType
             * @enum {number}
             * @property {number} ACCESS_TYPE_UNSPECIFIED=0 ACCESS_TYPE_UNSPECIFIED value
             * @property {number} ACCESS_TYPE_NOBODY=1 ACCESS_TYPE_NOBODY value
             * @property {number} ACCESS_TYPE_ONLY_ADDRESS=2 ACCESS_TYPE_ONLY_ADDRESS value
             * @property {number} ACCESS_TYPE_EVERYBODY=3 ACCESS_TYPE_EVERYBODY value
             */
            v1beta1.AccessType = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ACCESS_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "ACCESS_TYPE_NOBODY"] = 1;
                values[valuesById[2] = "ACCESS_TYPE_ONLY_ADDRESS"] = 2;
                values[valuesById[3] = "ACCESS_TYPE_EVERYBODY"] = 3;
                return values;
            })();

            v1beta1.AccessTypeParam = (function () {

                /**
                 * Properties of an AccessTypeParam.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IAccessTypeParam
                 * @property {cosmwasm.wasm.v1beta1.AccessType|null} [value] AccessTypeParam value
                 */

                /**
                 * Constructs a new AccessTypeParam.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents an AccessTypeParam.
                 * @implements IAccessTypeParam
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IAccessTypeParam=} [p] Properties to set
                 */
                function AccessTypeParam(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AccessTypeParam value.
                 * @member {cosmwasm.wasm.v1beta1.AccessType} value
                 * @memberof cosmwasm.wasm.v1beta1.AccessTypeParam
                 * @instance
                 */
                AccessTypeParam.prototype.value = 0;

                /**
                 * Encodes the specified AccessTypeParam message. Does not implicitly {@link cosmwasm.wasm.v1beta1.AccessTypeParam.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.AccessTypeParam
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IAccessTypeParam} m AccessTypeParam message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessTypeParam.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(8).int32(m.value);
                    return w;
                };

                /**
                 * Decodes an AccessTypeParam message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.AccessTypeParam
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.AccessTypeParam} AccessTypeParam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessTypeParam.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.AccessTypeParam();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.value = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return AccessTypeParam;
            })();

            v1beta1.AccessConfig = (function () {

                /**
                 * Properties of an AccessConfig.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IAccessConfig
                 * @property {cosmwasm.wasm.v1beta1.AccessType|null} [permission] AccessConfig permission
                 * @property {string|null} [address] AccessConfig address
                 */

                /**
                 * Constructs a new AccessConfig.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents an AccessConfig.
                 * @implements IAccessConfig
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IAccessConfig=} [p] Properties to set
                 */
                function AccessConfig(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AccessConfig permission.
                 * @member {cosmwasm.wasm.v1beta1.AccessType} permission
                 * @memberof cosmwasm.wasm.v1beta1.AccessConfig
                 * @instance
                 */
                AccessConfig.prototype.permission = 0;

                /**
                 * AccessConfig address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1beta1.AccessConfig
                 * @instance
                 */
                AccessConfig.prototype.address = "";

                /**
                 * Encodes the specified AccessConfig message. Does not implicitly {@link cosmwasm.wasm.v1beta1.AccessConfig.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.AccessConfig
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IAccessConfig} m AccessConfig message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessConfig.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.permission != null && Object.hasOwnProperty.call(m, "permission"))
                        w.uint32(8).int32(m.permission);
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(18).string(m.address);
                    return w;
                };

                /**
                 * Decodes an AccessConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.AccessConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.AccessConfig} AccessConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessConfig.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.AccessConfig();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.permission = r.int32();
                                break;
                            case 2:
                                m.address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return AccessConfig;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IParams
                 * @property {cosmwasm.wasm.v1beta1.IAccessConfig|null} [code_upload_access] Params code_upload_access
                 * @property {cosmwasm.wasm.v1beta1.AccessType|null} [instantiate_default_permission] Params instantiate_default_permission
                 * @property {Long|null} [max_wasm_code_size] Params max_wasm_code_size
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params code_upload_access.
                 * @member {cosmwasm.wasm.v1beta1.IAccessConfig|null|undefined} code_upload_access
                 * @memberof cosmwasm.wasm.v1beta1.Params
                 * @instance
                 */
                Params.prototype.code_upload_access = null;

                /**
                 * Params instantiate_default_permission.
                 * @member {cosmwasm.wasm.v1beta1.AccessType} instantiate_default_permission
                 * @memberof cosmwasm.wasm.v1beta1.Params
                 * @instance
                 */
                Params.prototype.instantiate_default_permission = 0;

                /**
                 * Params max_wasm_code_size.
                 * @member {Long} max_wasm_code_size
                 * @memberof cosmwasm.wasm.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_wasm_code_size = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmwasm.wasm.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.Params
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_upload_access != null && Object.hasOwnProperty.call(m, "code_upload_access"))
                        $root.cosmwasm.wasm.v1beta1.AccessConfig.encode(m.code_upload_access, w.uint32(10).fork()).ldelim();
                    if (m.instantiate_default_permission != null && Object.hasOwnProperty.call(m, "instantiate_default_permission"))
                        w.uint32(16).int32(m.instantiate_default_permission);
                    if (m.max_wasm_code_size != null && Object.hasOwnProperty.call(m, "max_wasm_code_size"))
                        w.uint32(24).uint64(m.max_wasm_code_size);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_upload_access = $root.cosmwasm.wasm.v1beta1.AccessConfig.decode(r, r.uint32());
                                break;
                            case 2:
                                m.instantiate_default_permission = r.int32();
                                break;
                            case 3:
                                m.max_wasm_code_size = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            v1beta1.CodeInfo = (function () {

                /**
                 * Properties of a CodeInfo.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface ICodeInfo
                 * @property {Uint8Array|null} [code_hash] CodeInfo code_hash
                 * @property {string|null} [creator] CodeInfo creator
                 * @property {string|null} [source] CodeInfo source
                 * @property {string|null} [builder] CodeInfo builder
                 * @property {cosmwasm.wasm.v1beta1.IAccessConfig|null} [instantiate_config] CodeInfo instantiate_config
                 */

                /**
                 * Constructs a new CodeInfo.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a CodeInfo.
                 * @implements ICodeInfo
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.ICodeInfo=} [p] Properties to set
                 */
                function CodeInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CodeInfo code_hash.
                 * @member {Uint8Array} code_hash
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.code_hash = $util.newBuffer([]);

                /**
                 * CodeInfo creator.
                 * @member {string} creator
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.creator = "";

                /**
                 * CodeInfo source.
                 * @member {string} source
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.source = "";

                /**
                 * CodeInfo builder.
                 * @member {string} builder
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.builder = "";

                /**
                 * CodeInfo instantiate_config.
                 * @member {cosmwasm.wasm.v1beta1.IAccessConfig|null|undefined} instantiate_config
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.instantiate_config = null;

                /**
                 * Encodes the specified CodeInfo message. Does not implicitly {@link cosmwasm.wasm.v1beta1.CodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.ICodeInfo} m CodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CodeInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_hash != null && Object.hasOwnProperty.call(m, "code_hash"))
                        w.uint32(10).bytes(m.code_hash);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(18).string(m.creator);
                    if (m.source != null && Object.hasOwnProperty.call(m, "source"))
                        w.uint32(26).string(m.source);
                    if (m.builder != null && Object.hasOwnProperty.call(m, "builder"))
                        w.uint32(34).string(m.builder);
                    if (m.instantiate_config != null && Object.hasOwnProperty.call(m, "instantiate_config"))
                        $root.cosmwasm.wasm.v1beta1.AccessConfig.encode(m.instantiate_config, w.uint32(42).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a CodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.CodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.CodeInfo} CodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CodeInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.CodeInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_hash = r.bytes();
                                break;
                            case 2:
                                m.creator = r.string();
                                break;
                            case 3:
                                m.source = r.string();
                                break;
                            case 4:
                                m.builder = r.string();
                                break;
                            case 5:
                                m.instantiate_config = $root.cosmwasm.wasm.v1beta1.AccessConfig.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CodeInfo;
            })();

            v1beta1.ContractInfo = (function () {

                /**
                 * Properties of a ContractInfo.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IContractInfo
                 * @property {Long|null} [code_id] ContractInfo code_id
                 * @property {string|null} [creator] ContractInfo creator
                 * @property {string|null} [admin] ContractInfo admin
                 * @property {string|null} [label] ContractInfo label
                 * @property {cosmwasm.wasm.v1beta1.IAbsoluteTxPosition|null} [created] ContractInfo created
                 */

                /**
                 * Constructs a new ContractInfo.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a ContractInfo.
                 * @implements IContractInfo
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IContractInfo=} [p] Properties to set
                 */
                function ContractInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ContractInfo code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * ContractInfo creator.
                 * @member {string} creator
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.creator = "";

                /**
                 * ContractInfo admin.
                 * @member {string} admin
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.admin = "";

                /**
                 * ContractInfo label.
                 * @member {string} label
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.label = "";

                /**
                 * ContractInfo created.
                 * @member {cosmwasm.wasm.v1beta1.IAbsoluteTxPosition|null|undefined} created
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.created = null;

                /**
                 * Encodes the specified ContractInfo message. Does not implicitly {@link cosmwasm.wasm.v1beta1.ContractInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IContractInfo} m ContractInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(8).uint64(m.code_id);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(18).string(m.creator);
                    if (m.admin != null && Object.hasOwnProperty.call(m, "admin"))
                        w.uint32(26).string(m.admin);
                    if (m.label != null && Object.hasOwnProperty.call(m, "label"))
                        w.uint32(34).string(m.label);
                    if (m.created != null && Object.hasOwnProperty.call(m, "created"))
                        $root.cosmwasm.wasm.v1beta1.AbsoluteTxPosition.encode(m.created, w.uint32(42).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ContractInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.ContractInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.ContractInfo} ContractInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.ContractInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.code_id = r.uint64();
                                break;
                            case 2:
                                m.creator = r.string();
                                break;
                            case 3:
                                m.admin = r.string();
                                break;
                            case 4:
                                m.label = r.string();
                                break;
                            case 5:
                                m.created = $root.cosmwasm.wasm.v1beta1.AbsoluteTxPosition.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ContractInfo;
            })();

            /**
             * ContractCodeHistoryOperationType enum.
             * @name cosmwasm.wasm.v1beta1.ContractCodeHistoryOperationType
             * @enum {number}
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED=0 CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED value
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT=1 CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT value
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE=2 CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE value
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS=3 CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS value
             */
            v1beta1.ContractCodeHistoryOperationType = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT"] = 1;
                values[valuesById[2] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE"] = 2;
                values[valuesById[3] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS"] = 3;
                return values;
            })();

            v1beta1.ContractCodeHistoryEntry = (function () {

                /**
                 * Properties of a ContractCodeHistoryEntry.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IContractCodeHistoryEntry
                 * @property {cosmwasm.wasm.v1beta1.ContractCodeHistoryOperationType|null} [operation] ContractCodeHistoryEntry operation
                 * @property {Long|null} [code_id] ContractCodeHistoryEntry code_id
                 * @property {cosmwasm.wasm.v1beta1.IAbsoluteTxPosition|null} [updated] ContractCodeHistoryEntry updated
                 * @property {Uint8Array|null} [msg] ContractCodeHistoryEntry msg
                 */

                /**
                 * Constructs a new ContractCodeHistoryEntry.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a ContractCodeHistoryEntry.
                 * @implements IContractCodeHistoryEntry
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IContractCodeHistoryEntry=} [p] Properties to set
                 */
                function ContractCodeHistoryEntry(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ContractCodeHistoryEntry operation.
                 * @member {cosmwasm.wasm.v1beta1.ContractCodeHistoryOperationType} operation
                 * @memberof cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.operation = 0;

                /**
                 * ContractCodeHistoryEntry code_id.
                 * @member {Long} code_id
                 * @memberof cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.code_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * ContractCodeHistoryEntry updated.
                 * @member {cosmwasm.wasm.v1beta1.IAbsoluteTxPosition|null|undefined} updated
                 * @memberof cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.updated = null;

                /**
                 * ContractCodeHistoryEntry msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.msg = $util.newBuffer([]);

                /**
                 * Encodes the specified ContractCodeHistoryEntry message. Does not implicitly {@link cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IContractCodeHistoryEntry} m ContractCodeHistoryEntry message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractCodeHistoryEntry.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.operation != null && Object.hasOwnProperty.call(m, "operation"))
                        w.uint32(8).int32(m.operation);
                    if (m.code_id != null && Object.hasOwnProperty.call(m, "code_id"))
                        w.uint32(16).uint64(m.code_id);
                    if (m.updated != null && Object.hasOwnProperty.call(m, "updated"))
                        $root.cosmwasm.wasm.v1beta1.AbsoluteTxPosition.encode(m.updated, w.uint32(26).fork()).ldelim();
                    if (m.msg != null && Object.hasOwnProperty.call(m, "msg"))
                        w.uint32(34).bytes(m.msg);
                    return w;
                };

                /**
                 * Decodes a ContractCodeHistoryEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry} ContractCodeHistoryEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractCodeHistoryEntry.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.operation = r.int32();
                                break;
                            case 2:
                                m.code_id = r.uint64();
                                break;
                            case 3:
                                m.updated = $root.cosmwasm.wasm.v1beta1.AbsoluteTxPosition.decode(r, r.uint32());
                                break;
                            case 4:
                                m.msg = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ContractCodeHistoryEntry;
            })();

            v1beta1.AbsoluteTxPosition = (function () {

                /**
                 * Properties of an AbsoluteTxPosition.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IAbsoluteTxPosition
                 * @property {Long|null} [block_height] AbsoluteTxPosition block_height
                 * @property {Long|null} [tx_index] AbsoluteTxPosition tx_index
                 */

                /**
                 * Constructs a new AbsoluteTxPosition.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents an AbsoluteTxPosition.
                 * @implements IAbsoluteTxPosition
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IAbsoluteTxPosition=} [p] Properties to set
                 */
                function AbsoluteTxPosition(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AbsoluteTxPosition block_height.
                 * @member {Long} block_height
                 * @memberof cosmwasm.wasm.v1beta1.AbsoluteTxPosition
                 * @instance
                 */
                AbsoluteTxPosition.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * AbsoluteTxPosition tx_index.
                 * @member {Long} tx_index
                 * @memberof cosmwasm.wasm.v1beta1.AbsoluteTxPosition
                 * @instance
                 */
                AbsoluteTxPosition.prototype.tx_index = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified AbsoluteTxPosition message. Does not implicitly {@link cosmwasm.wasm.v1beta1.AbsoluteTxPosition.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.AbsoluteTxPosition
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IAbsoluteTxPosition} m AbsoluteTxPosition message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AbsoluteTxPosition.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                        w.uint32(8).uint64(m.block_height);
                    if (m.tx_index != null && Object.hasOwnProperty.call(m, "tx_index"))
                        w.uint32(16).uint64(m.tx_index);
                    return w;
                };

                /**
                 * Decodes an AbsoluteTxPosition message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.AbsoluteTxPosition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.AbsoluteTxPosition} AbsoluteTxPosition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AbsoluteTxPosition.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.AbsoluteTxPosition();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.block_height = r.uint64();
                                break;
                            case 2:
                                m.tx_index = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return AbsoluteTxPosition;
            })();

            v1beta1.Model = (function () {

                /**
                 * Properties of a Model.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @interface IModel
                 * @property {Uint8Array|null} [key] Model key
                 * @property {Uint8Array|null} [value] Model value
                 */

                /**
                 * Constructs a new Model.
                 * @memberof cosmwasm.wasm.v1beta1
                 * @classdesc Represents a Model.
                 * @implements IModel
                 * @constructor
                 * @param {cosmwasm.wasm.v1beta1.IModel=} [p] Properties to set
                 */
                function Model(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Model key.
                 * @member {Uint8Array} key
                 * @memberof cosmwasm.wasm.v1beta1.Model
                 * @instance
                 */
                Model.prototype.key = $util.newBuffer([]);

                /**
                 * Model value.
                 * @member {Uint8Array} value
                 * @memberof cosmwasm.wasm.v1beta1.Model
                 * @instance
                 */
                Model.prototype.value = $util.newBuffer([]);

                /**
                 * Encodes the specified Model message. Does not implicitly {@link cosmwasm.wasm.v1beta1.Model.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1beta1.Model
                 * @static
                 * @param {cosmwasm.wasm.v1beta1.IModel} m Model message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Model.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(10).bytes(m.key);
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(18).bytes(m.value);
                    return w;
                };

                /**
                 * Decodes a Model message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1beta1.Model
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1beta1.Model} Model
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Model.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmwasm.wasm.v1beta1.Model();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.key = r.bytes();
                                break;
                            case 2:
                                m.value = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Model;
            })();

            return v1beta1;
        })();

        return wasm;
    })();

    return cosmwasm;
})();

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.auth = (function () {

        /**
         * Namespace auth.
         * @memberof cosmos
         * @namespace
         */
        const auth = {};

        auth.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.auth
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryAccountRequest = (function () {

                /**
                 * Properties of a QueryAccountRequest.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IQueryAccountRequest
                 * @property {string|null} [address] QueryAccountRequest address
                 */

                /**
                 * Constructs a new QueryAccountRequest.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a QueryAccountRequest.
                 * @implements IQueryAccountRequest
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IQueryAccountRequest=} [p] Properties to set
                 */
                function QueryAccountRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAccountRequest address.
                 * @member {string} address
                 * @memberof cosmos.auth.v1beta1.QueryAccountRequest
                 * @instance
                 */
                QueryAccountRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryAccountRequest message. Does not implicitly {@link cosmos.auth.v1beta1.QueryAccountRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.QueryAccountRequest
                 * @static
                 * @param {cosmos.auth.v1beta1.IQueryAccountRequest} m QueryAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAccountRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    return w;
                };

                /**
                 * Decodes a QueryAccountRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.QueryAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.QueryAccountRequest} QueryAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAccountRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.QueryAccountRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAccountRequest;
            })();

            v1beta1.QueryAccountResponse = (function () {

                /**
                 * Properties of a QueryAccountResponse.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IQueryAccountResponse
                 * @property {google.protobuf.IAny|null} [account] QueryAccountResponse account
                 */

                /**
                 * Constructs a new QueryAccountResponse.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a QueryAccountResponse.
                 * @implements IQueryAccountResponse
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IQueryAccountResponse=} [p] Properties to set
                 */
                function QueryAccountResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAccountResponse account.
                 * @member {google.protobuf.IAny|null|undefined} account
                 * @memberof cosmos.auth.v1beta1.QueryAccountResponse
                 * @instance
                 */
                QueryAccountResponse.prototype.account = null;

                /**
                 * Encodes the specified QueryAccountResponse message. Does not implicitly {@link cosmos.auth.v1beta1.QueryAccountResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.QueryAccountResponse
                 * @static
                 * @param {cosmos.auth.v1beta1.IQueryAccountResponse} m QueryAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAccountResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                        $root.google.protobuf.Any.encode(m.account, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAccountResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.QueryAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.QueryAccountResponse} QueryAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAccountResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.QueryAccountResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.account = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAccountResponse;
            })();

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.auth.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.auth.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.auth.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {cosmos.auth.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.auth.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.auth.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.auth.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.auth.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.auth.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.auth.v1beta1.IParams|null} [params] GenesisState params
                 * @property {Array.<google.protobuf.IAny>|null} [accounts] GenesisState accounts
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.accounts = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmos.auth.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.auth.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState accounts.
                 * @member {Array.<google.protobuf.IAny>} accounts
                 * @memberof cosmos.auth.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.accounts = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.auth.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.auth.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.auth.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    if (m.accounts != null && m.accounts.length) {
                        for (var i = 0; i < m.accounts.length; ++i)
                            $root.google.protobuf.Any.encode(m.accounts[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.auth.v1beta1.Params.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.accounts && m.accounts.length))
                                    m.accounts = [];
                                m.accounts.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.BaseAccount = (function () {

                /**
                 * Properties of a BaseAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IBaseAccount
                 * @property {string|null} [address] BaseAccount address
                 * @property {google.protobuf.IAny|null} [pub_key] BaseAccount pub_key
                 * @property {Long|null} [account_number] BaseAccount account_number
                 * @property {Long|null} [sequence] BaseAccount sequence
                 */

                /**
                 * Constructs a new BaseAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a BaseAccount.
                 * @implements IBaseAccount
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IBaseAccount=} [p] Properties to set
                 */
                function BaseAccount(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BaseAccount address.
                 * @member {string} address
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.address = "";

                /**
                 * BaseAccount pub_key.
                 * @member {google.protobuf.IAny|null|undefined} pub_key
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.pub_key = null;

                /**
                 * BaseAccount account_number.
                 * @member {Long} account_number
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.account_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * BaseAccount sequence.
                 * @member {Long} sequence
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified BaseAccount message. Does not implicitly {@link cosmos.auth.v1beta1.BaseAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.IBaseAccount} m BaseAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BaseAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.pub_key != null && Object.hasOwnProperty.call(m, "pub_key"))
                        $root.google.protobuf.Any.encode(m.pub_key, w.uint32(18).fork()).ldelim();
                    if (m.account_number != null && Object.hasOwnProperty.call(m, "account_number"))
                        w.uint32(24).uint64(m.account_number);
                    if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                        w.uint32(32).uint64(m.sequence);
                    return w;
                };

                /**
                 * Decodes a BaseAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.BaseAccount} BaseAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BaseAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.BaseAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.pub_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            case 3:
                                m.account_number = r.uint64();
                                break;
                            case 4:
                                m.sequence = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BaseAccount;
            })();

            v1beta1.ModuleAccount = (function () {

                /**
                 * Properties of a ModuleAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IModuleAccount
                 * @property {cosmos.auth.v1beta1.IBaseAccount|null} [base_account] ModuleAccount base_account
                 * @property {string|null} [name] ModuleAccount name
                 * @property {Array.<string>|null} [permissions] ModuleAccount permissions
                 */

                /**
                 * Constructs a new ModuleAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a ModuleAccount.
                 * @implements IModuleAccount
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IModuleAccount=} [p] Properties to set
                 */
                function ModuleAccount(p) {
                    this.permissions = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ModuleAccount base_account.
                 * @member {cosmos.auth.v1beta1.IBaseAccount|null|undefined} base_account
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 */
                ModuleAccount.prototype.base_account = null;

                /**
                 * ModuleAccount name.
                 * @member {string} name
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 */
                ModuleAccount.prototype.name = "";

                /**
                 * ModuleAccount permissions.
                 * @member {Array.<string>} permissions
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 */
                ModuleAccount.prototype.permissions = $util.emptyArray;

                /**
                 * Encodes the specified ModuleAccount message. Does not implicitly {@link cosmos.auth.v1beta1.ModuleAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.IModuleAccount} m ModuleAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ModuleAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_account != null && Object.hasOwnProperty.call(m, "base_account"))
                        $root.cosmos.auth.v1beta1.BaseAccount.encode(m.base_account, w.uint32(10).fork()).ldelim();
                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                        w.uint32(18).string(m.name);
                    if (m.permissions != null && m.permissions.length) {
                        for (var i = 0; i < m.permissions.length; ++i)
                            w.uint32(26).string(m.permissions[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a ModuleAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.ModuleAccount} ModuleAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ModuleAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.ModuleAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_account = $root.cosmos.auth.v1beta1.BaseAccount.decode(r, r.uint32());
                                break;
                            case 2:
                                m.name = r.string();
                                break;
                            case 3:
                                if (!(m.permissions && m.permissions.length))
                                    m.permissions = [];
                                m.permissions.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ModuleAccount;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IParams
                 * @property {Long|null} [max_memo_characters] Params max_memo_characters
                 * @property {Long|null} [tx_sig_limit] Params tx_sig_limit
                 * @property {Long|null} [tx_size_cost_per_byte] Params tx_size_cost_per_byte
                 * @property {Long|null} [sig_verify_cost_ed25519] Params sig_verify_cost_ed25519
                 * @property {Long|null} [sig_verify_cost_secp256k1] Params sig_verify_cost_secp256k1
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params max_memo_characters.
                 * @member {Long} max_memo_characters
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_memo_characters = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params tx_sig_limit.
                 * @member {Long} tx_sig_limit
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.tx_sig_limit = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params tx_size_cost_per_byte.
                 * @member {Long} tx_size_cost_per_byte
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.tx_size_cost_per_byte = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params sig_verify_cost_ed25519.
                 * @member {Long} sig_verify_cost_ed25519
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.sig_verify_cost_ed25519 = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params sig_verify_cost_secp256k1.
                 * @member {Long} sig_verify_cost_secp256k1
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.sig_verify_cost_secp256k1 = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.auth.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {cosmos.auth.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.max_memo_characters != null && Object.hasOwnProperty.call(m, "max_memo_characters"))
                        w.uint32(8).uint64(m.max_memo_characters);
                    if (m.tx_sig_limit != null && Object.hasOwnProperty.call(m, "tx_sig_limit"))
                        w.uint32(16).uint64(m.tx_sig_limit);
                    if (m.tx_size_cost_per_byte != null && Object.hasOwnProperty.call(m, "tx_size_cost_per_byte"))
                        w.uint32(24).uint64(m.tx_size_cost_per_byte);
                    if (m.sig_verify_cost_ed25519 != null && Object.hasOwnProperty.call(m, "sig_verify_cost_ed25519"))
                        w.uint32(32).uint64(m.sig_verify_cost_ed25519);
                    if (m.sig_verify_cost_secp256k1 != null && Object.hasOwnProperty.call(m, "sig_verify_cost_secp256k1"))
                        w.uint32(40).uint64(m.sig_verify_cost_secp256k1);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.auth.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.max_memo_characters = r.uint64();
                                break;
                            case 2:
                                m.tx_sig_limit = r.uint64();
                                break;
                            case 3:
                                m.tx_size_cost_per_byte = r.uint64();
                                break;
                            case 4:
                                m.sig_verify_cost_ed25519 = r.uint64();
                                break;
                            case 5:
                                m.sig_verify_cost_secp256k1 = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            return v1beta1;
        })();

        return auth;
    })();

    cosmos.bank = (function () {

        /**
         * Namespace bank.
         * @memberof cosmos
         * @namespace
         */
        const bank = {};

        bank.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.bank
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryBalanceRequest = (function () {

                /**
                 * Properties of a QueryBalanceRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryBalanceRequest
                 * @property {string|null} [address] QueryBalanceRequest address
                 * @property {string|null} [denom] QueryBalanceRequest denom
                 */

                /**
                 * Constructs a new QueryBalanceRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryBalanceRequest.
                 * @implements IQueryBalanceRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryBalanceRequest=} [p] Properties to set
                 */
                function QueryBalanceRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryBalanceRequest address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.QueryBalanceRequest
                 * @instance
                 */
                QueryBalanceRequest.prototype.address = "";

                /**
                 * QueryBalanceRequest denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.QueryBalanceRequest
                 * @instance
                 */
                QueryBalanceRequest.prototype.denom = "";

                /**
                 * Encodes the specified QueryBalanceRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QueryBalanceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryBalanceRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryBalanceRequest} m QueryBalanceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBalanceRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(18).string(m.denom);
                    return w;
                };

                /**
                 * Decodes a QueryBalanceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryBalanceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryBalanceRequest} QueryBalanceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBalanceRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryBalanceRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.denom = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryBalanceRequest;
            })();

            v1beta1.QueryBalanceResponse = (function () {

                /**
                 * Properties of a QueryBalanceResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryBalanceResponse
                 * @property {cosmos.base.v1beta1.ICoin|null} [balance] QueryBalanceResponse balance
                 */

                /**
                 * Constructs a new QueryBalanceResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryBalanceResponse.
                 * @implements IQueryBalanceResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryBalanceResponse=} [p] Properties to set
                 */
                function QueryBalanceResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryBalanceResponse balance.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} balance
                 * @memberof cosmos.bank.v1beta1.QueryBalanceResponse
                 * @instance
                 */
                QueryBalanceResponse.prototype.balance = null;

                /**
                 * Encodes the specified QueryBalanceResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QueryBalanceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryBalanceResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryBalanceResponse} m QueryBalanceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBalanceResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.balance, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryBalanceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryBalanceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryBalanceResponse} QueryBalanceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBalanceResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryBalanceResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.balance = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryBalanceResponse;
            })();

            v1beta1.QueryAllBalancesRequest = (function () {

                /**
                 * Properties of a QueryAllBalancesRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryAllBalancesRequest
                 * @property {string|null} [address] QueryAllBalancesRequest address
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryAllBalancesRequest pagination
                 */

                /**
                 * Constructs a new QueryAllBalancesRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryAllBalancesRequest.
                 * @implements IQueryAllBalancesRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryAllBalancesRequest=} [p] Properties to set
                 */
                function QueryAllBalancesRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAllBalancesRequest address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesRequest
                 * @instance
                 */
                QueryAllBalancesRequest.prototype.address = "";

                /**
                 * QueryAllBalancesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesRequest
                 * @instance
                 */
                QueryAllBalancesRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllBalancesRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QueryAllBalancesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryAllBalancesRequest} m QueryAllBalancesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllBalancesRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAllBalancesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryAllBalancesRequest} QueryAllBalancesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllBalancesRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryAllBalancesRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAllBalancesRequest;
            })();

            v1beta1.QueryAllBalancesResponse = (function () {

                /**
                 * Properties of a QueryAllBalancesResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryAllBalancesResponse
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [balances] QueryAllBalancesResponse balances
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryAllBalancesResponse pagination
                 */

                /**
                 * Constructs a new QueryAllBalancesResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryAllBalancesResponse.
                 * @implements IQueryAllBalancesResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryAllBalancesResponse=} [p] Properties to set
                 */
                function QueryAllBalancesResponse(p) {
                    this.balances = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAllBalancesResponse balances.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} balances
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesResponse
                 * @instance
                 */
                QueryAllBalancesResponse.prototype.balances = $util.emptyArray;

                /**
                 * QueryAllBalancesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesResponse
                 * @instance
                 */
                QueryAllBalancesResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllBalancesResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QueryAllBalancesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryAllBalancesResponse} m QueryAllBalancesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllBalancesResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.balances != null && m.balances.length) {
                        for (var i = 0; i < m.balances.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.balances[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAllBalancesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryAllBalancesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryAllBalancesResponse} QueryAllBalancesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllBalancesResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryAllBalancesResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.balances && m.balances.length))
                                    m.balances = [];
                                m.balances.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAllBalancesResponse;
            })();

            v1beta1.QueryTotalSupplyRequest = (function () {

                /**
                 * Properties of a QueryTotalSupplyRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryTotalSupplyRequest
                 */

                /**
                 * Constructs a new QueryTotalSupplyRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryTotalSupplyRequest.
                 * @implements IQueryTotalSupplyRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryTotalSupplyRequest=} [p] Properties to set
                 */
                function QueryTotalSupplyRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryTotalSupplyRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QueryTotalSupplyRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryTotalSupplyRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryTotalSupplyRequest} m QueryTotalSupplyRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTotalSupplyRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryTotalSupplyRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryTotalSupplyRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryTotalSupplyRequest} QueryTotalSupplyRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTotalSupplyRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryTotalSupplyRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTotalSupplyRequest;
            })();

            v1beta1.QueryTotalSupplyResponse = (function () {

                /**
                 * Properties of a QueryTotalSupplyResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryTotalSupplyResponse
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [supply] QueryTotalSupplyResponse supply
                 */

                /**
                 * Constructs a new QueryTotalSupplyResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryTotalSupplyResponse.
                 * @implements IQueryTotalSupplyResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryTotalSupplyResponse=} [p] Properties to set
                 */
                function QueryTotalSupplyResponse(p) {
                    this.supply = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTotalSupplyResponse supply.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} supply
                 * @memberof cosmos.bank.v1beta1.QueryTotalSupplyResponse
                 * @instance
                 */
                QueryTotalSupplyResponse.prototype.supply = $util.emptyArray;

                /**
                 * Encodes the specified QueryTotalSupplyResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QueryTotalSupplyResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryTotalSupplyResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryTotalSupplyResponse} m QueryTotalSupplyResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTotalSupplyResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.supply != null && m.supply.length) {
                        for (var i = 0; i < m.supply.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.supply[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a QueryTotalSupplyResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryTotalSupplyResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryTotalSupplyResponse} QueryTotalSupplyResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTotalSupplyResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryTotalSupplyResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.supply && m.supply.length))
                                    m.supply = [];
                                m.supply.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTotalSupplyResponse;
            })();

            v1beta1.QuerySupplyOfRequest = (function () {

                /**
                 * Properties of a QuerySupplyOfRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQuerySupplyOfRequest
                 * @property {string|null} [denom] QuerySupplyOfRequest denom
                 */

                /**
                 * Constructs a new QuerySupplyOfRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QuerySupplyOfRequest.
                 * @implements IQuerySupplyOfRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQuerySupplyOfRequest=} [p] Properties to set
                 */
                function QuerySupplyOfRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySupplyOfRequest denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.QuerySupplyOfRequest
                 * @instance
                 */
                QuerySupplyOfRequest.prototype.denom = "";

                /**
                 * Encodes the specified QuerySupplyOfRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QuerySupplyOfRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QuerySupplyOfRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQuerySupplyOfRequest} m QuerySupplyOfRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySupplyOfRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(10).string(m.denom);
                    return w;
                };

                /**
                 * Decodes a QuerySupplyOfRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QuerySupplyOfRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QuerySupplyOfRequest} QuerySupplyOfRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySupplyOfRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QuerySupplyOfRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.denom = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySupplyOfRequest;
            })();

            v1beta1.QuerySupplyOfResponse = (function () {

                /**
                 * Properties of a QuerySupplyOfResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQuerySupplyOfResponse
                 * @property {cosmos.base.v1beta1.ICoin|null} [amount] QuerySupplyOfResponse amount
                 */

                /**
                 * Constructs a new QuerySupplyOfResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QuerySupplyOfResponse.
                 * @implements IQuerySupplyOfResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQuerySupplyOfResponse=} [p] Properties to set
                 */
                function QuerySupplyOfResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySupplyOfResponse amount.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                 * @memberof cosmos.bank.v1beta1.QuerySupplyOfResponse
                 * @instance
                 */
                QuerySupplyOfResponse.prototype.amount = null;

                /**
                 * Encodes the specified QuerySupplyOfResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QuerySupplyOfResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QuerySupplyOfResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQuerySupplyOfResponse} m QuerySupplyOfResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySupplyOfResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.amount, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QuerySupplyOfResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QuerySupplyOfResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QuerySupplyOfResponse} QuerySupplyOfResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySupplyOfResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QuerySupplyOfResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.amount = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySupplyOfResponse;
            })();

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.bank.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {cosmos.bank.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.bank.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.bank.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.bank.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.QueryDenomsMetadataRequest = (function () {

                /**
                 * Properties of a QueryDenomsMetadataRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryDenomsMetadataRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDenomsMetadataRequest pagination
                 */

                /**
                 * Constructs a new QueryDenomsMetadataRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryDenomsMetadataRequest.
                 * @implements IQueryDenomsMetadataRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryDenomsMetadataRequest=} [p] Properties to set
                 */
                function QueryDenomsMetadataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDenomsMetadataRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataRequest
                 * @instance
                 */
                QueryDenomsMetadataRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDenomsMetadataRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QueryDenomsMetadataRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryDenomsMetadataRequest} m QueryDenomsMetadataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDenomsMetadataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDenomsMetadataRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryDenomsMetadataRequest} QueryDenomsMetadataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDenomsMetadataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryDenomsMetadataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDenomsMetadataRequest;
            })();

            v1beta1.QueryDenomsMetadataResponse = (function () {

                /**
                 * Properties of a QueryDenomsMetadataResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryDenomsMetadataResponse
                 * @property {Array.<cosmos.bank.v1beta1.IMetadata>|null} [metadatas] QueryDenomsMetadataResponse metadatas
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDenomsMetadataResponse pagination
                 */

                /**
                 * Constructs a new QueryDenomsMetadataResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryDenomsMetadataResponse.
                 * @implements IQueryDenomsMetadataResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryDenomsMetadataResponse=} [p] Properties to set
                 */
                function QueryDenomsMetadataResponse(p) {
                    this.metadatas = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDenomsMetadataResponse metadatas.
                 * @member {Array.<cosmos.bank.v1beta1.IMetadata>} metadatas
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataResponse
                 * @instance
                 */
                QueryDenomsMetadataResponse.prototype.metadatas = $util.emptyArray;

                /**
                 * QueryDenomsMetadataResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataResponse
                 * @instance
                 */
                QueryDenomsMetadataResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDenomsMetadataResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QueryDenomsMetadataResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryDenomsMetadataResponse} m QueryDenomsMetadataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDenomsMetadataResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.metadatas != null && m.metadatas.length) {
                        for (var i = 0; i < m.metadatas.length; ++i)
                            $root.cosmos.bank.v1beta1.Metadata.encode(m.metadatas[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDenomsMetadataResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryDenomsMetadataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryDenomsMetadataResponse} QueryDenomsMetadataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDenomsMetadataResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryDenomsMetadataResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.metadatas && m.metadatas.length))
                                    m.metadatas = [];
                                m.metadatas.push($root.cosmos.bank.v1beta1.Metadata.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDenomsMetadataResponse;
            })();

            v1beta1.QueryDenomMetadataRequest = (function () {

                /**
                 * Properties of a QueryDenomMetadataRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryDenomMetadataRequest
                 * @property {string|null} [denom] QueryDenomMetadataRequest denom
                 */

                /**
                 * Constructs a new QueryDenomMetadataRequest.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryDenomMetadataRequest.
                 * @implements IQueryDenomMetadataRequest
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryDenomMetadataRequest=} [p] Properties to set
                 */
                function QueryDenomMetadataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDenomMetadataRequest denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.QueryDenomMetadataRequest
                 * @instance
                 */
                QueryDenomMetadataRequest.prototype.denom = "";

                /**
                 * Encodes the specified QueryDenomMetadataRequest message. Does not implicitly {@link cosmos.bank.v1beta1.QueryDenomMetadataRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryDenomMetadataRequest
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryDenomMetadataRequest} m QueryDenomMetadataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDenomMetadataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(10).string(m.denom);
                    return w;
                };

                /**
                 * Decodes a QueryDenomMetadataRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryDenomMetadataRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryDenomMetadataRequest} QueryDenomMetadataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDenomMetadataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryDenomMetadataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.denom = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDenomMetadataRequest;
            })();

            v1beta1.QueryDenomMetadataResponse = (function () {

                /**
                 * Properties of a QueryDenomMetadataResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IQueryDenomMetadataResponse
                 * @property {cosmos.bank.v1beta1.IMetadata|null} [metadata] QueryDenomMetadataResponse metadata
                 */

                /**
                 * Constructs a new QueryDenomMetadataResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a QueryDenomMetadataResponse.
                 * @implements IQueryDenomMetadataResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IQueryDenomMetadataResponse=} [p] Properties to set
                 */
                function QueryDenomMetadataResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDenomMetadataResponse metadata.
                 * @member {cosmos.bank.v1beta1.IMetadata|null|undefined} metadata
                 * @memberof cosmos.bank.v1beta1.QueryDenomMetadataResponse
                 * @instance
                 */
                QueryDenomMetadataResponse.prototype.metadata = null;

                /**
                 * Encodes the specified QueryDenomMetadataResponse message. Does not implicitly {@link cosmos.bank.v1beta1.QueryDenomMetadataResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.QueryDenomMetadataResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IQueryDenomMetadataResponse} m QueryDenomMetadataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDenomMetadataResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata"))
                        $root.cosmos.bank.v1beta1.Metadata.encode(m.metadata, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDenomMetadataResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.QueryDenomMetadataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.QueryDenomMetadataResponse} QueryDenomMetadataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDenomMetadataResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.QueryDenomMetadataResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.metadata = $root.cosmos.bank.v1beta1.Metadata.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDenomMetadataResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.bank.v1beta1.IParams|null} [params] GenesisState params
                 * @property {Array.<cosmos.bank.v1beta1.IBalance>|null} [balances] GenesisState balances
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [supply] GenesisState supply
                 * @property {Array.<cosmos.bank.v1beta1.IMetadata>|null} [denom_metadata] GenesisState denom_metadata
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.balances = [];
                    this.supply = [];
                    this.denom_metadata = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmos.bank.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.bank.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState balances.
                 * @member {Array.<cosmos.bank.v1beta1.IBalance>} balances
                 * @memberof cosmos.bank.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.balances = $util.emptyArray;

                /**
                 * GenesisState supply.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} supply
                 * @memberof cosmos.bank.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.supply = $util.emptyArray;

                /**
                 * GenesisState denom_metadata.
                 * @member {Array.<cosmos.bank.v1beta1.IMetadata>} denom_metadata
                 * @memberof cosmos.bank.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.denom_metadata = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.bank.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.bank.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.bank.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    if (m.balances != null && m.balances.length) {
                        for (var i = 0; i < m.balances.length; ++i)
                            $root.cosmos.bank.v1beta1.Balance.encode(m.balances[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.supply != null && m.supply.length) {
                        for (var i = 0; i < m.supply.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.supply[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.denom_metadata != null && m.denom_metadata.length) {
                        for (var i = 0; i < m.denom_metadata.length; ++i)
                            $root.cosmos.bank.v1beta1.Metadata.encode(m.denom_metadata[i], w.uint32(34).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.bank.v1beta1.Params.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.balances && m.balances.length))
                                    m.balances = [];
                                m.balances.push($root.cosmos.bank.v1beta1.Balance.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.supply && m.supply.length))
                                    m.supply = [];
                                m.supply.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 4:
                                if (!(m.denom_metadata && m.denom_metadata.length))
                                    m.denom_metadata = [];
                                m.denom_metadata.push($root.cosmos.bank.v1beta1.Metadata.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.Balance = (function () {

                /**
                 * Properties of a Balance.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IBalance
                 * @property {string|null} [address] Balance address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Balance coins
                 */

                /**
                 * Constructs a new Balance.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Balance.
                 * @implements IBalance
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IBalance=} [p] Properties to set
                 */
                function Balance(p) {
                    this.coins = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Balance address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.Balance
                 * @instance
                 */
                Balance.prototype.address = "";

                /**
                 * Balance coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                 * @memberof cosmos.bank.v1beta1.Balance
                 * @instance
                 */
                Balance.prototype.coins = $util.emptyArray;

                /**
                 * Encodes the specified Balance message. Does not implicitly {@link cosmos.bank.v1beta1.Balance.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Balance
                 * @static
                 * @param {cosmos.bank.v1beta1.IBalance} m Balance message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Balance.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.coins != null && m.coins.length) {
                        for (var i = 0; i < m.coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.coins[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Balance message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Balance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Balance} Balance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Balance.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.Balance();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                if (!(m.coins && m.coins.length))
                                    m.coins = [];
                                m.coins.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Balance;
            })();

            v1beta1.MsgSend = (function () {

                /**
                 * Properties of a MsgSend.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IMsgSend
                 * @property {string|null} [from_address] MsgSend from_address
                 * @property {string|null} [to_address] MsgSend to_address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] MsgSend amount
                 */

                /**
                 * Constructs a new MsgSend.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a MsgSend.
                 * @implements IMsgSend
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IMsgSend=} [p] Properties to set
                 */
                function MsgSend(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSend from_address.
                 * @member {string} from_address
                 * @memberof cosmos.bank.v1beta1.MsgSend
                 * @instance
                 */
                MsgSend.prototype.from_address = "";

                /**
                 * MsgSend to_address.
                 * @member {string} to_address
                 * @memberof cosmos.bank.v1beta1.MsgSend
                 * @instance
                 */
                MsgSend.prototype.to_address = "";

                /**
                 * MsgSend amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.bank.v1beta1.MsgSend
                 * @instance
                 */
                MsgSend.prototype.amount = $util.emptyArray;

                /**
                 * Encodes the specified MsgSend message. Does not implicitly {@link cosmos.bank.v1beta1.MsgSend.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.MsgSend
                 * @static
                 * @param {cosmos.bank.v1beta1.IMsgSend} m MsgSend message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSend.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.from_address != null && Object.hasOwnProperty.call(m, "from_address"))
                        w.uint32(10).string(m.from_address);
                    if (m.to_address != null && Object.hasOwnProperty.call(m, "to_address"))
                        w.uint32(18).string(m.to_address);
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgSend message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.MsgSend
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.MsgSend} MsgSend
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSend.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.MsgSend();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.from_address = r.string();
                                break;
                            case 2:
                                m.to_address = r.string();
                                break;
                            case 3:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSend;
            })();

            v1beta1.MsgSendResponse = (function () {

                /**
                 * Properties of a MsgSendResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IMsgSendResponse
                 */

                /**
                 * Constructs a new MsgSendResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a MsgSendResponse.
                 * @implements IMsgSendResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IMsgSendResponse=} [p] Properties to set
                 */
                function MsgSendResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgSendResponse message. Does not implicitly {@link cosmos.bank.v1beta1.MsgSendResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.MsgSendResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IMsgSendResponse} m MsgSendResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSendResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgSendResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.MsgSendResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.MsgSendResponse} MsgSendResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSendResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.MsgSendResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSendResponse;
            })();

            v1beta1.MsgMultiSend = (function () {

                /**
                 * Properties of a MsgMultiSend.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IMsgMultiSend
                 * @property {Array.<cosmos.bank.v1beta1.IInput>|null} [inputs] MsgMultiSend inputs
                 * @property {Array.<cosmos.bank.v1beta1.IOutput>|null} [outputs] MsgMultiSend outputs
                 */

                /**
                 * Constructs a new MsgMultiSend.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a MsgMultiSend.
                 * @implements IMsgMultiSend
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IMsgMultiSend=} [p] Properties to set
                 */
                function MsgMultiSend(p) {
                    this.inputs = [];
                    this.outputs = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgMultiSend inputs.
                 * @member {Array.<cosmos.bank.v1beta1.IInput>} inputs
                 * @memberof cosmos.bank.v1beta1.MsgMultiSend
                 * @instance
                 */
                MsgMultiSend.prototype.inputs = $util.emptyArray;

                /**
                 * MsgMultiSend outputs.
                 * @member {Array.<cosmos.bank.v1beta1.IOutput>} outputs
                 * @memberof cosmos.bank.v1beta1.MsgMultiSend
                 * @instance
                 */
                MsgMultiSend.prototype.outputs = $util.emptyArray;

                /**
                 * Encodes the specified MsgMultiSend message. Does not implicitly {@link cosmos.bank.v1beta1.MsgMultiSend.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.MsgMultiSend
                 * @static
                 * @param {cosmos.bank.v1beta1.IMsgMultiSend} m MsgMultiSend message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMultiSend.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.inputs != null && m.inputs.length) {
                        for (var i = 0; i < m.inputs.length; ++i)
                            $root.cosmos.bank.v1beta1.Input.encode(m.inputs[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.outputs != null && m.outputs.length) {
                        for (var i = 0; i < m.outputs.length; ++i)
                            $root.cosmos.bank.v1beta1.Output.encode(m.outputs[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgMultiSend message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.MsgMultiSend
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.MsgMultiSend} MsgMultiSend
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMultiSend.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.MsgMultiSend();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.inputs && m.inputs.length))
                                    m.inputs = [];
                                m.inputs.push($root.cosmos.bank.v1beta1.Input.decode(r, r.uint32()));
                                break;
                            case 2:
                                if (!(m.outputs && m.outputs.length))
                                    m.outputs = [];
                                m.outputs.push($root.cosmos.bank.v1beta1.Output.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgMultiSend;
            })();

            v1beta1.MsgMultiSendResponse = (function () {

                /**
                 * Properties of a MsgMultiSendResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IMsgMultiSendResponse
                 */

                /**
                 * Constructs a new MsgMultiSendResponse.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a MsgMultiSendResponse.
                 * @implements IMsgMultiSendResponse
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IMsgMultiSendResponse=} [p] Properties to set
                 */
                function MsgMultiSendResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgMultiSendResponse message. Does not implicitly {@link cosmos.bank.v1beta1.MsgMultiSendResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.MsgMultiSendResponse
                 * @static
                 * @param {cosmos.bank.v1beta1.IMsgMultiSendResponse} m MsgMultiSendResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMultiSendResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgMultiSendResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.MsgMultiSendResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.MsgMultiSendResponse} MsgMultiSendResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMultiSendResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.MsgMultiSendResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgMultiSendResponse;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IParams
                 * @property {Array.<cosmos.bank.v1beta1.ISendEnabled>|null} [send_enabled] Params send_enabled
                 * @property {boolean|null} [default_send_enabled] Params default_send_enabled
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    this.send_enabled = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params send_enabled.
                 * @member {Array.<cosmos.bank.v1beta1.ISendEnabled>} send_enabled
                 * @memberof cosmos.bank.v1beta1.Params
                 * @instance
                 */
                Params.prototype.send_enabled = $util.emptyArray;

                /**
                 * Params default_send_enabled.
                 * @member {boolean} default_send_enabled
                 * @memberof cosmos.bank.v1beta1.Params
                 * @instance
                 */
                Params.prototype.default_send_enabled = false;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.bank.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {cosmos.bank.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.send_enabled != null && m.send_enabled.length) {
                        for (var i = 0; i < m.send_enabled.length; ++i)
                            $root.cosmos.bank.v1beta1.SendEnabled.encode(m.send_enabled[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.default_send_enabled != null && Object.hasOwnProperty.call(m, "default_send_enabled"))
                        w.uint32(16).bool(m.default_send_enabled);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.send_enabled && m.send_enabled.length))
                                    m.send_enabled = [];
                                m.send_enabled.push($root.cosmos.bank.v1beta1.SendEnabled.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.default_send_enabled = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            v1beta1.SendEnabled = (function () {

                /**
                 * Properties of a SendEnabled.
                 * @memberof cosmos.bank.v1beta1
                 * @interface ISendEnabled
                 * @property {string|null} [denom] SendEnabled denom
                 * @property {boolean|null} [enabled] SendEnabled enabled
                 */

                /**
                 * Constructs a new SendEnabled.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a SendEnabled.
                 * @implements ISendEnabled
                 * @constructor
                 * @param {cosmos.bank.v1beta1.ISendEnabled=} [p] Properties to set
                 */
                function SendEnabled(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SendEnabled denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @instance
                 */
                SendEnabled.prototype.denom = "";

                /**
                 * SendEnabled enabled.
                 * @member {boolean} enabled
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @instance
                 */
                SendEnabled.prototype.enabled = false;

                /**
                 * Encodes the specified SendEnabled message. Does not implicitly {@link cosmos.bank.v1beta1.SendEnabled.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {cosmos.bank.v1beta1.ISendEnabled} m SendEnabled message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SendEnabled.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(10).string(m.denom);
                    if (m.enabled != null && Object.hasOwnProperty.call(m, "enabled"))
                        w.uint32(16).bool(m.enabled);
                    return w;
                };

                /**
                 * Decodes a SendEnabled message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SendEnabled.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.SendEnabled();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.denom = r.string();
                                break;
                            case 2:
                                m.enabled = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SendEnabled;
            })();

            v1beta1.Input = (function () {

                /**
                 * Properties of an Input.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IInput
                 * @property {string|null} [address] Input address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Input coins
                 */

                /**
                 * Constructs a new Input.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents an Input.
                 * @implements IInput
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IInput=} [p] Properties to set
                 */
                function Input(p) {
                    this.coins = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Input address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.Input
                 * @instance
                 */
                Input.prototype.address = "";

                /**
                 * Input coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                 * @memberof cosmos.bank.v1beta1.Input
                 * @instance
                 */
                Input.prototype.coins = $util.emptyArray;

                /**
                 * Encodes the specified Input message. Does not implicitly {@link cosmos.bank.v1beta1.Input.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {cosmos.bank.v1beta1.IInput} m Input message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Input.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.coins != null && m.coins.length) {
                        for (var i = 0; i < m.coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.coins[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes an Input message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Input} Input
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Input.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.Input();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                if (!(m.coins && m.coins.length))
                                    m.coins = [];
                                m.coins.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Input;
            })();

            v1beta1.Output = (function () {

                /**
                 * Properties of an Output.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IOutput
                 * @property {string|null} [address] Output address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Output coins
                 */

                /**
                 * Constructs a new Output.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents an Output.
                 * @implements IOutput
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IOutput=} [p] Properties to set
                 */
                function Output(p) {
                    this.coins = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Output address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.Output
                 * @instance
                 */
                Output.prototype.address = "";

                /**
                 * Output coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                 * @memberof cosmos.bank.v1beta1.Output
                 * @instance
                 */
                Output.prototype.coins = $util.emptyArray;

                /**
                 * Encodes the specified Output message. Does not implicitly {@link cosmos.bank.v1beta1.Output.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {cosmos.bank.v1beta1.IOutput} m Output message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Output.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.coins != null && m.coins.length) {
                        for (var i = 0; i < m.coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.coins[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes an Output message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Output} Output
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Output.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.Output();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                if (!(m.coins && m.coins.length))
                                    m.coins = [];
                                m.coins.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Output;
            })();

            v1beta1.Supply = (function () {

                /**
                 * Properties of a Supply.
                 * @memberof cosmos.bank.v1beta1
                 * @interface ISupply
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [total] Supply total
                 */

                /**
                 * Constructs a new Supply.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Supply.
                 * @implements ISupply
                 * @constructor
                 * @param {cosmos.bank.v1beta1.ISupply=} [p] Properties to set
                 */
                function Supply(p) {
                    this.total = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Supply total.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} total
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @instance
                 */
                Supply.prototype.total = $util.emptyArray;

                /**
                 * Encodes the specified Supply message. Does not implicitly {@link cosmos.bank.v1beta1.Supply.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {cosmos.bank.v1beta1.ISupply} m Supply message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Supply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.total != null && m.total.length) {
                        for (var i = 0; i < m.total.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.total[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Supply message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Supply} Supply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Supply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.Supply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.total && m.total.length))
                                    m.total = [];
                                m.total.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Supply;
            })();

            v1beta1.DenomUnit = (function () {

                /**
                 * Properties of a DenomUnit.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IDenomUnit
                 * @property {string|null} [denom] DenomUnit denom
                 * @property {number|null} [exponent] DenomUnit exponent
                 * @property {Array.<string>|null} [aliases] DenomUnit aliases
                 */

                /**
                 * Constructs a new DenomUnit.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a DenomUnit.
                 * @implements IDenomUnit
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IDenomUnit=} [p] Properties to set
                 */
                function DenomUnit(p) {
                    this.aliases = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DenomUnit denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 */
                DenomUnit.prototype.denom = "";

                /**
                 * DenomUnit exponent.
                 * @member {number} exponent
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 */
                DenomUnit.prototype.exponent = 0;

                /**
                 * DenomUnit aliases.
                 * @member {Array.<string>} aliases
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 */
                DenomUnit.prototype.aliases = $util.emptyArray;

                /**
                 * Encodes the specified DenomUnit message. Does not implicitly {@link cosmos.bank.v1beta1.DenomUnit.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {cosmos.bank.v1beta1.IDenomUnit} m DenomUnit message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DenomUnit.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(10).string(m.denom);
                    if (m.exponent != null && Object.hasOwnProperty.call(m, "exponent"))
                        w.uint32(16).uint32(m.exponent);
                    if (m.aliases != null && m.aliases.length) {
                        for (var i = 0; i < m.aliases.length; ++i)
                            w.uint32(26).string(m.aliases[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a DenomUnit message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DenomUnit.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.DenomUnit();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.denom = r.string();
                                break;
                            case 2:
                                m.exponent = r.uint32();
                                break;
                            case 3:
                                if (!(m.aliases && m.aliases.length))
                                    m.aliases = [];
                                m.aliases.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DenomUnit;
            })();

            v1beta1.Metadata = (function () {

                /**
                 * Properties of a Metadata.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IMetadata
                 * @property {string|null} [description] Metadata description
                 * @property {Array.<cosmos.bank.v1beta1.IDenomUnit>|null} [denom_units] Metadata denom_units
                 * @property {string|null} [base] Metadata base
                 * @property {string|null} [display] Metadata display
                 */

                /**
                 * Constructs a new Metadata.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Metadata.
                 * @implements IMetadata
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IMetadata=} [p] Properties to set
                 */
                function Metadata(p) {
                    this.denom_units = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Metadata description.
                 * @member {string} description
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.description = "";

                /**
                 * Metadata denom_units.
                 * @member {Array.<cosmos.bank.v1beta1.IDenomUnit>} denom_units
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.denom_units = $util.emptyArray;

                /**
                 * Metadata base.
                 * @member {string} base
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.base = "";

                /**
                 * Metadata display.
                 * @member {string} display
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.display = "";

                /**
                 * Encodes the specified Metadata message. Does not implicitly {@link cosmos.bank.v1beta1.Metadata.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {cosmos.bank.v1beta1.IMetadata} m Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(10).string(m.description);
                    if (m.denom_units != null && m.denom_units.length) {
                        for (var i = 0; i < m.denom_units.length; ++i)
                            $root.cosmos.bank.v1beta1.DenomUnit.encode(m.denom_units[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.base != null && Object.hasOwnProperty.call(m, "base"))
                        w.uint32(26).string(m.base);
                    if (m.display != null && Object.hasOwnProperty.call(m, "display"))
                        w.uint32(34).string(m.display);
                    return w;
                };

                /**
                 * Decodes a Metadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.bank.v1beta1.Metadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.description = r.string();
                                break;
                            case 2:
                                if (!(m.denom_units && m.denom_units.length))
                                    m.denom_units = [];
                                m.denom_units.push($root.cosmos.bank.v1beta1.DenomUnit.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.base = r.string();
                                break;
                            case 4:
                                m.display = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Metadata;
            })();

            return v1beta1;
        })();

        return bank;
    })();

    cosmos.base = (function () {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.abci = (function () {

            /**
             * Namespace abci.
             * @memberof cosmos.base
             * @namespace
             */
            const abci = {};

            abci.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.abci
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.TxResponse = (function () {

                    /**
                     * Properties of a TxResponse.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface ITxResponse
                     * @property {Long|null} [height] TxResponse height
                     * @property {string|null} [txhash] TxResponse txhash
                     * @property {string|null} [codespace] TxResponse codespace
                     * @property {number|null} [code] TxResponse code
                     * @property {string|null} [data] TxResponse data
                     * @property {string|null} [raw_log] TxResponse raw_log
                     * @property {Array.<cosmos.base.abci.v1beta1.IABCIMessageLog>|null} [logs] TxResponse logs
                     * @property {string|null} [info] TxResponse info
                     * @property {Long|null} [gas_wanted] TxResponse gas_wanted
                     * @property {Long|null} [gas_used] TxResponse gas_used
                     * @property {google.protobuf.IAny|null} [tx] TxResponse tx
                     * @property {string|null} [timestamp] TxResponse timestamp
                     */

                    /**
                     * Constructs a new TxResponse.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a TxResponse.
                     * @implements ITxResponse
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.ITxResponse=} [p] Properties to set
                     */
                    function TxResponse(p) {
                        this.logs = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * TxResponse height.
                     * @member {Long} height
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * TxResponse txhash.
                     * @member {string} txhash
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.txhash = "";

                    /**
                     * TxResponse codespace.
                     * @member {string} codespace
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.codespace = "";

                    /**
                     * TxResponse code.
                     * @member {number} code
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.code = 0;

                    /**
                     * TxResponse data.
                     * @member {string} data
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.data = "";

                    /**
                     * TxResponse raw_log.
                     * @member {string} raw_log
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.raw_log = "";

                    /**
                     * TxResponse logs.
                     * @member {Array.<cosmos.base.abci.v1beta1.IABCIMessageLog>} logs
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.logs = $util.emptyArray;

                    /**
                     * TxResponse info.
                     * @member {string} info
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.info = "";

                    /**
                     * TxResponse gas_wanted.
                     * @member {Long} gas_wanted
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * TxResponse gas_used.
                     * @member {Long} gas_used
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.gas_used = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * TxResponse tx.
                     * @member {google.protobuf.IAny|null|undefined} tx
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.tx = null;

                    /**
                     * TxResponse timestamp.
                     * @member {string} timestamp
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.timestamp = "";

                    /**
                     * Encodes the specified TxResponse message. Does not implicitly {@link cosmos.base.abci.v1beta1.TxResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @static
                     * @param {cosmos.base.abci.v1beta1.ITxResponse} m TxResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            w.uint32(8).int64(m.height);
                        if (m.txhash != null && Object.hasOwnProperty.call(m, "txhash"))
                            w.uint32(18).string(m.txhash);
                        if (m.codespace != null && Object.hasOwnProperty.call(m, "codespace"))
                            w.uint32(26).string(m.codespace);
                        if (m.code != null && Object.hasOwnProperty.call(m, "code"))
                            w.uint32(32).uint32(m.code);
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(42).string(m.data);
                        if (m.raw_log != null && Object.hasOwnProperty.call(m, "raw_log"))
                            w.uint32(50).string(m.raw_log);
                        if (m.logs != null && m.logs.length) {
                            for (var i = 0; i < m.logs.length; ++i)
                                $root.cosmos.base.abci.v1beta1.ABCIMessageLog.encode(m.logs[i], w.uint32(58).fork()).ldelim();
                        }
                        if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                            w.uint32(66).string(m.info);
                        if (m.gas_wanted != null && Object.hasOwnProperty.call(m, "gas_wanted"))
                            w.uint32(72).int64(m.gas_wanted);
                        if (m.gas_used != null && Object.hasOwnProperty.call(m, "gas_used"))
                            w.uint32(80).int64(m.gas_used);
                        if (m.tx != null && Object.hasOwnProperty.call(m, "tx"))
                            $root.google.protobuf.Any.encode(m.tx, w.uint32(90).fork()).ldelim();
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            w.uint32(98).string(m.timestamp);
                        return w;
                    };

                    /**
                     * Decodes a TxResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.TxResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.TxResponse} TxResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.TxResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.height = r.int64();
                                    break;
                                case 2:
                                    m.txhash = r.string();
                                    break;
                                case 3:
                                    m.codespace = r.string();
                                    break;
                                case 4:
                                    m.code = r.uint32();
                                    break;
                                case 5:
                                    m.data = r.string();
                                    break;
                                case 6:
                                    m.raw_log = r.string();
                                    break;
                                case 7:
                                    if (!(m.logs && m.logs.length))
                                        m.logs = [];
                                    m.logs.push($root.cosmos.base.abci.v1beta1.ABCIMessageLog.decode(r, r.uint32()));
                                    break;
                                case 8:
                                    m.info = r.string();
                                    break;
                                case 9:
                                    m.gas_wanted = r.int64();
                                    break;
                                case 10:
                                    m.gas_used = r.int64();
                                    break;
                                case 11:
                                    m.tx = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 12:
                                    m.timestamp = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return TxResponse;
                })();

                v1beta1.ABCIMessageLog = (function () {

                    /**
                     * Properties of a ABCIMessageLog.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface IABCIMessageLog
                     * @property {number|null} [msg_index] ABCIMessageLog msg_index
                     * @property {string|null} [log] ABCIMessageLog log
                     * @property {Array.<cosmos.base.abci.v1beta1.IStringEvent>|null} [events] ABCIMessageLog events
                     */

                    /**
                     * Constructs a new ABCIMessageLog.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a ABCIMessageLog.
                     * @implements IABCIMessageLog
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.IABCIMessageLog=} [p] Properties to set
                     */
                    function ABCIMessageLog(p) {
                        this.events = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ABCIMessageLog msg_index.
                     * @member {number} msg_index
                     * @memberof cosmos.base.abci.v1beta1.ABCIMessageLog
                     * @instance
                     */
                    ABCIMessageLog.prototype.msg_index = 0;

                    /**
                     * ABCIMessageLog log.
                     * @member {string} log
                     * @memberof cosmos.base.abci.v1beta1.ABCIMessageLog
                     * @instance
                     */
                    ABCIMessageLog.prototype.log = "";

                    /**
                     * ABCIMessageLog events.
                     * @member {Array.<cosmos.base.abci.v1beta1.IStringEvent>} events
                     * @memberof cosmos.base.abci.v1beta1.ABCIMessageLog
                     * @instance
                     */
                    ABCIMessageLog.prototype.events = $util.emptyArray;

                    /**
                     * Encodes the specified ABCIMessageLog message. Does not implicitly {@link cosmos.base.abci.v1beta1.ABCIMessageLog.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.ABCIMessageLog
                     * @static
                     * @param {cosmos.base.abci.v1beta1.IABCIMessageLog} m ABCIMessageLog message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ABCIMessageLog.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.msg_index != null && Object.hasOwnProperty.call(m, "msg_index"))
                            w.uint32(8).uint32(m.msg_index);
                        if (m.log != null && Object.hasOwnProperty.call(m, "log"))
                            w.uint32(18).string(m.log);
                        if (m.events != null && m.events.length) {
                            for (var i = 0; i < m.events.length; ++i)
                                $root.cosmos.base.abci.v1beta1.StringEvent.encode(m.events[i], w.uint32(26).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a ABCIMessageLog message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.ABCIMessageLog
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.ABCIMessageLog} ABCIMessageLog
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ABCIMessageLog.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.ABCIMessageLog();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.msg_index = r.uint32();
                                    break;
                                case 2:
                                    m.log = r.string();
                                    break;
                                case 3:
                                    if (!(m.events && m.events.length))
                                        m.events = [];
                                    m.events.push($root.cosmos.base.abci.v1beta1.StringEvent.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ABCIMessageLog;
                })();

                v1beta1.StringEvent = (function () {

                    /**
                     * Properties of a StringEvent.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface IStringEvent
                     * @property {string|null} [type] StringEvent type
                     * @property {Array.<cosmos.base.abci.v1beta1.IAttribute>|null} [attributes] StringEvent attributes
                     */

                    /**
                     * Constructs a new StringEvent.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a StringEvent.
                     * @implements IStringEvent
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.IStringEvent=} [p] Properties to set
                     */
                    function StringEvent(p) {
                        this.attributes = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * StringEvent type.
                     * @member {string} type
                     * @memberof cosmos.base.abci.v1beta1.StringEvent
                     * @instance
                     */
                    StringEvent.prototype.type = "";

                    /**
                     * StringEvent attributes.
                     * @member {Array.<cosmos.base.abci.v1beta1.IAttribute>} attributes
                     * @memberof cosmos.base.abci.v1beta1.StringEvent
                     * @instance
                     */
                    StringEvent.prototype.attributes = $util.emptyArray;

                    /**
                     * Encodes the specified StringEvent message. Does not implicitly {@link cosmos.base.abci.v1beta1.StringEvent.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.StringEvent
                     * @static
                     * @param {cosmos.base.abci.v1beta1.IStringEvent} m StringEvent message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StringEvent.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                            w.uint32(10).string(m.type);
                        if (m.attributes != null && m.attributes.length) {
                            for (var i = 0; i < m.attributes.length; ++i)
                                $root.cosmos.base.abci.v1beta1.Attribute.encode(m.attributes[i], w.uint32(18).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a StringEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.StringEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.StringEvent} StringEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StringEvent.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.StringEvent();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.type = r.string();
                                    break;
                                case 2:
                                    if (!(m.attributes && m.attributes.length))
                                        m.attributes = [];
                                    m.attributes.push($root.cosmos.base.abci.v1beta1.Attribute.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return StringEvent;
                })();

                v1beta1.Attribute = (function () {

                    /**
                     * Properties of an Attribute.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface IAttribute
                     * @property {string|null} [key] Attribute key
                     * @property {string|null} [value] Attribute value
                     */

                    /**
                     * Constructs a new Attribute.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents an Attribute.
                     * @implements IAttribute
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.IAttribute=} [p] Properties to set
                     */
                    function Attribute(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Attribute key.
                     * @member {string} key
                     * @memberof cosmos.base.abci.v1beta1.Attribute
                     * @instance
                     */
                    Attribute.prototype.key = "";

                    /**
                     * Attribute value.
                     * @member {string} value
                     * @memberof cosmos.base.abci.v1beta1.Attribute
                     * @instance
                     */
                    Attribute.prototype.value = "";

                    /**
                     * Encodes the specified Attribute message. Does not implicitly {@link cosmos.base.abci.v1beta1.Attribute.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.Attribute
                     * @static
                     * @param {cosmos.base.abci.v1beta1.IAttribute} m Attribute message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Attribute.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                            w.uint32(10).string(m.key);
                        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                            w.uint32(18).string(m.value);
                        return w;
                    };

                    /**
                     * Decodes an Attribute message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.Attribute
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.Attribute} Attribute
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Attribute.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.Attribute();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.key = r.string();
                                    break;
                                case 2:
                                    m.value = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Attribute;
                })();

                v1beta1.GasInfo = (function () {

                    /**
                     * Properties of a GasInfo.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface IGasInfo
                     * @property {Long|null} [gas_wanted] GasInfo gas_wanted
                     * @property {Long|null} [gas_used] GasInfo gas_used
                     */

                    /**
                     * Constructs a new GasInfo.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a GasInfo.
                     * @implements IGasInfo
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.IGasInfo=} [p] Properties to set
                     */
                    function GasInfo(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GasInfo gas_wanted.
                     * @member {Long} gas_wanted
                     * @memberof cosmos.base.abci.v1beta1.GasInfo
                     * @instance
                     */
                    GasInfo.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * GasInfo gas_used.
                     * @member {Long} gas_used
                     * @memberof cosmos.base.abci.v1beta1.GasInfo
                     * @instance
                     */
                    GasInfo.prototype.gas_used = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified GasInfo message. Does not implicitly {@link cosmos.base.abci.v1beta1.GasInfo.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.GasInfo
                     * @static
                     * @param {cosmos.base.abci.v1beta1.IGasInfo} m GasInfo message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GasInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.gas_wanted != null && Object.hasOwnProperty.call(m, "gas_wanted"))
                            w.uint32(8).uint64(m.gas_wanted);
                        if (m.gas_used != null && Object.hasOwnProperty.call(m, "gas_used"))
                            w.uint32(16).uint64(m.gas_used);
                        return w;
                    };

                    /**
                     * Decodes a GasInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.GasInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.GasInfo} GasInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GasInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.GasInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.gas_wanted = r.uint64();
                                    break;
                                case 2:
                                    m.gas_used = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GasInfo;
                })();

                v1beta1.Result = (function () {

                    /**
                     * Properties of a Result.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface IResult
                     * @property {Uint8Array|null} [data] Result data
                     * @property {string|null} [log] Result log
                     * @property {Array.<tendermint.abci.IEvent>|null} [events] Result events
                     */

                    /**
                     * Constructs a new Result.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a Result.
                     * @implements IResult
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.IResult=} [p] Properties to set
                     */
                    function Result(p) {
                        this.events = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Result data.
                     * @member {Uint8Array} data
                     * @memberof cosmos.base.abci.v1beta1.Result
                     * @instance
                     */
                    Result.prototype.data = $util.newBuffer([]);

                    /**
                     * Result log.
                     * @member {string} log
                     * @memberof cosmos.base.abci.v1beta1.Result
                     * @instance
                     */
                    Result.prototype.log = "";

                    /**
                     * Result events.
                     * @member {Array.<tendermint.abci.IEvent>} events
                     * @memberof cosmos.base.abci.v1beta1.Result
                     * @instance
                     */
                    Result.prototype.events = $util.emptyArray;

                    /**
                     * Encodes the specified Result message. Does not implicitly {@link cosmos.base.abci.v1beta1.Result.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.Result
                     * @static
                     * @param {cosmos.base.abci.v1beta1.IResult} m Result message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Result.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(10).bytes(m.data);
                        if (m.log != null && Object.hasOwnProperty.call(m, "log"))
                            w.uint32(18).string(m.log);
                        if (m.events != null && m.events.length) {
                            for (var i = 0; i < m.events.length; ++i)
                                $root.tendermint.abci.Event.encode(m.events[i], w.uint32(26).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a Result message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.Result
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.Result} Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Result.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.Result();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.data = r.bytes();
                                    break;
                                case 2:
                                    m.log = r.string();
                                    break;
                                case 3:
                                    if (!(m.events && m.events.length))
                                        m.events = [];
                                    m.events.push($root.tendermint.abci.Event.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Result;
                })();

                v1beta1.SimulationResponse = (function () {

                    /**
                     * Properties of a SimulationResponse.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface ISimulationResponse
                     * @property {cosmos.base.abci.v1beta1.IGasInfo|null} [gas_info] SimulationResponse gas_info
                     * @property {cosmos.base.abci.v1beta1.IResult|null} [result] SimulationResponse result
                     */

                    /**
                     * Constructs a new SimulationResponse.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a SimulationResponse.
                     * @implements ISimulationResponse
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.ISimulationResponse=} [p] Properties to set
                     */
                    function SimulationResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SimulationResponse gas_info.
                     * @member {cosmos.base.abci.v1beta1.IGasInfo|null|undefined} gas_info
                     * @memberof cosmos.base.abci.v1beta1.SimulationResponse
                     * @instance
                     */
                    SimulationResponse.prototype.gas_info = null;

                    /**
                     * SimulationResponse result.
                     * @member {cosmos.base.abci.v1beta1.IResult|null|undefined} result
                     * @memberof cosmos.base.abci.v1beta1.SimulationResponse
                     * @instance
                     */
                    SimulationResponse.prototype.result = null;

                    /**
                     * Encodes the specified SimulationResponse message. Does not implicitly {@link cosmos.base.abci.v1beta1.SimulationResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.SimulationResponse
                     * @static
                     * @param {cosmos.base.abci.v1beta1.ISimulationResponse} m SimulationResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SimulationResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.gas_info != null && Object.hasOwnProperty.call(m, "gas_info"))
                            $root.cosmos.base.abci.v1beta1.GasInfo.encode(m.gas_info, w.uint32(10).fork()).ldelim();
                        if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                            $root.cosmos.base.abci.v1beta1.Result.encode(m.result, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a SimulationResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.SimulationResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.SimulationResponse} SimulationResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SimulationResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.SimulationResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.gas_info = $root.cosmos.base.abci.v1beta1.GasInfo.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.result = $root.cosmos.base.abci.v1beta1.Result.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SimulationResponse;
                })();

                v1beta1.MsgData = (function () {

                    /**
                     * Properties of a MsgData.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface IMsgData
                     * @property {string|null} [msg_type] MsgData msg_type
                     * @property {Uint8Array|null} [data] MsgData data
                     */

                    /**
                     * Constructs a new MsgData.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a MsgData.
                     * @implements IMsgData
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.IMsgData=} [p] Properties to set
                     */
                    function MsgData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgData msg_type.
                     * @member {string} msg_type
                     * @memberof cosmos.base.abci.v1beta1.MsgData
                     * @instance
                     */
                    MsgData.prototype.msg_type = "";

                    /**
                     * MsgData data.
                     * @member {Uint8Array} data
                     * @memberof cosmos.base.abci.v1beta1.MsgData
                     * @instance
                     */
                    MsgData.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified MsgData message. Does not implicitly {@link cosmos.base.abci.v1beta1.MsgData.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.MsgData
                     * @static
                     * @param {cosmos.base.abci.v1beta1.IMsgData} m MsgData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.msg_type != null && Object.hasOwnProperty.call(m, "msg_type"))
                            w.uint32(10).string(m.msg_type);
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(18).bytes(m.data);
                        return w;
                    };

                    /**
                     * Decodes a MsgData message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.MsgData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.MsgData} MsgData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.MsgData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.msg_type = r.string();
                                    break;
                                case 2:
                                    m.data = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgData;
                })();

                v1beta1.TxMsgData = (function () {

                    /**
                     * Properties of a TxMsgData.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface ITxMsgData
                     * @property {Array.<cosmos.base.abci.v1beta1.IMsgData>|null} [data] TxMsgData data
                     */

                    /**
                     * Constructs a new TxMsgData.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a TxMsgData.
                     * @implements ITxMsgData
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.ITxMsgData=} [p] Properties to set
                     */
                    function TxMsgData(p) {
                        this.data = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * TxMsgData data.
                     * @member {Array.<cosmos.base.abci.v1beta1.IMsgData>} data
                     * @memberof cosmos.base.abci.v1beta1.TxMsgData
                     * @instance
                     */
                    TxMsgData.prototype.data = $util.emptyArray;

                    /**
                     * Encodes the specified TxMsgData message. Does not implicitly {@link cosmos.base.abci.v1beta1.TxMsgData.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.TxMsgData
                     * @static
                     * @param {cosmos.base.abci.v1beta1.ITxMsgData} m TxMsgData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxMsgData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.data != null && m.data.length) {
                            for (var i = 0; i < m.data.length; ++i)
                                $root.cosmos.base.abci.v1beta1.MsgData.encode(m.data[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a TxMsgData message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.TxMsgData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.TxMsgData} TxMsgData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxMsgData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.TxMsgData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.data && m.data.length))
                                        m.data = [];
                                    m.data.push($root.cosmos.base.abci.v1beta1.MsgData.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return TxMsgData;
                })();

                v1beta1.SearchTxsResult = (function () {

                    /**
                     * Properties of a SearchTxsResult.
                     * @memberof cosmos.base.abci.v1beta1
                     * @interface ISearchTxsResult
                     * @property {Long|null} [total_count] SearchTxsResult total_count
                     * @property {Long|null} [count] SearchTxsResult count
                     * @property {Long|null} [page_number] SearchTxsResult page_number
                     * @property {Long|null} [page_total] SearchTxsResult page_total
                     * @property {Long|null} [limit] SearchTxsResult limit
                     * @property {Array.<cosmos.base.abci.v1beta1.ITxResponse>|null} [txs] SearchTxsResult txs
                     */

                    /**
                     * Constructs a new SearchTxsResult.
                     * @memberof cosmos.base.abci.v1beta1
                     * @classdesc Represents a SearchTxsResult.
                     * @implements ISearchTxsResult
                     * @constructor
                     * @param {cosmos.base.abci.v1beta1.ISearchTxsResult=} [p] Properties to set
                     */
                    function SearchTxsResult(p) {
                        this.txs = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SearchTxsResult total_count.
                     * @member {Long} total_count
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @instance
                     */
                    SearchTxsResult.prototype.total_count = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SearchTxsResult count.
                     * @member {Long} count
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @instance
                     */
                    SearchTxsResult.prototype.count = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SearchTxsResult page_number.
                     * @member {Long} page_number
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @instance
                     */
                    SearchTxsResult.prototype.page_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SearchTxsResult page_total.
                     * @member {Long} page_total
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @instance
                     */
                    SearchTxsResult.prototype.page_total = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SearchTxsResult limit.
                     * @member {Long} limit
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @instance
                     */
                    SearchTxsResult.prototype.limit = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SearchTxsResult txs.
                     * @member {Array.<cosmos.base.abci.v1beta1.ITxResponse>} txs
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @instance
                     */
                    SearchTxsResult.prototype.txs = $util.emptyArray;

                    /**
                     * Encodes the specified SearchTxsResult message. Does not implicitly {@link cosmos.base.abci.v1beta1.SearchTxsResult.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @static
                     * @param {cosmos.base.abci.v1beta1.ISearchTxsResult} m SearchTxsResult message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchTxsResult.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.total_count != null && Object.hasOwnProperty.call(m, "total_count"))
                            w.uint32(8).uint64(m.total_count);
                        if (m.count != null && Object.hasOwnProperty.call(m, "count"))
                            w.uint32(16).uint64(m.count);
                        if (m.page_number != null && Object.hasOwnProperty.call(m, "page_number"))
                            w.uint32(24).uint64(m.page_number);
                        if (m.page_total != null && Object.hasOwnProperty.call(m, "page_total"))
                            w.uint32(32).uint64(m.page_total);
                        if (m.limit != null && Object.hasOwnProperty.call(m, "limit"))
                            w.uint32(40).uint64(m.limit);
                        if (m.txs != null && m.txs.length) {
                            for (var i = 0; i < m.txs.length; ++i)
                                $root.cosmos.base.abci.v1beta1.TxResponse.encode(m.txs[i], w.uint32(50).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a SearchTxsResult message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.abci.v1beta1.SearchTxsResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.abci.v1beta1.SearchTxsResult} SearchTxsResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchTxsResult.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.abci.v1beta1.SearchTxsResult();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.total_count = r.uint64();
                                    break;
                                case 2:
                                    m.count = r.uint64();
                                    break;
                                case 3:
                                    m.page_number = r.uint64();
                                    break;
                                case 4:
                                    m.page_total = r.uint64();
                                    break;
                                case 5:
                                    m.limit = r.uint64();
                                    break;
                                case 6:
                                    if (!(m.txs && m.txs.length))
                                        m.txs = [];
                                    m.txs.push($root.cosmos.base.abci.v1beta1.TxResponse.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SearchTxsResult;
                })();

                return v1beta1;
            })();

            return abci;
        })();

        base.kv = (function () {

            /**
             * Namespace kv.
             * @memberof cosmos.base
             * @namespace
             */
            const kv = {};

            kv.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.kv
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.Pairs = (function () {

                    /**
                     * Properties of a Pairs.
                     * @memberof cosmos.base.kv.v1beta1
                     * @interface IPairs
                     * @property {Array.<cosmos.base.kv.v1beta1.IPair>|null} [pairs] Pairs pairs
                     */

                    /**
                     * Constructs a new Pairs.
                     * @memberof cosmos.base.kv.v1beta1
                     * @classdesc Represents a Pairs.
                     * @implements IPairs
                     * @constructor
                     * @param {cosmos.base.kv.v1beta1.IPairs=} [p] Properties to set
                     */
                    function Pairs(p) {
                        this.pairs = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Pairs pairs.
                     * @member {Array.<cosmos.base.kv.v1beta1.IPair>} pairs
                     * @memberof cosmos.base.kv.v1beta1.Pairs
                     * @instance
                     */
                    Pairs.prototype.pairs = $util.emptyArray;

                    /**
                     * Encodes the specified Pairs message. Does not implicitly {@link cosmos.base.kv.v1beta1.Pairs.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.kv.v1beta1.Pairs
                     * @static
                     * @param {cosmos.base.kv.v1beta1.IPairs} m Pairs message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pairs.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.pairs != null && m.pairs.length) {
                            for (var i = 0; i < m.pairs.length; ++i)
                                $root.cosmos.base.kv.v1beta1.Pair.encode(m.pairs[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a Pairs message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.kv.v1beta1.Pairs
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.kv.v1beta1.Pairs} Pairs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pairs.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.kv.v1beta1.Pairs();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.pairs && m.pairs.length))
                                        m.pairs = [];
                                    m.pairs.push($root.cosmos.base.kv.v1beta1.Pair.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Pairs;
                })();

                v1beta1.Pair = (function () {

                    /**
                     * Properties of a Pair.
                     * @memberof cosmos.base.kv.v1beta1
                     * @interface IPair
                     * @property {Uint8Array|null} [key] Pair key
                     * @property {Uint8Array|null} [value] Pair value
                     */

                    /**
                     * Constructs a new Pair.
                     * @memberof cosmos.base.kv.v1beta1
                     * @classdesc Represents a Pair.
                     * @implements IPair
                     * @constructor
                     * @param {cosmos.base.kv.v1beta1.IPair=} [p] Properties to set
                     */
                    function Pair(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Pair key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.kv.v1beta1.Pair
                     * @instance
                     */
                    Pair.prototype.key = $util.newBuffer([]);

                    /**
                     * Pair value.
                     * @member {Uint8Array} value
                     * @memberof cosmos.base.kv.v1beta1.Pair
                     * @instance
                     */
                    Pair.prototype.value = $util.newBuffer([]);

                    /**
                     * Encodes the specified Pair message. Does not implicitly {@link cosmos.base.kv.v1beta1.Pair.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.kv.v1beta1.Pair
                     * @static
                     * @param {cosmos.base.kv.v1beta1.IPair} m Pair message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pair.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                            w.uint32(10).bytes(m.key);
                        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                            w.uint32(18).bytes(m.value);
                        return w;
                    };

                    /**
                     * Decodes a Pair message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.kv.v1beta1.Pair
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.kv.v1beta1.Pair} Pair
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pair.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.kv.v1beta1.Pair();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.key = r.bytes();
                                    break;
                                case 2:
                                    m.value = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Pair;
                })();

                return v1beta1;
            })();

            return kv;
        })();

        base.query = (function () {

            /**
             * Namespace query.
             * @memberof cosmos.base
             * @namespace
             */
            const query = {};

            query.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.query
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.PageRequest = (function () {

                    /**
                     * Properties of a PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageRequest
                     * @property {Uint8Array|null} [key] PageRequest key
                     * @property {Long|null} [offset] PageRequest offset
                     * @property {Long|null} [limit] PageRequest limit
                     * @property {boolean|null} [count_total] PageRequest count_total
                     */

                    /**
                     * Constructs a new PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageRequest.
                     * @implements IPageRequest
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageRequest=} [p] Properties to set
                     */
                    function PageRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PageRequest key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.key = $util.newBuffer([]);

                    /**
                     * PageRequest offset.
                     * @member {Long} offset
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.offset = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * PageRequest limit.
                     * @member {Long} limit
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * PageRequest count_total.
                     * @member {boolean} count_total
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.count_total = false;

                    /**
                     * Encodes the specified PageRequest message. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} m PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                            w.uint32(10).bytes(m.key);
                        if (m.offset != null && Object.hasOwnProperty.call(m, "offset"))
                            w.uint32(16).uint64(m.offset);
                        if (m.limit != null && Object.hasOwnProperty.call(m, "limit"))
                            w.uint32(24).uint64(m.limit);
                        if (m.count_total != null && Object.hasOwnProperty.call(m, "count_total"))
                            w.uint32(32).bool(m.count_total);
                        return w;
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.query.v1beta1.PageRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.key = r.bytes();
                                    break;
                                case 2:
                                    m.offset = r.uint64();
                                    break;
                                case 3:
                                    m.limit = r.uint64();
                                    break;
                                case 4:
                                    m.count_total = r.bool();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PageRequest;
                })();

                v1beta1.PageResponse = (function () {

                    /**
                     * Properties of a PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageResponse
                     * @property {Uint8Array|null} [next_key] PageResponse next_key
                     * @property {Long|null} [total] PageResponse total
                     */

                    /**
                     * Constructs a new PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageResponse.
                     * @implements IPageResponse
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageResponse=} [p] Properties to set
                     */
                    function PageResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PageResponse next_key.
                     * @member {Uint8Array} next_key
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.next_key = $util.newBuffer([]);

                    /**
                     * PageResponse total.
                     * @member {Long} total
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.total = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified PageResponse message. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} m PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.next_key != null && Object.hasOwnProperty.call(m, "next_key"))
                            w.uint32(10).bytes(m.next_key);
                        if (m.total != null && Object.hasOwnProperty.call(m, "total"))
                            w.uint32(16).uint64(m.total);
                        return w;
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.query.v1beta1.PageResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.next_key = r.bytes();
                                    break;
                                case 2:
                                    m.total = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PageResponse;
                })();

                return v1beta1;
            })();

            return query;
        })();

        base.reflection = (function () {

            /**
             * Namespace reflection.
             * @memberof cosmos.base
             * @namespace
             */
            const reflection = {};

            reflection.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.reflection
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.ListAllInterfacesRequest = (function () {

                    /**
                     * Properties of a ListAllInterfacesRequest.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @interface IListAllInterfacesRequest
                     */

                    /**
                     * Constructs a new ListAllInterfacesRequest.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @classdesc Represents a ListAllInterfacesRequest.
                     * @implements IListAllInterfacesRequest
                     * @constructor
                     * @param {cosmos.base.reflection.v1beta1.IListAllInterfacesRequest=} [p] Properties to set
                     */
                    function ListAllInterfacesRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified ListAllInterfacesRequest message. Does not implicitly {@link cosmos.base.reflection.v1beta1.ListAllInterfacesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.reflection.v1beta1.ListAllInterfacesRequest
                     * @static
                     * @param {cosmos.base.reflection.v1beta1.IListAllInterfacesRequest} m ListAllInterfacesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListAllInterfacesRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a ListAllInterfacesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.reflection.v1beta1.ListAllInterfacesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.reflection.v1beta1.ListAllInterfacesRequest} ListAllInterfacesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListAllInterfacesRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.reflection.v1beta1.ListAllInterfacesRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ListAllInterfacesRequest;
                })();

                v1beta1.ListAllInterfacesResponse = (function () {

                    /**
                     * Properties of a ListAllInterfacesResponse.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @interface IListAllInterfacesResponse
                     * @property {Array.<string>|null} [interface_names] ListAllInterfacesResponse interface_names
                     */

                    /**
                     * Constructs a new ListAllInterfacesResponse.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @classdesc Represents a ListAllInterfacesResponse.
                     * @implements IListAllInterfacesResponse
                     * @constructor
                     * @param {cosmos.base.reflection.v1beta1.IListAllInterfacesResponse=} [p] Properties to set
                     */
                    function ListAllInterfacesResponse(p) {
                        this.interface_names = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ListAllInterfacesResponse interface_names.
                     * @member {Array.<string>} interface_names
                     * @memberof cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
                     * @instance
                     */
                    ListAllInterfacesResponse.prototype.interface_names = $util.emptyArray;

                    /**
                     * Encodes the specified ListAllInterfacesResponse message. Does not implicitly {@link cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
                     * @static
                     * @param {cosmos.base.reflection.v1beta1.IListAllInterfacesResponse} m ListAllInterfacesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListAllInterfacesResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.interface_names != null && m.interface_names.length) {
                            for (var i = 0; i < m.interface_names.length; ++i)
                                w.uint32(10).string(m.interface_names[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a ListAllInterfacesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.reflection.v1beta1.ListAllInterfacesResponse} ListAllInterfacesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListAllInterfacesResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.reflection.v1beta1.ListAllInterfacesResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.interface_names && m.interface_names.length))
                                        m.interface_names = [];
                                    m.interface_names.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ListAllInterfacesResponse;
                })();

                v1beta1.ListImplementationsRequest = (function () {

                    /**
                     * Properties of a ListImplementationsRequest.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @interface IListImplementationsRequest
                     * @property {string|null} [interface_name] ListImplementationsRequest interface_name
                     */

                    /**
                     * Constructs a new ListImplementationsRequest.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @classdesc Represents a ListImplementationsRequest.
                     * @implements IListImplementationsRequest
                     * @constructor
                     * @param {cosmos.base.reflection.v1beta1.IListImplementationsRequest=} [p] Properties to set
                     */
                    function ListImplementationsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ListImplementationsRequest interface_name.
                     * @member {string} interface_name
                     * @memberof cosmos.base.reflection.v1beta1.ListImplementationsRequest
                     * @instance
                     */
                    ListImplementationsRequest.prototype.interface_name = "";

                    /**
                     * Encodes the specified ListImplementationsRequest message. Does not implicitly {@link cosmos.base.reflection.v1beta1.ListImplementationsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.reflection.v1beta1.ListImplementationsRequest
                     * @static
                     * @param {cosmos.base.reflection.v1beta1.IListImplementationsRequest} m ListImplementationsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListImplementationsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.interface_name != null && Object.hasOwnProperty.call(m, "interface_name"))
                            w.uint32(10).string(m.interface_name);
                        return w;
                    };

                    /**
                     * Decodes a ListImplementationsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.reflection.v1beta1.ListImplementationsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.reflection.v1beta1.ListImplementationsRequest} ListImplementationsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListImplementationsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.reflection.v1beta1.ListImplementationsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.interface_name = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ListImplementationsRequest;
                })();

                v1beta1.ListImplementationsResponse = (function () {

                    /**
                     * Properties of a ListImplementationsResponse.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @interface IListImplementationsResponse
                     * @property {Array.<string>|null} [implementation_message_names] ListImplementationsResponse implementation_message_names
                     */

                    /**
                     * Constructs a new ListImplementationsResponse.
                     * @memberof cosmos.base.reflection.v1beta1
                     * @classdesc Represents a ListImplementationsResponse.
                     * @implements IListImplementationsResponse
                     * @constructor
                     * @param {cosmos.base.reflection.v1beta1.IListImplementationsResponse=} [p] Properties to set
                     */
                    function ListImplementationsResponse(p) {
                        this.implementation_message_names = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ListImplementationsResponse implementation_message_names.
                     * @member {Array.<string>} implementation_message_names
                     * @memberof cosmos.base.reflection.v1beta1.ListImplementationsResponse
                     * @instance
                     */
                    ListImplementationsResponse.prototype.implementation_message_names = $util.emptyArray;

                    /**
                     * Encodes the specified ListImplementationsResponse message. Does not implicitly {@link cosmos.base.reflection.v1beta1.ListImplementationsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.reflection.v1beta1.ListImplementationsResponse
                     * @static
                     * @param {cosmos.base.reflection.v1beta1.IListImplementationsResponse} m ListImplementationsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListImplementationsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.implementation_message_names != null && m.implementation_message_names.length) {
                            for (var i = 0; i < m.implementation_message_names.length; ++i)
                                w.uint32(10).string(m.implementation_message_names[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a ListImplementationsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.reflection.v1beta1.ListImplementationsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.reflection.v1beta1.ListImplementationsResponse} ListImplementationsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListImplementationsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.reflection.v1beta1.ListImplementationsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.implementation_message_names && m.implementation_message_names.length))
                                        m.implementation_message_names = [];
                                    m.implementation_message_names.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ListImplementationsResponse;
                })();

                return v1beta1;
            })();

            return reflection;
        })();

        base.snapshots = (function () {

            /**
             * Namespace snapshots.
             * @memberof cosmos.base
             * @namespace
             */
            const snapshots = {};

            snapshots.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.snapshots
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.Snapshot = (function () {

                    /**
                     * Properties of a Snapshot.
                     * @memberof cosmos.base.snapshots.v1beta1
                     * @interface ISnapshot
                     * @property {Long|null} [height] Snapshot height
                     * @property {number|null} [format] Snapshot format
                     * @property {number|null} [chunks] Snapshot chunks
                     * @property {Uint8Array|null} [hash] Snapshot hash
                     * @property {cosmos.base.snapshots.v1beta1.IMetadata|null} [metadata] Snapshot metadata
                     */

                    /**
                     * Constructs a new Snapshot.
                     * @memberof cosmos.base.snapshots.v1beta1
                     * @classdesc Represents a Snapshot.
                     * @implements ISnapshot
                     * @constructor
                     * @param {cosmos.base.snapshots.v1beta1.ISnapshot=} [p] Properties to set
                     */
                    function Snapshot(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Snapshot height.
                     * @member {Long} height
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @instance
                     */
                    Snapshot.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Snapshot format.
                     * @member {number} format
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @instance
                     */
                    Snapshot.prototype.format = 0;

                    /**
                     * Snapshot chunks.
                     * @member {number} chunks
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @instance
                     */
                    Snapshot.prototype.chunks = 0;

                    /**
                     * Snapshot hash.
                     * @member {Uint8Array} hash
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @instance
                     */
                    Snapshot.prototype.hash = $util.newBuffer([]);

                    /**
                     * Snapshot metadata.
                     * @member {cosmos.base.snapshots.v1beta1.IMetadata|null|undefined} metadata
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @instance
                     */
                    Snapshot.prototype.metadata = null;

                    /**
                     * Encodes the specified Snapshot message. Does not implicitly {@link cosmos.base.snapshots.v1beta1.Snapshot.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @static
                     * @param {cosmos.base.snapshots.v1beta1.ISnapshot} m Snapshot message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Snapshot.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            w.uint32(8).uint64(m.height);
                        if (m.format != null && Object.hasOwnProperty.call(m, "format"))
                            w.uint32(16).uint32(m.format);
                        if (m.chunks != null && Object.hasOwnProperty.call(m, "chunks"))
                            w.uint32(24).uint32(m.chunks);
                        if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                            w.uint32(34).bytes(m.hash);
                        if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata"))
                            $root.cosmos.base.snapshots.v1beta1.Metadata.encode(m.metadata, w.uint32(42).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a Snapshot message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.snapshots.v1beta1.Snapshot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.snapshots.v1beta1.Snapshot} Snapshot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Snapshot.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.snapshots.v1beta1.Snapshot();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.height = r.uint64();
                                    break;
                                case 2:
                                    m.format = r.uint32();
                                    break;
                                case 3:
                                    m.chunks = r.uint32();
                                    break;
                                case 4:
                                    m.hash = r.bytes();
                                    break;
                                case 5:
                                    m.metadata = $root.cosmos.base.snapshots.v1beta1.Metadata.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Snapshot;
                })();

                v1beta1.Metadata = (function () {

                    /**
                     * Properties of a Metadata.
                     * @memberof cosmos.base.snapshots.v1beta1
                     * @interface IMetadata
                     * @property {Array.<Uint8Array>|null} [chunk_hashes] Metadata chunk_hashes
                     */

                    /**
                     * Constructs a new Metadata.
                     * @memberof cosmos.base.snapshots.v1beta1
                     * @classdesc Represents a Metadata.
                     * @implements IMetadata
                     * @constructor
                     * @param {cosmos.base.snapshots.v1beta1.IMetadata=} [p] Properties to set
                     */
                    function Metadata(p) {
                        this.chunk_hashes = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Metadata chunk_hashes.
                     * @member {Array.<Uint8Array>} chunk_hashes
                     * @memberof cosmos.base.snapshots.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.chunk_hashes = $util.emptyArray;

                    /**
                     * Encodes the specified Metadata message. Does not implicitly {@link cosmos.base.snapshots.v1beta1.Metadata.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.snapshots.v1beta1.Metadata
                     * @static
                     * @param {cosmos.base.snapshots.v1beta1.IMetadata} m Metadata message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metadata.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.chunk_hashes != null && m.chunk_hashes.length) {
                            for (var i = 0; i < m.chunk_hashes.length; ++i)
                                w.uint32(10).bytes(m.chunk_hashes[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a Metadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.snapshots.v1beta1.Metadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.snapshots.v1beta1.Metadata} Metadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metadata.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.snapshots.v1beta1.Metadata();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.chunk_hashes && m.chunk_hashes.length))
                                        m.chunk_hashes = [];
                                    m.chunk_hashes.push(r.bytes());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Metadata;
                })();

                return v1beta1;
            })();

            return snapshots;
        })();

        base.store = (function () {

            /**
             * Namespace store.
             * @memberof cosmos.base
             * @namespace
             */
            const store = {};

            store.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.store
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.CommitInfo = (function () {

                    /**
                     * Properties of a CommitInfo.
                     * @memberof cosmos.base.store.v1beta1
                     * @interface ICommitInfo
                     * @property {Long|null} [version] CommitInfo version
                     * @property {Array.<cosmos.base.store.v1beta1.IStoreInfo>|null} [store_infos] CommitInfo store_infos
                     */

                    /**
                     * Constructs a new CommitInfo.
                     * @memberof cosmos.base.store.v1beta1
                     * @classdesc Represents a CommitInfo.
                     * @implements ICommitInfo
                     * @constructor
                     * @param {cosmos.base.store.v1beta1.ICommitInfo=} [p] Properties to set
                     */
                    function CommitInfo(p) {
                        this.store_infos = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * CommitInfo version.
                     * @member {Long} version
                     * @memberof cosmos.base.store.v1beta1.CommitInfo
                     * @instance
                     */
                    CommitInfo.prototype.version = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * CommitInfo store_infos.
                     * @member {Array.<cosmos.base.store.v1beta1.IStoreInfo>} store_infos
                     * @memberof cosmos.base.store.v1beta1.CommitInfo
                     * @instance
                     */
                    CommitInfo.prototype.store_infos = $util.emptyArray;

                    /**
                     * Encodes the specified CommitInfo message. Does not implicitly {@link cosmos.base.store.v1beta1.CommitInfo.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.store.v1beta1.CommitInfo
                     * @static
                     * @param {cosmos.base.store.v1beta1.ICommitInfo} m CommitInfo message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CommitInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(8).int64(m.version);
                        if (m.store_infos != null && m.store_infos.length) {
                            for (var i = 0; i < m.store_infos.length; ++i)
                                $root.cosmos.base.store.v1beta1.StoreInfo.encode(m.store_infos[i], w.uint32(18).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a CommitInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.store.v1beta1.CommitInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.store.v1beta1.CommitInfo} CommitInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CommitInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.store.v1beta1.CommitInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.version = r.int64();
                                    break;
                                case 2:
                                    if (!(m.store_infos && m.store_infos.length))
                                        m.store_infos = [];
                                    m.store_infos.push($root.cosmos.base.store.v1beta1.StoreInfo.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return CommitInfo;
                })();

                v1beta1.StoreInfo = (function () {

                    /**
                     * Properties of a StoreInfo.
                     * @memberof cosmos.base.store.v1beta1
                     * @interface IStoreInfo
                     * @property {string|null} [name] StoreInfo name
                     * @property {cosmos.base.store.v1beta1.ICommitID|null} [commit_id] StoreInfo commit_id
                     */

                    /**
                     * Constructs a new StoreInfo.
                     * @memberof cosmos.base.store.v1beta1
                     * @classdesc Represents a StoreInfo.
                     * @implements IStoreInfo
                     * @constructor
                     * @param {cosmos.base.store.v1beta1.IStoreInfo=} [p] Properties to set
                     */
                    function StoreInfo(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * StoreInfo name.
                     * @member {string} name
                     * @memberof cosmos.base.store.v1beta1.StoreInfo
                     * @instance
                     */
                    StoreInfo.prototype.name = "";

                    /**
                     * StoreInfo commit_id.
                     * @member {cosmos.base.store.v1beta1.ICommitID|null|undefined} commit_id
                     * @memberof cosmos.base.store.v1beta1.StoreInfo
                     * @instance
                     */
                    StoreInfo.prototype.commit_id = null;

                    /**
                     * Encodes the specified StoreInfo message. Does not implicitly {@link cosmos.base.store.v1beta1.StoreInfo.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.store.v1beta1.StoreInfo
                     * @static
                     * @param {cosmos.base.store.v1beta1.IStoreInfo} m StoreInfo message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StoreInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                            w.uint32(10).string(m.name);
                        if (m.commit_id != null && Object.hasOwnProperty.call(m, "commit_id"))
                            $root.cosmos.base.store.v1beta1.CommitID.encode(m.commit_id, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a StoreInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.store.v1beta1.StoreInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.store.v1beta1.StoreInfo} StoreInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StoreInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.store.v1beta1.StoreInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.name = r.string();
                                    break;
                                case 2:
                                    m.commit_id = $root.cosmos.base.store.v1beta1.CommitID.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return StoreInfo;
                })();

                v1beta1.CommitID = (function () {

                    /**
                     * Properties of a CommitID.
                     * @memberof cosmos.base.store.v1beta1
                     * @interface ICommitID
                     * @property {Long|null} [version] CommitID version
                     * @property {Uint8Array|null} [hash] CommitID hash
                     */

                    /**
                     * Constructs a new CommitID.
                     * @memberof cosmos.base.store.v1beta1
                     * @classdesc Represents a CommitID.
                     * @implements ICommitID
                     * @constructor
                     * @param {cosmos.base.store.v1beta1.ICommitID=} [p] Properties to set
                     */
                    function CommitID(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * CommitID version.
                     * @member {Long} version
                     * @memberof cosmos.base.store.v1beta1.CommitID
                     * @instance
                     */
                    CommitID.prototype.version = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * CommitID hash.
                     * @member {Uint8Array} hash
                     * @memberof cosmos.base.store.v1beta1.CommitID
                     * @instance
                     */
                    CommitID.prototype.hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified CommitID message. Does not implicitly {@link cosmos.base.store.v1beta1.CommitID.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.store.v1beta1.CommitID
                     * @static
                     * @param {cosmos.base.store.v1beta1.ICommitID} m CommitID message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CommitID.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(8).int64(m.version);
                        if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                            w.uint32(18).bytes(m.hash);
                        return w;
                    };

                    /**
                     * Decodes a CommitID message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.store.v1beta1.CommitID
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.store.v1beta1.CommitID} CommitID
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CommitID.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.store.v1beta1.CommitID();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.version = r.int64();
                                    break;
                                case 2:
                                    m.hash = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return CommitID;
                })();

                v1beta1.SnapshotItem = (function () {

                    /**
                     * Properties of a SnapshotItem.
                     * @memberof cosmos.base.store.v1beta1
                     * @interface ISnapshotItem
                     * @property {cosmos.base.store.v1beta1.ISnapshotStoreItem|null} [store] SnapshotItem store
                     * @property {cosmos.base.store.v1beta1.ISnapshotIAVLItem|null} [iavl] SnapshotItem iavl
                     */

                    /**
                     * Constructs a new SnapshotItem.
                     * @memberof cosmos.base.store.v1beta1
                     * @classdesc Represents a SnapshotItem.
                     * @implements ISnapshotItem
                     * @constructor
                     * @param {cosmos.base.store.v1beta1.ISnapshotItem=} [p] Properties to set
                     */
                    function SnapshotItem(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SnapshotItem store.
                     * @member {cosmos.base.store.v1beta1.ISnapshotStoreItem|null|undefined} store
                     * @memberof cosmos.base.store.v1beta1.SnapshotItem
                     * @instance
                     */
                    SnapshotItem.prototype.store = null;

                    /**
                     * SnapshotItem iavl.
                     * @member {cosmos.base.store.v1beta1.ISnapshotIAVLItem|null|undefined} iavl
                     * @memberof cosmos.base.store.v1beta1.SnapshotItem
                     * @instance
                     */
                    SnapshotItem.prototype.iavl = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * SnapshotItem item.
                     * @member {"store"|"iavl"|undefined} item
                     * @memberof cosmos.base.store.v1beta1.SnapshotItem
                     * @instance
                     */
                    Object.defineProperty(SnapshotItem.prototype, "item", {
                        get: $util.oneOfGetter($oneOfFields = ["store", "iavl"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified SnapshotItem message. Does not implicitly {@link cosmos.base.store.v1beta1.SnapshotItem.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.store.v1beta1.SnapshotItem
                     * @static
                     * @param {cosmos.base.store.v1beta1.ISnapshotItem} m SnapshotItem message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SnapshotItem.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.store != null && Object.hasOwnProperty.call(m, "store"))
                            $root.cosmos.base.store.v1beta1.SnapshotStoreItem.encode(m.store, w.uint32(10).fork()).ldelim();
                        if (m.iavl != null && Object.hasOwnProperty.call(m, "iavl"))
                            $root.cosmos.base.store.v1beta1.SnapshotIAVLItem.encode(m.iavl, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a SnapshotItem message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.store.v1beta1.SnapshotItem
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.store.v1beta1.SnapshotItem} SnapshotItem
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SnapshotItem.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.store.v1beta1.SnapshotItem();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.store = $root.cosmos.base.store.v1beta1.SnapshotStoreItem.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.iavl = $root.cosmos.base.store.v1beta1.SnapshotIAVLItem.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SnapshotItem;
                })();

                v1beta1.SnapshotStoreItem = (function () {

                    /**
                     * Properties of a SnapshotStoreItem.
                     * @memberof cosmos.base.store.v1beta1
                     * @interface ISnapshotStoreItem
                     * @property {string|null} [name] SnapshotStoreItem name
                     */

                    /**
                     * Constructs a new SnapshotStoreItem.
                     * @memberof cosmos.base.store.v1beta1
                     * @classdesc Represents a SnapshotStoreItem.
                     * @implements ISnapshotStoreItem
                     * @constructor
                     * @param {cosmos.base.store.v1beta1.ISnapshotStoreItem=} [p] Properties to set
                     */
                    function SnapshotStoreItem(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SnapshotStoreItem name.
                     * @member {string} name
                     * @memberof cosmos.base.store.v1beta1.SnapshotStoreItem
                     * @instance
                     */
                    SnapshotStoreItem.prototype.name = "";

                    /**
                     * Encodes the specified SnapshotStoreItem message. Does not implicitly {@link cosmos.base.store.v1beta1.SnapshotStoreItem.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.store.v1beta1.SnapshotStoreItem
                     * @static
                     * @param {cosmos.base.store.v1beta1.ISnapshotStoreItem} m SnapshotStoreItem message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SnapshotStoreItem.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                            w.uint32(10).string(m.name);
                        return w;
                    };

                    /**
                     * Decodes a SnapshotStoreItem message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.store.v1beta1.SnapshotStoreItem
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.store.v1beta1.SnapshotStoreItem} SnapshotStoreItem
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SnapshotStoreItem.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.store.v1beta1.SnapshotStoreItem();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.name = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SnapshotStoreItem;
                })();

                v1beta1.SnapshotIAVLItem = (function () {

                    /**
                     * Properties of a SnapshotIAVLItem.
                     * @memberof cosmos.base.store.v1beta1
                     * @interface ISnapshotIAVLItem
                     * @property {Uint8Array|null} [key] SnapshotIAVLItem key
                     * @property {Uint8Array|null} [value] SnapshotIAVLItem value
                     * @property {Long|null} [version] SnapshotIAVLItem version
                     * @property {number|null} [height] SnapshotIAVLItem height
                     */

                    /**
                     * Constructs a new SnapshotIAVLItem.
                     * @memberof cosmos.base.store.v1beta1
                     * @classdesc Represents a SnapshotIAVLItem.
                     * @implements ISnapshotIAVLItem
                     * @constructor
                     * @param {cosmos.base.store.v1beta1.ISnapshotIAVLItem=} [p] Properties to set
                     */
                    function SnapshotIAVLItem(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SnapshotIAVLItem key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.store.v1beta1.SnapshotIAVLItem
                     * @instance
                     */
                    SnapshotIAVLItem.prototype.key = $util.newBuffer([]);

                    /**
                     * SnapshotIAVLItem value.
                     * @member {Uint8Array} value
                     * @memberof cosmos.base.store.v1beta1.SnapshotIAVLItem
                     * @instance
                     */
                    SnapshotIAVLItem.prototype.value = $util.newBuffer([]);

                    /**
                     * SnapshotIAVLItem version.
                     * @member {Long} version
                     * @memberof cosmos.base.store.v1beta1.SnapshotIAVLItem
                     * @instance
                     */
                    SnapshotIAVLItem.prototype.version = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * SnapshotIAVLItem height.
                     * @member {number} height
                     * @memberof cosmos.base.store.v1beta1.SnapshotIAVLItem
                     * @instance
                     */
                    SnapshotIAVLItem.prototype.height = 0;

                    /**
                     * Encodes the specified SnapshotIAVLItem message. Does not implicitly {@link cosmos.base.store.v1beta1.SnapshotIAVLItem.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.store.v1beta1.SnapshotIAVLItem
                     * @static
                     * @param {cosmos.base.store.v1beta1.ISnapshotIAVLItem} m SnapshotIAVLItem message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SnapshotIAVLItem.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                            w.uint32(10).bytes(m.key);
                        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                            w.uint32(18).bytes(m.value);
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(24).int64(m.version);
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            w.uint32(32).int32(m.height);
                        return w;
                    };

                    /**
                     * Decodes a SnapshotIAVLItem message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.store.v1beta1.SnapshotIAVLItem
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.store.v1beta1.SnapshotIAVLItem} SnapshotIAVLItem
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SnapshotIAVLItem.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.store.v1beta1.SnapshotIAVLItem();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.key = r.bytes();
                                    break;
                                case 2:
                                    m.value = r.bytes();
                                    break;
                                case 3:
                                    m.version = r.int64();
                                    break;
                                case 4:
                                    m.height = r.int32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SnapshotIAVLItem;
                })();

                return v1beta1;
            })();

            return store;
        })();

        base.tendermint = (function () {

            /**
             * Namespace tendermint.
             * @memberof cosmos.base
             * @namespace
             */
            const tendermint = {};

            tendermint.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.tendermint
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.GetValidatorSetByHeightRequest = (function () {

                    /**
                     * Properties of a GetValidatorSetByHeightRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetValidatorSetByHeightRequest
                     * @property {Long|null} [height] GetValidatorSetByHeightRequest height
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] GetValidatorSetByHeightRequest pagination
                     */

                    /**
                     * Constructs a new GetValidatorSetByHeightRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetValidatorSetByHeightRequest.
                     * @implements IGetValidatorSetByHeightRequest
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetValidatorSetByHeightRequest=} [p] Properties to set
                     */
                    function GetValidatorSetByHeightRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetValidatorSetByHeightRequest height.
                     * @member {Long} height
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest
                     * @instance
                     */
                    GetValidatorSetByHeightRequest.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * GetValidatorSetByHeightRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest
                     * @instance
                     */
                    GetValidatorSetByHeightRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified GetValidatorSetByHeightRequest message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetValidatorSetByHeightRequest} m GetValidatorSetByHeightRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetValidatorSetByHeightRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            w.uint32(8).int64(m.height);
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetValidatorSetByHeightRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest} GetValidatorSetByHeightRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetValidatorSetByHeightRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.height = r.int64();
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetValidatorSetByHeightRequest;
                })();

                v1beta1.GetValidatorSetByHeightResponse = (function () {

                    /**
                     * Properties of a GetValidatorSetByHeightResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetValidatorSetByHeightResponse
                     * @property {Long|null} [block_height] GetValidatorSetByHeightResponse block_height
                     * @property {Array.<cosmos.base.tendermint.v1beta1.IValidator>|null} [validators] GetValidatorSetByHeightResponse validators
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] GetValidatorSetByHeightResponse pagination
                     */

                    /**
                     * Constructs a new GetValidatorSetByHeightResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetValidatorSetByHeightResponse.
                     * @implements IGetValidatorSetByHeightResponse
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetValidatorSetByHeightResponse=} [p] Properties to set
                     */
                    function GetValidatorSetByHeightResponse(p) {
                        this.validators = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetValidatorSetByHeightResponse block_height.
                     * @member {Long} block_height
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse
                     * @instance
                     */
                    GetValidatorSetByHeightResponse.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * GetValidatorSetByHeightResponse validators.
                     * @member {Array.<cosmos.base.tendermint.v1beta1.IValidator>} validators
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse
                     * @instance
                     */
                    GetValidatorSetByHeightResponse.prototype.validators = $util.emptyArray;

                    /**
                     * GetValidatorSetByHeightResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse
                     * @instance
                     */
                    GetValidatorSetByHeightResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified GetValidatorSetByHeightResponse message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetValidatorSetByHeightResponse} m GetValidatorSetByHeightResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetValidatorSetByHeightResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                            w.uint32(8).int64(m.block_height);
                        if (m.validators != null && m.validators.length) {
                            for (var i = 0; i < m.validators.length; ++i)
                                $root.cosmos.base.tendermint.v1beta1.Validator.encode(m.validators[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetValidatorSetByHeightResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse} GetValidatorSetByHeightResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetValidatorSetByHeightResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.block_height = r.int64();
                                    break;
                                case 2:
                                    if (!(m.validators && m.validators.length))
                                        m.validators = [];
                                    m.validators.push($root.cosmos.base.tendermint.v1beta1.Validator.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetValidatorSetByHeightResponse;
                })();

                v1beta1.GetLatestValidatorSetRequest = (function () {

                    /**
                     * Properties of a GetLatestValidatorSetRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetLatestValidatorSetRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] GetLatestValidatorSetRequest pagination
                     */

                    /**
                     * Constructs a new GetLatestValidatorSetRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetLatestValidatorSetRequest.
                     * @implements IGetLatestValidatorSetRequest
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestValidatorSetRequest=} [p] Properties to set
                     */
                    function GetLatestValidatorSetRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetLatestValidatorSetRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest
                     * @instance
                     */
                    GetLatestValidatorSetRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified GetLatestValidatorSetRequest message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestValidatorSetRequest} m GetLatestValidatorSetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetLatestValidatorSetRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetLatestValidatorSetRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest} GetLatestValidatorSetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetLatestValidatorSetRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetLatestValidatorSetRequest;
                })();

                v1beta1.GetLatestValidatorSetResponse = (function () {

                    /**
                     * Properties of a GetLatestValidatorSetResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetLatestValidatorSetResponse
                     * @property {Long|null} [block_height] GetLatestValidatorSetResponse block_height
                     * @property {Array.<cosmos.base.tendermint.v1beta1.IValidator>|null} [validators] GetLatestValidatorSetResponse validators
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] GetLatestValidatorSetResponse pagination
                     */

                    /**
                     * Constructs a new GetLatestValidatorSetResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetLatestValidatorSetResponse.
                     * @implements IGetLatestValidatorSetResponse
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestValidatorSetResponse=} [p] Properties to set
                     */
                    function GetLatestValidatorSetResponse(p) {
                        this.validators = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetLatestValidatorSetResponse block_height.
                     * @member {Long} block_height
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse
                     * @instance
                     */
                    GetLatestValidatorSetResponse.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * GetLatestValidatorSetResponse validators.
                     * @member {Array.<cosmos.base.tendermint.v1beta1.IValidator>} validators
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse
                     * @instance
                     */
                    GetLatestValidatorSetResponse.prototype.validators = $util.emptyArray;

                    /**
                     * GetLatestValidatorSetResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse
                     * @instance
                     */
                    GetLatestValidatorSetResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified GetLatestValidatorSetResponse message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestValidatorSetResponse} m GetLatestValidatorSetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetLatestValidatorSetResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                            w.uint32(8).int64(m.block_height);
                        if (m.validators != null && m.validators.length) {
                            for (var i = 0; i < m.validators.length; ++i)
                                $root.cosmos.base.tendermint.v1beta1.Validator.encode(m.validators[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetLatestValidatorSetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse} GetLatestValidatorSetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetLatestValidatorSetResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.block_height = r.int64();
                                    break;
                                case 2:
                                    if (!(m.validators && m.validators.length))
                                        m.validators = [];
                                    m.validators.push($root.cosmos.base.tendermint.v1beta1.Validator.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetLatestValidatorSetResponse;
                })();

                v1beta1.Validator = (function () {

                    /**
                     * Properties of a Validator.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IValidator
                     * @property {string|null} [address] Validator address
                     * @property {google.protobuf.IAny|null} [pub_key] Validator pub_key
                     * @property {Long|null} [voting_power] Validator voting_power
                     * @property {Long|null} [proposer_priority] Validator proposer_priority
                     */

                    /**
                     * Constructs a new Validator.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a Validator.
                     * @implements IValidator
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IValidator=} [p] Properties to set
                     */
                    function Validator(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Validator address.
                     * @member {string} address
                     * @memberof cosmos.base.tendermint.v1beta1.Validator
                     * @instance
                     */
                    Validator.prototype.address = "";

                    /**
                     * Validator pub_key.
                     * @member {google.protobuf.IAny|null|undefined} pub_key
                     * @memberof cosmos.base.tendermint.v1beta1.Validator
                     * @instance
                     */
                    Validator.prototype.pub_key = null;

                    /**
                     * Validator voting_power.
                     * @member {Long} voting_power
                     * @memberof cosmos.base.tendermint.v1beta1.Validator
                     * @instance
                     */
                    Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * Validator proposer_priority.
                     * @member {Long} proposer_priority
                     * @memberof cosmos.base.tendermint.v1beta1.Validator
                     * @instance
                     */
                    Validator.prototype.proposer_priority = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * Encodes the specified Validator message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.Validator.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.Validator
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IValidator} m Validator message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Validator.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                            w.uint32(10).string(m.address);
                        if (m.pub_key != null && Object.hasOwnProperty.call(m, "pub_key"))
                            $root.google.protobuf.Any.encode(m.pub_key, w.uint32(18).fork()).ldelim();
                        if (m.voting_power != null && Object.hasOwnProperty.call(m, "voting_power"))
                            w.uint32(24).int64(m.voting_power);
                        if (m.proposer_priority != null && Object.hasOwnProperty.call(m, "proposer_priority"))
                            w.uint32(32).int64(m.proposer_priority);
                        return w;
                    };

                    /**
                     * Decodes a Validator message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.Validator
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.Validator} Validator
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Validator.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.Validator();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.address = r.string();
                                    break;
                                case 2:
                                    m.pub_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.voting_power = r.int64();
                                    break;
                                case 4:
                                    m.proposer_priority = r.int64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Validator;
                })();

                v1beta1.GetBlockByHeightRequest = (function () {

                    /**
                     * Properties of a GetBlockByHeightRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetBlockByHeightRequest
                     * @property {Long|null} [height] GetBlockByHeightRequest height
                     */

                    /**
                     * Constructs a new GetBlockByHeightRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetBlockByHeightRequest.
                     * @implements IGetBlockByHeightRequest
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetBlockByHeightRequest=} [p] Properties to set
                     */
                    function GetBlockByHeightRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetBlockByHeightRequest height.
                     * @member {Long} height
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest
                     * @instance
                     */
                    GetBlockByHeightRequest.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                    /**
                     * Encodes the specified GetBlockByHeightRequest message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetBlockByHeightRequest} m GetBlockByHeightRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlockByHeightRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            w.uint32(8).int64(m.height);
                        return w;
                    };

                    /**
                     * Decodes a GetBlockByHeightRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest} GetBlockByHeightRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlockByHeightRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.height = r.int64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetBlockByHeightRequest;
                })();

                v1beta1.GetBlockByHeightResponse = (function () {

                    /**
                     * Properties of a GetBlockByHeightResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetBlockByHeightResponse
                     * @property {tendermint.types.IBlockID|null} [block_id] GetBlockByHeightResponse block_id
                     * @property {tendermint.types.IBlock|null} [block] GetBlockByHeightResponse block
                     */

                    /**
                     * Constructs a new GetBlockByHeightResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetBlockByHeightResponse.
                     * @implements IGetBlockByHeightResponse
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetBlockByHeightResponse=} [p] Properties to set
                     */
                    function GetBlockByHeightResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetBlockByHeightResponse block_id.
                     * @member {tendermint.types.IBlockID|null|undefined} block_id
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse
                     * @instance
                     */
                    GetBlockByHeightResponse.prototype.block_id = null;

                    /**
                     * GetBlockByHeightResponse block.
                     * @member {tendermint.types.IBlock|null|undefined} block
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse
                     * @instance
                     */
                    GetBlockByHeightResponse.prototype.block = null;

                    /**
                     * Encodes the specified GetBlockByHeightResponse message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetBlockByHeightResponse} m GetBlockByHeightResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlockByHeightResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.block_id != null && Object.hasOwnProperty.call(m, "block_id"))
                            $root.tendermint.types.BlockID.encode(m.block_id, w.uint32(10).fork()).ldelim();
                        if (m.block != null && Object.hasOwnProperty.call(m, "block"))
                            $root.tendermint.types.Block.encode(m.block, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetBlockByHeightResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse} GetBlockByHeightResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlockByHeightResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.block = $root.tendermint.types.Block.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetBlockByHeightResponse;
                })();

                v1beta1.GetLatestBlockRequest = (function () {

                    /**
                     * Properties of a GetLatestBlockRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetLatestBlockRequest
                     */

                    /**
                     * Constructs a new GetLatestBlockRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetLatestBlockRequest.
                     * @implements IGetLatestBlockRequest
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestBlockRequest=} [p] Properties to set
                     */
                    function GetLatestBlockRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified GetLatestBlockRequest message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetLatestBlockRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestBlockRequest
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestBlockRequest} m GetLatestBlockRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetLatestBlockRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a GetLatestBlockRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestBlockRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetLatestBlockRequest} GetLatestBlockRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetLatestBlockRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetLatestBlockRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetLatestBlockRequest;
                })();

                v1beta1.GetLatestBlockResponse = (function () {

                    /**
                     * Properties of a GetLatestBlockResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetLatestBlockResponse
                     * @property {tendermint.types.IBlockID|null} [block_id] GetLatestBlockResponse block_id
                     * @property {tendermint.types.IBlock|null} [block] GetLatestBlockResponse block
                     */

                    /**
                     * Constructs a new GetLatestBlockResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetLatestBlockResponse.
                     * @implements IGetLatestBlockResponse
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestBlockResponse=} [p] Properties to set
                     */
                    function GetLatestBlockResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetLatestBlockResponse block_id.
                     * @member {tendermint.types.IBlockID|null|undefined} block_id
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestBlockResponse
                     * @instance
                     */
                    GetLatestBlockResponse.prototype.block_id = null;

                    /**
                     * GetLatestBlockResponse block.
                     * @member {tendermint.types.IBlock|null|undefined} block
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestBlockResponse
                     * @instance
                     */
                    GetLatestBlockResponse.prototype.block = null;

                    /**
                     * Encodes the specified GetLatestBlockResponse message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestBlockResponse
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetLatestBlockResponse} m GetLatestBlockResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetLatestBlockResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.block_id != null && Object.hasOwnProperty.call(m, "block_id"))
                            $root.tendermint.types.BlockID.encode(m.block_id, w.uint32(10).fork()).ldelim();
                        if (m.block != null && Object.hasOwnProperty.call(m, "block"))
                            $root.tendermint.types.Block.encode(m.block, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetLatestBlockResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetLatestBlockResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetLatestBlockResponse} GetLatestBlockResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetLatestBlockResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetLatestBlockResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.block = $root.tendermint.types.Block.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetLatestBlockResponse;
                })();

                v1beta1.GetSyncingRequest = (function () {

                    /**
                     * Properties of a GetSyncingRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetSyncingRequest
                     */

                    /**
                     * Constructs a new GetSyncingRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetSyncingRequest.
                     * @implements IGetSyncingRequest
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetSyncingRequest=} [p] Properties to set
                     */
                    function GetSyncingRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified GetSyncingRequest message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetSyncingRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetSyncingRequest
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetSyncingRequest} m GetSyncingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSyncingRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a GetSyncingRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetSyncingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetSyncingRequest} GetSyncingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSyncingRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetSyncingRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetSyncingRequest;
                })();

                v1beta1.GetSyncingResponse = (function () {

                    /**
                     * Properties of a GetSyncingResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetSyncingResponse
                     * @property {boolean|null} [syncing] GetSyncingResponse syncing
                     */

                    /**
                     * Constructs a new GetSyncingResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetSyncingResponse.
                     * @implements IGetSyncingResponse
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetSyncingResponse=} [p] Properties to set
                     */
                    function GetSyncingResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetSyncingResponse syncing.
                     * @member {boolean} syncing
                     * @memberof cosmos.base.tendermint.v1beta1.GetSyncingResponse
                     * @instance
                     */
                    GetSyncingResponse.prototype.syncing = false;

                    /**
                     * Encodes the specified GetSyncingResponse message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetSyncingResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetSyncingResponse
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetSyncingResponse} m GetSyncingResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSyncingResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.syncing != null && Object.hasOwnProperty.call(m, "syncing"))
                            w.uint32(8).bool(m.syncing);
                        return w;
                    };

                    /**
                     * Decodes a GetSyncingResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetSyncingResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetSyncingResponse} GetSyncingResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSyncingResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetSyncingResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.syncing = r.bool();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetSyncingResponse;
                })();

                v1beta1.GetNodeInfoRequest = (function () {

                    /**
                     * Properties of a GetNodeInfoRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetNodeInfoRequest
                     */

                    /**
                     * Constructs a new GetNodeInfoRequest.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetNodeInfoRequest.
                     * @implements IGetNodeInfoRequest
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetNodeInfoRequest=} [p] Properties to set
                     */
                    function GetNodeInfoRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified GetNodeInfoRequest message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetNodeInfoRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetNodeInfoRequest
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetNodeInfoRequest} m GetNodeInfoRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetNodeInfoRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a GetNodeInfoRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetNodeInfoRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetNodeInfoRequest} GetNodeInfoRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetNodeInfoRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetNodeInfoRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetNodeInfoRequest;
                })();

                v1beta1.GetNodeInfoResponse = (function () {

                    /**
                     * Properties of a GetNodeInfoResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IGetNodeInfoResponse
                     * @property {tendermint.p2p.IDefaultNodeInfo|null} [default_node_info] GetNodeInfoResponse default_node_info
                     * @property {cosmos.base.tendermint.v1beta1.IVersionInfo|null} [application_version] GetNodeInfoResponse application_version
                     */

                    /**
                     * Constructs a new GetNodeInfoResponse.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a GetNodeInfoResponse.
                     * @implements IGetNodeInfoResponse
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IGetNodeInfoResponse=} [p] Properties to set
                     */
                    function GetNodeInfoResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GetNodeInfoResponse default_node_info.
                     * @member {tendermint.p2p.IDefaultNodeInfo|null|undefined} default_node_info
                     * @memberof cosmos.base.tendermint.v1beta1.GetNodeInfoResponse
                     * @instance
                     */
                    GetNodeInfoResponse.prototype.default_node_info = null;

                    /**
                     * GetNodeInfoResponse application_version.
                     * @member {cosmos.base.tendermint.v1beta1.IVersionInfo|null|undefined} application_version
                     * @memberof cosmos.base.tendermint.v1beta1.GetNodeInfoResponse
                     * @instance
                     */
                    GetNodeInfoResponse.prototype.application_version = null;

                    /**
                     * Encodes the specified GetNodeInfoResponse message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.GetNodeInfoResponse
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IGetNodeInfoResponse} m GetNodeInfoResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetNodeInfoResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.default_node_info != null && Object.hasOwnProperty.call(m, "default_node_info"))
                            $root.tendermint.p2p.DefaultNodeInfo.encode(m.default_node_info, w.uint32(10).fork()).ldelim();
                        if (m.application_version != null && Object.hasOwnProperty.call(m, "application_version"))
                            $root.cosmos.base.tendermint.v1beta1.VersionInfo.encode(m.application_version, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GetNodeInfoResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.GetNodeInfoResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.GetNodeInfoResponse} GetNodeInfoResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetNodeInfoResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.GetNodeInfoResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.default_node_info = $root.tendermint.p2p.DefaultNodeInfo.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.application_version = $root.cosmos.base.tendermint.v1beta1.VersionInfo.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GetNodeInfoResponse;
                })();

                v1beta1.VersionInfo = (function () {

                    /**
                     * Properties of a VersionInfo.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IVersionInfo
                     * @property {string|null} [name] VersionInfo name
                     * @property {string|null} [app_name] VersionInfo app_name
                     * @property {string|null} [version] VersionInfo version
                     * @property {string|null} [git_commit] VersionInfo git_commit
                     * @property {string|null} [build_tags] VersionInfo build_tags
                     * @property {string|null} [go_version] VersionInfo go_version
                     * @property {Array.<cosmos.base.tendermint.v1beta1.IModule>|null} [build_deps] VersionInfo build_deps
                     */

                    /**
                     * Constructs a new VersionInfo.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a VersionInfo.
                     * @implements IVersionInfo
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IVersionInfo=} [p] Properties to set
                     */
                    function VersionInfo(p) {
                        this.build_deps = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * VersionInfo name.
                     * @member {string} name
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.name = "";

                    /**
                     * VersionInfo app_name.
                     * @member {string} app_name
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.app_name = "";

                    /**
                     * VersionInfo version.
                     * @member {string} version
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.version = "";

                    /**
                     * VersionInfo git_commit.
                     * @member {string} git_commit
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.git_commit = "";

                    /**
                     * VersionInfo build_tags.
                     * @member {string} build_tags
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.build_tags = "";

                    /**
                     * VersionInfo go_version.
                     * @member {string} go_version
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.go_version = "";

                    /**
                     * VersionInfo build_deps.
                     * @member {Array.<cosmos.base.tendermint.v1beta1.IModule>} build_deps
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @instance
                     */
                    VersionInfo.prototype.build_deps = $util.emptyArray;

                    /**
                     * Encodes the specified VersionInfo message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.VersionInfo.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IVersionInfo} m VersionInfo message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VersionInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                            w.uint32(10).string(m.name);
                        if (m.app_name != null && Object.hasOwnProperty.call(m, "app_name"))
                            w.uint32(18).string(m.app_name);
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(26).string(m.version);
                        if (m.git_commit != null && Object.hasOwnProperty.call(m, "git_commit"))
                            w.uint32(34).string(m.git_commit);
                        if (m.build_tags != null && Object.hasOwnProperty.call(m, "build_tags"))
                            w.uint32(42).string(m.build_tags);
                        if (m.go_version != null && Object.hasOwnProperty.call(m, "go_version"))
                            w.uint32(50).string(m.go_version);
                        if (m.build_deps != null && m.build_deps.length) {
                            for (var i = 0; i < m.build_deps.length; ++i)
                                $root.cosmos.base.tendermint.v1beta1.Module.encode(m.build_deps[i], w.uint32(58).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a VersionInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.VersionInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.VersionInfo} VersionInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VersionInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.VersionInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.name = r.string();
                                    break;
                                case 2:
                                    m.app_name = r.string();
                                    break;
                                case 3:
                                    m.version = r.string();
                                    break;
                                case 4:
                                    m.git_commit = r.string();
                                    break;
                                case 5:
                                    m.build_tags = r.string();
                                    break;
                                case 6:
                                    m.go_version = r.string();
                                    break;
                                case 7:
                                    if (!(m.build_deps && m.build_deps.length))
                                        m.build_deps = [];
                                    m.build_deps.push($root.cosmos.base.tendermint.v1beta1.Module.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return VersionInfo;
                })();

                v1beta1.Module = (function () {

                    /**
                     * Properties of a Module.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @interface IModule
                     * @property {string|null} [path] Module path
                     * @property {string|null} [version] Module version
                     * @property {string|null} [sum] Module sum
                     */

                    /**
                     * Constructs a new Module.
                     * @memberof cosmos.base.tendermint.v1beta1
                     * @classdesc Represents a Module.
                     * @implements IModule
                     * @constructor
                     * @param {cosmos.base.tendermint.v1beta1.IModule=} [p] Properties to set
                     */
                    function Module(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Module path.
                     * @member {string} path
                     * @memberof cosmos.base.tendermint.v1beta1.Module
                     * @instance
                     */
                    Module.prototype.path = "";

                    /**
                     * Module version.
                     * @member {string} version
                     * @memberof cosmos.base.tendermint.v1beta1.Module
                     * @instance
                     */
                    Module.prototype.version = "";

                    /**
                     * Module sum.
                     * @member {string} sum
                     * @memberof cosmos.base.tendermint.v1beta1.Module
                     * @instance
                     */
                    Module.prototype.sum = "";

                    /**
                     * Encodes the specified Module message. Does not implicitly {@link cosmos.base.tendermint.v1beta1.Module.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.tendermint.v1beta1.Module
                     * @static
                     * @param {cosmos.base.tendermint.v1beta1.IModule} m Module message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Module.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).string(m.path);
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(18).string(m.version);
                        if (m.sum != null && Object.hasOwnProperty.call(m, "sum"))
                            w.uint32(26).string(m.sum);
                        return w;
                    };

                    /**
                     * Decodes a Module message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.tendermint.v1beta1.Module
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.base.tendermint.v1beta1.Module} Module
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Module.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.tendermint.v1beta1.Module();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.string();
                                    break;
                                case 2:
                                    m.version = r.string();
                                    break;
                                case 3:
                                    m.sum = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Module;
                })();

                return v1beta1;
            })();

            return tendermint;
        })();

        base.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.base
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Coin = (function () {

                /**
                 * Properties of a Coin.
                 * @memberof cosmos.base.v1beta1
                 * @interface ICoin
                 * @property {string|null} [denom] Coin denom
                 * @property {string|null} [amount] Coin amount
                 */

                /**
                 * Constructs a new Coin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a Coin.
                 * @implements ICoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.ICoin=} [p] Properties to set
                 */
                function Coin(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Coin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.denom = "";

                /**
                 * Coin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.amount = "";

                /**
                 * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} m Coin message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(10).string(m.denom);
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        w.uint32(18).string(m.amount);
                    return w;
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.v1beta1.Coin();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.denom = r.string();
                                break;
                            case 2:
                                m.amount = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Coin;
            })();

            v1beta1.DecCoin = (function () {

                /**
                 * Properties of a DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecCoin
                 * @property {string|null} [denom] DecCoin denom
                 * @property {string|null} [amount] DecCoin amount
                 */

                /**
                 * Constructs a new DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecCoin.
                 * @implements IDecCoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecCoin=} [p] Properties to set
                 */
                function DecCoin(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DecCoin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.denom = "";

                /**
                 * DecCoin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.amount = "";

                /**
                 * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} m DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                        w.uint32(10).string(m.denom);
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        w.uint32(18).string(m.amount);
                    return w;
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.v1beta1.DecCoin();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.denom = r.string();
                                break;
                            case 2:
                                m.amount = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DecCoin;
            })();

            v1beta1.IntProto = (function () {

                /**
                 * Properties of an IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IIntProto
                 * @property {string|null} [int] IntProto int
                 */

                /**
                 * Constructs a new IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents an IntProto.
                 * @implements IIntProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IIntProto=} [p] Properties to set
                 */
                function IntProto(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * IntProto int.
                 * @member {string} int
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 */
                IntProto.prototype.int = "";

                /**
                 * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} m IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.int != null && Object.hasOwnProperty.call(m, "int"))
                        w.uint32(10).string(m.int);
                    return w;
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.v1beta1.IntProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.int = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return IntProto;
            })();

            v1beta1.DecProto = (function () {

                /**
                 * Properties of a DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecProto
                 * @property {string|null} [dec] DecProto dec
                 */

                /**
                 * Constructs a new DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecProto.
                 * @implements IDecProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecProto=} [p] Properties to set
                 */
                function DecProto(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DecProto dec.
                 * @member {string} dec
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 */
                DecProto.prototype.dec = "";

                /**
                 * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} m DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.dec != null && Object.hasOwnProperty.call(m, "dec"))
                        w.uint32(10).string(m.dec);
                    return w;
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.base.v1beta1.DecProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.dec = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DecProto;
            })();

            return v1beta1;
        })();

        return base;
    })();

    cosmos.capability = (function () {

        /**
         * Namespace capability.
         * @memberof cosmos
         * @namespace
         */
        const capability = {};

        capability.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.capability
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.GenesisOwners = (function () {

                /**
                 * Properties of a GenesisOwners.
                 * @memberof cosmos.capability.v1beta1
                 * @interface IGenesisOwners
                 * @property {Long|null} [index] GenesisOwners index
                 * @property {cosmos.capability.v1beta1.ICapabilityOwners|null} [index_owners] GenesisOwners index_owners
                 */

                /**
                 * Constructs a new GenesisOwners.
                 * @memberof cosmos.capability.v1beta1
                 * @classdesc Represents a GenesisOwners.
                 * @implements IGenesisOwners
                 * @constructor
                 * @param {cosmos.capability.v1beta1.IGenesisOwners=} [p] Properties to set
                 */
                function GenesisOwners(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisOwners index.
                 * @member {Long} index
                 * @memberof cosmos.capability.v1beta1.GenesisOwners
                 * @instance
                 */
                GenesisOwners.prototype.index = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * GenesisOwners index_owners.
                 * @member {cosmos.capability.v1beta1.ICapabilityOwners|null|undefined} index_owners
                 * @memberof cosmos.capability.v1beta1.GenesisOwners
                 * @instance
                 */
                GenesisOwners.prototype.index_owners = null;

                /**
                 * Encodes the specified GenesisOwners message. Does not implicitly {@link cosmos.capability.v1beta1.GenesisOwners.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.capability.v1beta1.GenesisOwners
                 * @static
                 * @param {cosmos.capability.v1beta1.IGenesisOwners} m GenesisOwners message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisOwners.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                        w.uint32(8).uint64(m.index);
                    if (m.index_owners != null && Object.hasOwnProperty.call(m, "index_owners"))
                        $root.cosmos.capability.v1beta1.CapabilityOwners.encode(m.index_owners, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GenesisOwners message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.capability.v1beta1.GenesisOwners
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.capability.v1beta1.GenesisOwners} GenesisOwners
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisOwners.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.capability.v1beta1.GenesisOwners();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.index = r.uint64();
                                break;
                            case 2:
                                m.index_owners = $root.cosmos.capability.v1beta1.CapabilityOwners.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisOwners;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.capability.v1beta1
                 * @interface IGenesisState
                 * @property {Long|null} [index] GenesisState index
                 * @property {Array.<cosmos.capability.v1beta1.IGenesisOwners>|null} [owners] GenesisState owners
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.capability.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.capability.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.owners = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState index.
                 * @member {Long} index
                 * @memberof cosmos.capability.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.index = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * GenesisState owners.
                 * @member {Array.<cosmos.capability.v1beta1.IGenesisOwners>} owners
                 * @memberof cosmos.capability.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.owners = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.capability.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.capability.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.capability.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                        w.uint32(8).uint64(m.index);
                    if (m.owners != null && m.owners.length) {
                        for (var i = 0; i < m.owners.length; ++i)
                            $root.cosmos.capability.v1beta1.GenesisOwners.encode(m.owners[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.capability.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.capability.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.capability.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.index = r.uint64();
                                break;
                            case 2:
                                if (!(m.owners && m.owners.length))
                                    m.owners = [];
                                m.owners.push($root.cosmos.capability.v1beta1.GenesisOwners.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.Capability = (function () {

                /**
                 * Properties of a Capability.
                 * @memberof cosmos.capability.v1beta1
                 * @interface ICapability
                 * @property {Long|null} [index] Capability index
                 */

                /**
                 * Constructs a new Capability.
                 * @memberof cosmos.capability.v1beta1
                 * @classdesc Represents a Capability.
                 * @implements ICapability
                 * @constructor
                 * @param {cosmos.capability.v1beta1.ICapability=} [p] Properties to set
                 */
                function Capability(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Capability index.
                 * @member {Long} index
                 * @memberof cosmos.capability.v1beta1.Capability
                 * @instance
                 */
                Capability.prototype.index = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified Capability message. Does not implicitly {@link cosmos.capability.v1beta1.Capability.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.capability.v1beta1.Capability
                 * @static
                 * @param {cosmos.capability.v1beta1.ICapability} m Capability message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Capability.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                        w.uint32(8).uint64(m.index);
                    return w;
                };

                /**
                 * Decodes a Capability message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.capability.v1beta1.Capability
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.capability.v1beta1.Capability} Capability
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Capability.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.capability.v1beta1.Capability();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.index = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Capability;
            })();

            v1beta1.Owner = (function () {

                /**
                 * Properties of an Owner.
                 * @memberof cosmos.capability.v1beta1
                 * @interface IOwner
                 * @property {string|null} [module] Owner module
                 * @property {string|null} [name] Owner name
                 */

                /**
                 * Constructs a new Owner.
                 * @memberof cosmos.capability.v1beta1
                 * @classdesc Represents an Owner.
                 * @implements IOwner
                 * @constructor
                 * @param {cosmos.capability.v1beta1.IOwner=} [p] Properties to set
                 */
                function Owner(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Owner module.
                 * @member {string} module
                 * @memberof cosmos.capability.v1beta1.Owner
                 * @instance
                 */
                Owner.prototype.module = "";

                /**
                 * Owner name.
                 * @member {string} name
                 * @memberof cosmos.capability.v1beta1.Owner
                 * @instance
                 */
                Owner.prototype.name = "";

                /**
                 * Encodes the specified Owner message. Does not implicitly {@link cosmos.capability.v1beta1.Owner.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.capability.v1beta1.Owner
                 * @static
                 * @param {cosmos.capability.v1beta1.IOwner} m Owner message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Owner.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.module != null && Object.hasOwnProperty.call(m, "module"))
                        w.uint32(10).string(m.module);
                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                        w.uint32(18).string(m.name);
                    return w;
                };

                /**
                 * Decodes an Owner message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.capability.v1beta1.Owner
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.capability.v1beta1.Owner} Owner
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Owner.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.capability.v1beta1.Owner();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.module = r.string();
                                break;
                            case 2:
                                m.name = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Owner;
            })();

            v1beta1.CapabilityOwners = (function () {

                /**
                 * Properties of a CapabilityOwners.
                 * @memberof cosmos.capability.v1beta1
                 * @interface ICapabilityOwners
                 * @property {Array.<cosmos.capability.v1beta1.IOwner>|null} [owners] CapabilityOwners owners
                 */

                /**
                 * Constructs a new CapabilityOwners.
                 * @memberof cosmos.capability.v1beta1
                 * @classdesc Represents a CapabilityOwners.
                 * @implements ICapabilityOwners
                 * @constructor
                 * @param {cosmos.capability.v1beta1.ICapabilityOwners=} [p] Properties to set
                 */
                function CapabilityOwners(p) {
                    this.owners = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CapabilityOwners owners.
                 * @member {Array.<cosmos.capability.v1beta1.IOwner>} owners
                 * @memberof cosmos.capability.v1beta1.CapabilityOwners
                 * @instance
                 */
                CapabilityOwners.prototype.owners = $util.emptyArray;

                /**
                 * Encodes the specified CapabilityOwners message. Does not implicitly {@link cosmos.capability.v1beta1.CapabilityOwners.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.capability.v1beta1.CapabilityOwners
                 * @static
                 * @param {cosmos.capability.v1beta1.ICapabilityOwners} m CapabilityOwners message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CapabilityOwners.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.owners != null && m.owners.length) {
                        for (var i = 0; i < m.owners.length; ++i)
                            $root.cosmos.capability.v1beta1.Owner.encode(m.owners[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a CapabilityOwners message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.capability.v1beta1.CapabilityOwners
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.capability.v1beta1.CapabilityOwners} CapabilityOwners
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CapabilityOwners.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.capability.v1beta1.CapabilityOwners();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.owners && m.owners.length))
                                    m.owners = [];
                                m.owners.push($root.cosmos.capability.v1beta1.Owner.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CapabilityOwners;
            })();

            return v1beta1;
        })();

        return capability;
    })();

    cosmos.crisis = (function () {

        /**
         * Namespace crisis.
         * @memberof cosmos
         * @namespace
         */
        const crisis = {};

        crisis.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.crisis
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.crisis.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.base.v1beta1.ICoin|null} [constant_fee] GenesisState constant_fee
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.crisis.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.crisis.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState constant_fee.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} constant_fee
                 * @memberof cosmos.crisis.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.constant_fee = null;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.crisis.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crisis.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.crisis.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.constant_fee != null && Object.hasOwnProperty.call(m, "constant_fee"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.constant_fee, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crisis.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crisis.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crisis.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 3:
                                m.constant_fee = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.MsgVerifyInvariant = (function () {

                /**
                 * Properties of a MsgVerifyInvariant.
                 * @memberof cosmos.crisis.v1beta1
                 * @interface IMsgVerifyInvariant
                 * @property {string|null} [sender] MsgVerifyInvariant sender
                 * @property {string|null} [invariant_module_name] MsgVerifyInvariant invariant_module_name
                 * @property {string|null} [invariant_route] MsgVerifyInvariant invariant_route
                 */

                /**
                 * Constructs a new MsgVerifyInvariant.
                 * @memberof cosmos.crisis.v1beta1
                 * @classdesc Represents a MsgVerifyInvariant.
                 * @implements IMsgVerifyInvariant
                 * @constructor
                 * @param {cosmos.crisis.v1beta1.IMsgVerifyInvariant=} [p] Properties to set
                 */
                function MsgVerifyInvariant(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgVerifyInvariant sender.
                 * @member {string} sender
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariant
                 * @instance
                 */
                MsgVerifyInvariant.prototype.sender = "";

                /**
                 * MsgVerifyInvariant invariant_module_name.
                 * @member {string} invariant_module_name
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariant
                 * @instance
                 */
                MsgVerifyInvariant.prototype.invariant_module_name = "";

                /**
                 * MsgVerifyInvariant invariant_route.
                 * @member {string} invariant_route
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariant
                 * @instance
                 */
                MsgVerifyInvariant.prototype.invariant_route = "";

                /**
                 * Encodes the specified MsgVerifyInvariant message. Does not implicitly {@link cosmos.crisis.v1beta1.MsgVerifyInvariant.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariant
                 * @static
                 * @param {cosmos.crisis.v1beta1.IMsgVerifyInvariant} m MsgVerifyInvariant message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgVerifyInvariant.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                        w.uint32(10).string(m.sender);
                    if (m.invariant_module_name != null && Object.hasOwnProperty.call(m, "invariant_module_name"))
                        w.uint32(18).string(m.invariant_module_name);
                    if (m.invariant_route != null && Object.hasOwnProperty.call(m, "invariant_route"))
                        w.uint32(26).string(m.invariant_route);
                    return w;
                };

                /**
                 * Decodes a MsgVerifyInvariant message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariant
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crisis.v1beta1.MsgVerifyInvariant} MsgVerifyInvariant
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgVerifyInvariant.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crisis.v1beta1.MsgVerifyInvariant();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.sender = r.string();
                                break;
                            case 2:
                                m.invariant_module_name = r.string();
                                break;
                            case 3:
                                m.invariant_route = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgVerifyInvariant;
            })();

            v1beta1.MsgVerifyInvariantResponse = (function () {

                /**
                 * Properties of a MsgVerifyInvariantResponse.
                 * @memberof cosmos.crisis.v1beta1
                 * @interface IMsgVerifyInvariantResponse
                 */

                /**
                 * Constructs a new MsgVerifyInvariantResponse.
                 * @memberof cosmos.crisis.v1beta1
                 * @classdesc Represents a MsgVerifyInvariantResponse.
                 * @implements IMsgVerifyInvariantResponse
                 * @constructor
                 * @param {cosmos.crisis.v1beta1.IMsgVerifyInvariantResponse=} [p] Properties to set
                 */
                function MsgVerifyInvariantResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgVerifyInvariantResponse message. Does not implicitly {@link cosmos.crisis.v1beta1.MsgVerifyInvariantResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariantResponse
                 * @static
                 * @param {cosmos.crisis.v1beta1.IMsgVerifyInvariantResponse} m MsgVerifyInvariantResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgVerifyInvariantResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgVerifyInvariantResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crisis.v1beta1.MsgVerifyInvariantResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crisis.v1beta1.MsgVerifyInvariantResponse} MsgVerifyInvariantResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgVerifyInvariantResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crisis.v1beta1.MsgVerifyInvariantResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgVerifyInvariantResponse;
            })();

            return v1beta1;
        })();

        return crisis;
    })();

    cosmos.crypto = (function () {

        /**
         * Namespace crypto.
         * @memberof cosmos
         * @namespace
         */
        const crypto = {};

        crypto.ed25519 = (function () {

            /**
             * Namespace ed25519.
             * @memberof cosmos.crypto
             * @namespace
             */
            const ed25519 = {};

            ed25519.PubKey = (function () {

                /**
                 * Properties of a PubKey.
                 * @memberof cosmos.crypto.ed25519
                 * @interface IPubKey
                 * @property {Uint8Array|null} [key] PubKey key
                 */

                /**
                 * Constructs a new PubKey.
                 * @memberof cosmos.crypto.ed25519
                 * @classdesc Represents a PubKey.
                 * @implements IPubKey
                 * @constructor
                 * @param {cosmos.crypto.ed25519.IPubKey=} [p] Properties to set
                 */
                function PubKey(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * PubKey key.
                 * @member {Uint8Array} key
                 * @memberof cosmos.crypto.ed25519.PubKey
                 * @instance
                 */
                PubKey.prototype.key = $util.newBuffer([]);

                /**
                 * Encodes the specified PubKey message. Does not implicitly {@link cosmos.crypto.ed25519.PubKey.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crypto.ed25519.PubKey
                 * @static
                 * @param {cosmos.crypto.ed25519.IPubKey} m PubKey message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PubKey.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(10).bytes(m.key);
                    return w;
                };

                /**
                 * Decodes a PubKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crypto.ed25519.PubKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crypto.ed25519.PubKey} PubKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PubKey.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.ed25519.PubKey();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.key = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return PubKey;
            })();

            ed25519.PrivKey = (function () {

                /**
                 * Properties of a PrivKey.
                 * @memberof cosmos.crypto.ed25519
                 * @interface IPrivKey
                 * @property {Uint8Array|null} [key] PrivKey key
                 */

                /**
                 * Constructs a new PrivKey.
                 * @memberof cosmos.crypto.ed25519
                 * @classdesc Represents a PrivKey.
                 * @implements IPrivKey
                 * @constructor
                 * @param {cosmos.crypto.ed25519.IPrivKey=} [p] Properties to set
                 */
                function PrivKey(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * PrivKey key.
                 * @member {Uint8Array} key
                 * @memberof cosmos.crypto.ed25519.PrivKey
                 * @instance
                 */
                PrivKey.prototype.key = $util.newBuffer([]);

                /**
                 * Encodes the specified PrivKey message. Does not implicitly {@link cosmos.crypto.ed25519.PrivKey.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crypto.ed25519.PrivKey
                 * @static
                 * @param {cosmos.crypto.ed25519.IPrivKey} m PrivKey message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrivKey.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(10).bytes(m.key);
                    return w;
                };

                /**
                 * Decodes a PrivKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crypto.ed25519.PrivKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crypto.ed25519.PrivKey} PrivKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrivKey.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.ed25519.PrivKey();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.key = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return PrivKey;
            })();

            return ed25519;
        })();

        crypto.multisig = (function () {

            /**
             * Namespace multisig.
             * @memberof cosmos.crypto
             * @namespace
             */
            const multisig = {};

            multisig.LegacyAminoPubKey = (function () {

                /**
                 * Properties of a LegacyAminoPubKey.
                 * @memberof cosmos.crypto.multisig
                 * @interface ILegacyAminoPubKey
                 * @property {number|null} [threshold] LegacyAminoPubKey threshold
                 * @property {Array.<google.protobuf.IAny>|null} [public_keys] LegacyAminoPubKey public_keys
                 */

                /**
                 * Constructs a new LegacyAminoPubKey.
                 * @memberof cosmos.crypto.multisig
                 * @classdesc Represents a LegacyAminoPubKey.
                 * @implements ILegacyAminoPubKey
                 * @constructor
                 * @param {cosmos.crypto.multisig.ILegacyAminoPubKey=} [p] Properties to set
                 */
                function LegacyAminoPubKey(p) {
                    this.public_keys = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * LegacyAminoPubKey threshold.
                 * @member {number} threshold
                 * @memberof cosmos.crypto.multisig.LegacyAminoPubKey
                 * @instance
                 */
                LegacyAminoPubKey.prototype.threshold = 0;

                /**
                 * LegacyAminoPubKey public_keys.
                 * @member {Array.<google.protobuf.IAny>} public_keys
                 * @memberof cosmos.crypto.multisig.LegacyAminoPubKey
                 * @instance
                 */
                LegacyAminoPubKey.prototype.public_keys = $util.emptyArray;

                /**
                 * Encodes the specified LegacyAminoPubKey message. Does not implicitly {@link cosmos.crypto.multisig.LegacyAminoPubKey.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crypto.multisig.LegacyAminoPubKey
                 * @static
                 * @param {cosmos.crypto.multisig.ILegacyAminoPubKey} m LegacyAminoPubKey message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LegacyAminoPubKey.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.threshold != null && Object.hasOwnProperty.call(m, "threshold"))
                        w.uint32(8).uint32(m.threshold);
                    if (m.public_keys != null && m.public_keys.length) {
                        for (var i = 0; i < m.public_keys.length; ++i)
                            $root.google.protobuf.Any.encode(m.public_keys[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a LegacyAminoPubKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crypto.multisig.LegacyAminoPubKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crypto.multisig.LegacyAminoPubKey} LegacyAminoPubKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LegacyAminoPubKey.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.multisig.LegacyAminoPubKey();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.threshold = r.uint32();
                                break;
                            case 2:
                                if (!(m.public_keys && m.public_keys.length))
                                    m.public_keys = [];
                                m.public_keys.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return LegacyAminoPubKey;
            })();

            multisig.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.crypto.multisig
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.MultiSignature = (function () {

                    /**
                     * Properties of a MultiSignature.
                     * @memberof cosmos.crypto.multisig.v1beta1
                     * @interface IMultiSignature
                     * @property {Array.<Uint8Array>|null} [signatures] MultiSignature signatures
                     */

                    /**
                     * Constructs a new MultiSignature.
                     * @memberof cosmos.crypto.multisig.v1beta1
                     * @classdesc Represents a MultiSignature.
                     * @implements IMultiSignature
                     * @constructor
                     * @param {cosmos.crypto.multisig.v1beta1.IMultiSignature=} [p] Properties to set
                     */
                    function MultiSignature(p) {
                        this.signatures = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MultiSignature signatures.
                     * @member {Array.<Uint8Array>} signatures
                     * @memberof cosmos.crypto.multisig.v1beta1.MultiSignature
                     * @instance
                     */
                    MultiSignature.prototype.signatures = $util.emptyArray;

                    /**
                     * Encodes the specified MultiSignature message. Does not implicitly {@link cosmos.crypto.multisig.v1beta1.MultiSignature.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.crypto.multisig.v1beta1.MultiSignature
                     * @static
                     * @param {cosmos.crypto.multisig.v1beta1.IMultiSignature} m MultiSignature message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiSignature.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.signatures != null && m.signatures.length) {
                            for (var i = 0; i < m.signatures.length; ++i)
                                w.uint32(10).bytes(m.signatures[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a MultiSignature message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.crypto.multisig.v1beta1.MultiSignature
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.crypto.multisig.v1beta1.MultiSignature} MultiSignature
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiSignature.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.multisig.v1beta1.MultiSignature();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.signatures && m.signatures.length))
                                        m.signatures = [];
                                    m.signatures.push(r.bytes());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MultiSignature;
                })();

                v1beta1.CompactBitArray = (function () {

                    /**
                     * Properties of a CompactBitArray.
                     * @memberof cosmos.crypto.multisig.v1beta1
                     * @interface ICompactBitArray
                     * @property {number|null} [extra_bits_stored] CompactBitArray extra_bits_stored
                     * @property {Uint8Array|null} [elems] CompactBitArray elems
                     */

                    /**
                     * Constructs a new CompactBitArray.
                     * @memberof cosmos.crypto.multisig.v1beta1
                     * @classdesc Represents a CompactBitArray.
                     * @implements ICompactBitArray
                     * @constructor
                     * @param {cosmos.crypto.multisig.v1beta1.ICompactBitArray=} [p] Properties to set
                     */
                    function CompactBitArray(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * CompactBitArray extra_bits_stored.
                     * @member {number} extra_bits_stored
                     * @memberof cosmos.crypto.multisig.v1beta1.CompactBitArray
                     * @instance
                     */
                    CompactBitArray.prototype.extra_bits_stored = 0;

                    /**
                     * CompactBitArray elems.
                     * @member {Uint8Array} elems
                     * @memberof cosmos.crypto.multisig.v1beta1.CompactBitArray
                     * @instance
                     */
                    CompactBitArray.prototype.elems = $util.newBuffer([]);

                    /**
                     * Encodes the specified CompactBitArray message. Does not implicitly {@link cosmos.crypto.multisig.v1beta1.CompactBitArray.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.crypto.multisig.v1beta1.CompactBitArray
                     * @static
                     * @param {cosmos.crypto.multisig.v1beta1.ICompactBitArray} m CompactBitArray message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompactBitArray.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.extra_bits_stored != null && Object.hasOwnProperty.call(m, "extra_bits_stored"))
                            w.uint32(8).uint32(m.extra_bits_stored);
                        if (m.elems != null && Object.hasOwnProperty.call(m, "elems"))
                            w.uint32(18).bytes(m.elems);
                        return w;
                    };

                    /**
                     * Decodes a CompactBitArray message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.crypto.multisig.v1beta1.CompactBitArray
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.crypto.multisig.v1beta1.CompactBitArray} CompactBitArray
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompactBitArray.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.multisig.v1beta1.CompactBitArray();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.extra_bits_stored = r.uint32();
                                    break;
                                case 2:
                                    m.elems = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return CompactBitArray;
                })();

                return v1beta1;
            })();

            return multisig;
        })();

        crypto.secp256k1 = (function () {

            /**
             * Namespace secp256k1.
             * @memberof cosmos.crypto
             * @namespace
             */
            const secp256k1 = {};

            secp256k1.PubKey = (function () {

                /**
                 * Properties of a PubKey.
                 * @memberof cosmos.crypto.secp256k1
                 * @interface IPubKey
                 * @property {Uint8Array|null} [key] PubKey key
                 */

                /**
                 * Constructs a new PubKey.
                 * @memberof cosmos.crypto.secp256k1
                 * @classdesc Represents a PubKey.
                 * @implements IPubKey
                 * @constructor
                 * @param {cosmos.crypto.secp256k1.IPubKey=} [p] Properties to set
                 */
                function PubKey(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * PubKey key.
                 * @member {Uint8Array} key
                 * @memberof cosmos.crypto.secp256k1.PubKey
                 * @instance
                 */
                PubKey.prototype.key = $util.newBuffer([]);

                /**
                 * Encodes the specified PubKey message. Does not implicitly {@link cosmos.crypto.secp256k1.PubKey.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crypto.secp256k1.PubKey
                 * @static
                 * @param {cosmos.crypto.secp256k1.IPubKey} m PubKey message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PubKey.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(10).bytes(m.key);
                    return w;
                };

                /**
                 * Decodes a PubKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crypto.secp256k1.PubKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crypto.secp256k1.PubKey} PubKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PubKey.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.secp256k1.PubKey();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.key = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return PubKey;
            })();

            secp256k1.PrivKey = (function () {

                /**
                 * Properties of a PrivKey.
                 * @memberof cosmos.crypto.secp256k1
                 * @interface IPrivKey
                 * @property {Uint8Array|null} [key] PrivKey key
                 */

                /**
                 * Constructs a new PrivKey.
                 * @memberof cosmos.crypto.secp256k1
                 * @classdesc Represents a PrivKey.
                 * @implements IPrivKey
                 * @constructor
                 * @param {cosmos.crypto.secp256k1.IPrivKey=} [p] Properties to set
                 */
                function PrivKey(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * PrivKey key.
                 * @member {Uint8Array} key
                 * @memberof cosmos.crypto.secp256k1.PrivKey
                 * @instance
                 */
                PrivKey.prototype.key = $util.newBuffer([]);

                /**
                 * Encodes the specified PrivKey message. Does not implicitly {@link cosmos.crypto.secp256k1.PrivKey.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.crypto.secp256k1.PrivKey
                 * @static
                 * @param {cosmos.crypto.secp256k1.IPrivKey} m PrivKey message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrivKey.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(10).bytes(m.key);
                    return w;
                };

                /**
                 * Decodes a PrivKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.crypto.secp256k1.PrivKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.crypto.secp256k1.PrivKey} PrivKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrivKey.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.crypto.secp256k1.PrivKey();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.key = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return PrivKey;
            })();

            return secp256k1;
        })();

        return crypto;
    })();

    cosmos.distribution = (function () {

        /**
         * Namespace distribution.
         * @memberof cosmos
         * @namespace
         */
        const distribution = {};

        distribution.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.distribution
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.distribution.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {cosmos.distribution.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.distribution.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.distribution.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.distribution.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.QueryValidatorOutstandingRewardsRequest = (function () {

                /**
                 * Properties of a QueryValidatorOutstandingRewardsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryValidatorOutstandingRewardsRequest
                 * @property {string|null} [validator_address] QueryValidatorOutstandingRewardsRequest validator_address
                 */

                /**
                 * Constructs a new QueryValidatorOutstandingRewardsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryValidatorOutstandingRewardsRequest.
                 * @implements IQueryValidatorOutstandingRewardsRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorOutstandingRewardsRequest=} [p] Properties to set
                 */
                function QueryValidatorOutstandingRewardsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorOutstandingRewardsRequest validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest
                 * @instance
                 */
                QueryValidatorOutstandingRewardsRequest.prototype.validator_address = "";

                /**
                 * Encodes the specified QueryValidatorOutstandingRewardsRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorOutstandingRewardsRequest} m QueryValidatorOutstandingRewardsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorOutstandingRewardsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a QueryValidatorOutstandingRewardsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest} QueryValidatorOutstandingRewardsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorOutstandingRewardsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorOutstandingRewardsRequest;
            })();

            v1beta1.QueryValidatorOutstandingRewardsResponse = (function () {

                /**
                 * Properties of a QueryValidatorOutstandingRewardsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryValidatorOutstandingRewardsResponse
                 * @property {cosmos.distribution.v1beta1.IValidatorOutstandingRewards|null} [rewards] QueryValidatorOutstandingRewardsResponse rewards
                 */

                /**
                 * Constructs a new QueryValidatorOutstandingRewardsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryValidatorOutstandingRewardsResponse.
                 * @implements IQueryValidatorOutstandingRewardsResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorOutstandingRewardsResponse=} [p] Properties to set
                 */
                function QueryValidatorOutstandingRewardsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorOutstandingRewardsResponse rewards.
                 * @member {cosmos.distribution.v1beta1.IValidatorOutstandingRewards|null|undefined} rewards
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse
                 * @instance
                 */
                QueryValidatorOutstandingRewardsResponse.prototype.rewards = null;

                /**
                 * Encodes the specified QueryValidatorOutstandingRewardsResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorOutstandingRewardsResponse} m QueryValidatorOutstandingRewardsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorOutstandingRewardsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.rewards != null && Object.hasOwnProperty.call(m, "rewards"))
                        $root.cosmos.distribution.v1beta1.ValidatorOutstandingRewards.encode(m.rewards, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorOutstandingRewardsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse} QueryValidatorOutstandingRewardsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorOutstandingRewardsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.rewards = $root.cosmos.distribution.v1beta1.ValidatorOutstandingRewards.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorOutstandingRewardsResponse;
            })();

            v1beta1.QueryValidatorCommissionRequest = (function () {

                /**
                 * Properties of a QueryValidatorCommissionRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryValidatorCommissionRequest
                 * @property {string|null} [validator_address] QueryValidatorCommissionRequest validator_address
                 */

                /**
                 * Constructs a new QueryValidatorCommissionRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryValidatorCommissionRequest.
                 * @implements IQueryValidatorCommissionRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorCommissionRequest=} [p] Properties to set
                 */
                function QueryValidatorCommissionRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorCommissionRequest validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorCommissionRequest
                 * @instance
                 */
                QueryValidatorCommissionRequest.prototype.validator_address = "";

                /**
                 * Encodes the specified QueryValidatorCommissionRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryValidatorCommissionRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorCommissionRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorCommissionRequest} m QueryValidatorCommissionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorCommissionRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a QueryValidatorCommissionRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorCommissionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryValidatorCommissionRequest} QueryValidatorCommissionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorCommissionRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryValidatorCommissionRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorCommissionRequest;
            })();

            v1beta1.QueryValidatorCommissionResponse = (function () {

                /**
                 * Properties of a QueryValidatorCommissionResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryValidatorCommissionResponse
                 * @property {cosmos.distribution.v1beta1.IValidatorAccumulatedCommission|null} [commission] QueryValidatorCommissionResponse commission
                 */

                /**
                 * Constructs a new QueryValidatorCommissionResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryValidatorCommissionResponse.
                 * @implements IQueryValidatorCommissionResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorCommissionResponse=} [p] Properties to set
                 */
                function QueryValidatorCommissionResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorCommissionResponse commission.
                 * @member {cosmos.distribution.v1beta1.IValidatorAccumulatedCommission|null|undefined} commission
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorCommissionResponse
                 * @instance
                 */
                QueryValidatorCommissionResponse.prototype.commission = null;

                /**
                 * Encodes the specified QueryValidatorCommissionResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryValidatorCommissionResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorCommissionResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorCommissionResponse} m QueryValidatorCommissionResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorCommissionResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.commission != null && Object.hasOwnProperty.call(m, "commission"))
                        $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.encode(m.commission, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorCommissionResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorCommissionResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryValidatorCommissionResponse} QueryValidatorCommissionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorCommissionResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryValidatorCommissionResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.commission = $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorCommissionResponse;
            })();

            v1beta1.QueryValidatorSlashesRequest = (function () {

                /**
                 * Properties of a QueryValidatorSlashesRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryValidatorSlashesRequest
                 * @property {string|null} [validator_address] QueryValidatorSlashesRequest validator_address
                 * @property {Long|null} [starting_height] QueryValidatorSlashesRequest starting_height
                 * @property {Long|null} [ending_height] QueryValidatorSlashesRequest ending_height
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryValidatorSlashesRequest pagination
                 */

                /**
                 * Constructs a new QueryValidatorSlashesRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryValidatorSlashesRequest.
                 * @implements IQueryValidatorSlashesRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorSlashesRequest=} [p] Properties to set
                 */
                function QueryValidatorSlashesRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorSlashesRequest validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesRequest
                 * @instance
                 */
                QueryValidatorSlashesRequest.prototype.validator_address = "";

                /**
                 * QueryValidatorSlashesRequest starting_height.
                 * @member {Long} starting_height
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesRequest
                 * @instance
                 */
                QueryValidatorSlashesRequest.prototype.starting_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryValidatorSlashesRequest ending_height.
                 * @member {Long} ending_height
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesRequest
                 * @instance
                 */
                QueryValidatorSlashesRequest.prototype.ending_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryValidatorSlashesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesRequest
                 * @instance
                 */
                QueryValidatorSlashesRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorSlashesRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryValidatorSlashesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorSlashesRequest} m QueryValidatorSlashesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorSlashesRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.starting_height != null && Object.hasOwnProperty.call(m, "starting_height"))
                        w.uint32(16).uint64(m.starting_height);
                    if (m.ending_height != null && Object.hasOwnProperty.call(m, "ending_height"))
                        w.uint32(24).uint64(m.ending_height);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorSlashesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryValidatorSlashesRequest} QueryValidatorSlashesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorSlashesRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryValidatorSlashesRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                m.starting_height = r.uint64();
                                break;
                            case 3:
                                m.ending_height = r.uint64();
                                break;
                            case 4:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorSlashesRequest;
            })();

            v1beta1.QueryValidatorSlashesResponse = (function () {

                /**
                 * Properties of a QueryValidatorSlashesResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryValidatorSlashesResponse
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorSlashEvent>|null} [slashes] QueryValidatorSlashesResponse slashes
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryValidatorSlashesResponse pagination
                 */

                /**
                 * Constructs a new QueryValidatorSlashesResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryValidatorSlashesResponse.
                 * @implements IQueryValidatorSlashesResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorSlashesResponse=} [p] Properties to set
                 */
                function QueryValidatorSlashesResponse(p) {
                    this.slashes = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorSlashesResponse slashes.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorSlashEvent>} slashes
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesResponse
                 * @instance
                 */
                QueryValidatorSlashesResponse.prototype.slashes = $util.emptyArray;

                /**
                 * QueryValidatorSlashesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesResponse
                 * @instance
                 */
                QueryValidatorSlashesResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorSlashesResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryValidatorSlashesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryValidatorSlashesResponse} m QueryValidatorSlashesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorSlashesResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.slashes != null && m.slashes.length) {
                        for (var i = 0; i < m.slashes.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorSlashEvent.encode(m.slashes[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorSlashesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryValidatorSlashesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryValidatorSlashesResponse} QueryValidatorSlashesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorSlashesResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryValidatorSlashesResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.slashes && m.slashes.length))
                                    m.slashes = [];
                                m.slashes.push($root.cosmos.distribution.v1beta1.ValidatorSlashEvent.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorSlashesResponse;
            })();

            v1beta1.QueryDelegationRewardsRequest = (function () {

                /**
                 * Properties of a QueryDelegationRewardsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegationRewardsRequest
                 * @property {string|null} [delegator_address] QueryDelegationRewardsRequest delegator_address
                 * @property {string|null} [validator_address] QueryDelegationRewardsRequest validator_address
                 */

                /**
                 * Constructs a new QueryDelegationRewardsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegationRewardsRequest.
                 * @implements IQueryDelegationRewardsRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationRewardsRequest=} [p] Properties to set
                 */
                function QueryDelegationRewardsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegationRewardsRequest delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsRequest
                 * @instance
                 */
                QueryDelegationRewardsRequest.prototype.delegator_address = "";

                /**
                 * QueryDelegationRewardsRequest validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsRequest
                 * @instance
                 */
                QueryDelegationRewardsRequest.prototype.validator_address = "";

                /**
                 * Encodes the specified QueryDelegationRewardsRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegationRewardsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationRewardsRequest} m QueryDelegationRewardsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegationRewardsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a QueryDelegationRewardsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegationRewardsRequest} QueryDelegationRewardsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegationRewardsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegationRewardsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegationRewardsRequest;
            })();

            v1beta1.QueryDelegationRewardsResponse = (function () {

                /**
                 * Properties of a QueryDelegationRewardsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegationRewardsResponse
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [rewards] QueryDelegationRewardsResponse rewards
                 */

                /**
                 * Constructs a new QueryDelegationRewardsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegationRewardsResponse.
                 * @implements IQueryDelegationRewardsResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationRewardsResponse=} [p] Properties to set
                 */
                function QueryDelegationRewardsResponse(p) {
                    this.rewards = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegationRewardsResponse rewards.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} rewards
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsResponse
                 * @instance
                 */
                QueryDelegationRewardsResponse.prototype.rewards = $util.emptyArray;

                /**
                 * Encodes the specified QueryDelegationRewardsResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegationRewardsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationRewardsResponse} m QueryDelegationRewardsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegationRewardsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.rewards != null && m.rewards.length) {
                        for (var i = 0; i < m.rewards.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.rewards[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a QueryDelegationRewardsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationRewardsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegationRewardsResponse} QueryDelegationRewardsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegationRewardsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegationRewardsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.rewards && m.rewards.length))
                                    m.rewards = [];
                                m.rewards.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegationRewardsResponse;
            })();

            v1beta1.QueryDelegationTotalRewardsRequest = (function () {

                /**
                 * Properties of a QueryDelegationTotalRewardsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegationTotalRewardsRequest
                 * @property {string|null} [delegator_address] QueryDelegationTotalRewardsRequest delegator_address
                 */

                /**
                 * Constructs a new QueryDelegationTotalRewardsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegationTotalRewardsRequest.
                 * @implements IQueryDelegationTotalRewardsRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationTotalRewardsRequest=} [p] Properties to set
                 */
                function QueryDelegationTotalRewardsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegationTotalRewardsRequest delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest
                 * @instance
                 */
                QueryDelegationTotalRewardsRequest.prototype.delegator_address = "";

                /**
                 * Encodes the specified QueryDelegationTotalRewardsRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationTotalRewardsRequest} m QueryDelegationTotalRewardsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegationTotalRewardsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    return w;
                };

                /**
                 * Decodes a QueryDelegationTotalRewardsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest} QueryDelegationTotalRewardsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegationTotalRewardsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegationTotalRewardsRequest;
            })();

            v1beta1.QueryDelegationTotalRewardsResponse = (function () {

                /**
                 * Properties of a QueryDelegationTotalRewardsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegationTotalRewardsResponse
                 * @property {Array.<cosmos.distribution.v1beta1.IDelegationDelegatorReward>|null} [rewards] QueryDelegationTotalRewardsResponse rewards
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [total] QueryDelegationTotalRewardsResponse total
                 */

                /**
                 * Constructs a new QueryDelegationTotalRewardsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegationTotalRewardsResponse.
                 * @implements IQueryDelegationTotalRewardsResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationTotalRewardsResponse=} [p] Properties to set
                 */
                function QueryDelegationTotalRewardsResponse(p) {
                    this.rewards = [];
                    this.total = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegationTotalRewardsResponse rewards.
                 * @member {Array.<cosmos.distribution.v1beta1.IDelegationDelegatorReward>} rewards
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse
                 * @instance
                 */
                QueryDelegationTotalRewardsResponse.prototype.rewards = $util.emptyArray;

                /**
                 * QueryDelegationTotalRewardsResponse total.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} total
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse
                 * @instance
                 */
                QueryDelegationTotalRewardsResponse.prototype.total = $util.emptyArray;

                /**
                 * Encodes the specified QueryDelegationTotalRewardsResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegationTotalRewardsResponse} m QueryDelegationTotalRewardsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegationTotalRewardsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.rewards != null && m.rewards.length) {
                        for (var i = 0; i < m.rewards.length; ++i)
                            $root.cosmos.distribution.v1beta1.DelegationDelegatorReward.encode(m.rewards[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.total != null && m.total.length) {
                        for (var i = 0; i < m.total.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.total[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a QueryDelegationTotalRewardsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse} QueryDelegationTotalRewardsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegationTotalRewardsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.rewards && m.rewards.length))
                                    m.rewards = [];
                                m.rewards.push($root.cosmos.distribution.v1beta1.DelegationDelegatorReward.decode(r, r.uint32()));
                                break;
                            case 2:
                                if (!(m.total && m.total.length))
                                    m.total = [];
                                m.total.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegationTotalRewardsResponse;
            })();

            v1beta1.QueryDelegatorValidatorsRequest = (function () {

                /**
                 * Properties of a QueryDelegatorValidatorsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegatorValidatorsRequest
                 * @property {string|null} [delegator_address] QueryDelegatorValidatorsRequest delegator_address
                 */

                /**
                 * Constructs a new QueryDelegatorValidatorsRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegatorValidatorsRequest.
                 * @implements IQueryDelegatorValidatorsRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorValidatorsRequest=} [p] Properties to set
                 */
                function QueryDelegatorValidatorsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorValidatorsRequest delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest
                 * @instance
                 */
                QueryDelegatorValidatorsRequest.prototype.delegator_address = "";

                /**
                 * Encodes the specified QueryDelegatorValidatorsRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorValidatorsRequest} m QueryDelegatorValidatorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorValidatorsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorValidatorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest} QueryDelegatorValidatorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorValidatorsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorValidatorsRequest;
            })();

            v1beta1.QueryDelegatorValidatorsResponse = (function () {

                /**
                 * Properties of a QueryDelegatorValidatorsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegatorValidatorsResponse
                 * @property {Array.<string>|null} [validators] QueryDelegatorValidatorsResponse validators
                 */

                /**
                 * Constructs a new QueryDelegatorValidatorsResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegatorValidatorsResponse.
                 * @implements IQueryDelegatorValidatorsResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorValidatorsResponse=} [p] Properties to set
                 */
                function QueryDelegatorValidatorsResponse(p) {
                    this.validators = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorValidatorsResponse validators.
                 * @member {Array.<string>} validators
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse
                 * @instance
                 */
                QueryDelegatorValidatorsResponse.prototype.validators = $util.emptyArray;

                /**
                 * Encodes the specified QueryDelegatorValidatorsResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorValidatorsResponse} m QueryDelegatorValidatorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorValidatorsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            w.uint32(10).string(m.validators[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorValidatorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse} QueryDelegatorValidatorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorValidatorsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorValidatorsResponse;
            })();

            v1beta1.QueryDelegatorWithdrawAddressRequest = (function () {

                /**
                 * Properties of a QueryDelegatorWithdrawAddressRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegatorWithdrawAddressRequest
                 * @property {string|null} [delegator_address] QueryDelegatorWithdrawAddressRequest delegator_address
                 */

                /**
                 * Constructs a new QueryDelegatorWithdrawAddressRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegatorWithdrawAddressRequest.
                 * @implements IQueryDelegatorWithdrawAddressRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorWithdrawAddressRequest=} [p] Properties to set
                 */
                function QueryDelegatorWithdrawAddressRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorWithdrawAddressRequest delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest
                 * @instance
                 */
                QueryDelegatorWithdrawAddressRequest.prototype.delegator_address = "";

                /**
                 * Encodes the specified QueryDelegatorWithdrawAddressRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorWithdrawAddressRequest} m QueryDelegatorWithdrawAddressRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorWithdrawAddressRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorWithdrawAddressRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest} QueryDelegatorWithdrawAddressRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorWithdrawAddressRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorWithdrawAddressRequest;
            })();

            v1beta1.QueryDelegatorWithdrawAddressResponse = (function () {

                /**
                 * Properties of a QueryDelegatorWithdrawAddressResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryDelegatorWithdrawAddressResponse
                 * @property {string|null} [withdraw_address] QueryDelegatorWithdrawAddressResponse withdraw_address
                 */

                /**
                 * Constructs a new QueryDelegatorWithdrawAddressResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryDelegatorWithdrawAddressResponse.
                 * @implements IQueryDelegatorWithdrawAddressResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorWithdrawAddressResponse=} [p] Properties to set
                 */
                function QueryDelegatorWithdrawAddressResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorWithdrawAddressResponse withdraw_address.
                 * @member {string} withdraw_address
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse
                 * @instance
                 */
                QueryDelegatorWithdrawAddressResponse.prototype.withdraw_address = "";

                /**
                 * Encodes the specified QueryDelegatorWithdrawAddressResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryDelegatorWithdrawAddressResponse} m QueryDelegatorWithdrawAddressResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorWithdrawAddressResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.withdraw_address != null && Object.hasOwnProperty.call(m, "withdraw_address"))
                        w.uint32(10).string(m.withdraw_address);
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorWithdrawAddressResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse} QueryDelegatorWithdrawAddressResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorWithdrawAddressResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.withdraw_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorWithdrawAddressResponse;
            })();

            v1beta1.QueryCommunityPoolRequest = (function () {

                /**
                 * Properties of a QueryCommunityPoolRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryCommunityPoolRequest
                 */

                /**
                 * Constructs a new QueryCommunityPoolRequest.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryCommunityPoolRequest.
                 * @implements IQueryCommunityPoolRequest
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryCommunityPoolRequest=} [p] Properties to set
                 */
                function QueryCommunityPoolRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryCommunityPoolRequest message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryCommunityPoolRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryCommunityPoolRequest
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryCommunityPoolRequest} m QueryCommunityPoolRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCommunityPoolRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryCommunityPoolRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryCommunityPoolRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryCommunityPoolRequest} QueryCommunityPoolRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCommunityPoolRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryCommunityPoolRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCommunityPoolRequest;
            })();

            v1beta1.QueryCommunityPoolResponse = (function () {

                /**
                 * Properties of a QueryCommunityPoolResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IQueryCommunityPoolResponse
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [pool] QueryCommunityPoolResponse pool
                 */

                /**
                 * Constructs a new QueryCommunityPoolResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a QueryCommunityPoolResponse.
                 * @implements IQueryCommunityPoolResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IQueryCommunityPoolResponse=} [p] Properties to set
                 */
                function QueryCommunityPoolResponse(p) {
                    this.pool = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryCommunityPoolResponse pool.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} pool
                 * @memberof cosmos.distribution.v1beta1.QueryCommunityPoolResponse
                 * @instance
                 */
                QueryCommunityPoolResponse.prototype.pool = $util.emptyArray;

                /**
                 * Encodes the specified QueryCommunityPoolResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.QueryCommunityPoolResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.QueryCommunityPoolResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IQueryCommunityPoolResponse} m QueryCommunityPoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCommunityPoolResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pool != null && m.pool.length) {
                        for (var i = 0; i < m.pool.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.pool[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a QueryCommunityPoolResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.QueryCommunityPoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.QueryCommunityPoolResponse} QueryCommunityPoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCommunityPoolResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.QueryCommunityPoolResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.pool && m.pool.length))
                                    m.pool = [];
                                m.pool.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCommunityPoolResponse;
            })();

            v1beta1.DelegatorWithdrawInfo = (function () {

                /**
                 * Properties of a DelegatorWithdrawInfo.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IDelegatorWithdrawInfo
                 * @property {string|null} [delegator_address] DelegatorWithdrawInfo delegator_address
                 * @property {string|null} [withdraw_address] DelegatorWithdrawInfo withdraw_address
                 */

                /**
                 * Constructs a new DelegatorWithdrawInfo.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a DelegatorWithdrawInfo.
                 * @implements IDelegatorWithdrawInfo
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IDelegatorWithdrawInfo=} [p] Properties to set
                 */
                function DelegatorWithdrawInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DelegatorWithdrawInfo delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.DelegatorWithdrawInfo
                 * @instance
                 */
                DelegatorWithdrawInfo.prototype.delegator_address = "";

                /**
                 * DelegatorWithdrawInfo withdraw_address.
                 * @member {string} withdraw_address
                 * @memberof cosmos.distribution.v1beta1.DelegatorWithdrawInfo
                 * @instance
                 */
                DelegatorWithdrawInfo.prototype.withdraw_address = "";

                /**
                 * Encodes the specified DelegatorWithdrawInfo message. Does not implicitly {@link cosmos.distribution.v1beta1.DelegatorWithdrawInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.DelegatorWithdrawInfo
                 * @static
                 * @param {cosmos.distribution.v1beta1.IDelegatorWithdrawInfo} m DelegatorWithdrawInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DelegatorWithdrawInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.withdraw_address != null && Object.hasOwnProperty.call(m, "withdraw_address"))
                        w.uint32(18).string(m.withdraw_address);
                    return w;
                };

                /**
                 * Decodes a DelegatorWithdrawInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.DelegatorWithdrawInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.DelegatorWithdrawInfo} DelegatorWithdrawInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DelegatorWithdrawInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.DelegatorWithdrawInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.withdraw_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DelegatorWithdrawInfo;
            })();

            v1beta1.ValidatorOutstandingRewardsRecord = (function () {

                /**
                 * Properties of a ValidatorOutstandingRewardsRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorOutstandingRewardsRecord
                 * @property {string|null} [validator_address] ValidatorOutstandingRewardsRecord validator_address
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [outstanding_rewards] ValidatorOutstandingRewardsRecord outstanding_rewards
                 */

                /**
                 * Constructs a new ValidatorOutstandingRewardsRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorOutstandingRewardsRecord.
                 * @implements IValidatorOutstandingRewardsRecord
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorOutstandingRewardsRecord=} [p] Properties to set
                 */
                function ValidatorOutstandingRewardsRecord(p) {
                    this.outstanding_rewards = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorOutstandingRewardsRecord validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
                 * @instance
                 */
                ValidatorOutstandingRewardsRecord.prototype.validator_address = "";

                /**
                 * ValidatorOutstandingRewardsRecord outstanding_rewards.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} outstanding_rewards
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
                 * @instance
                 */
                ValidatorOutstandingRewardsRecord.prototype.outstanding_rewards = $util.emptyArray;

                /**
                 * Encodes the specified ValidatorOutstandingRewardsRecord message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorOutstandingRewardsRecord} m ValidatorOutstandingRewardsRecord message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorOutstandingRewardsRecord.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.outstanding_rewards != null && m.outstanding_rewards.length) {
                        for (var i = 0; i < m.outstanding_rewards.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.outstanding_rewards[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ValidatorOutstandingRewardsRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord} ValidatorOutstandingRewardsRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorOutstandingRewardsRecord.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                if (!(m.outstanding_rewards && m.outstanding_rewards.length))
                                    m.outstanding_rewards = [];
                                m.outstanding_rewards.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorOutstandingRewardsRecord;
            })();

            v1beta1.ValidatorAccumulatedCommissionRecord = (function () {

                /**
                 * Properties of a ValidatorAccumulatedCommissionRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorAccumulatedCommissionRecord
                 * @property {string|null} [validator_address] ValidatorAccumulatedCommissionRecord validator_address
                 * @property {cosmos.distribution.v1beta1.IValidatorAccumulatedCommission|null} [accumulated] ValidatorAccumulatedCommissionRecord accumulated
                 */

                /**
                 * Constructs a new ValidatorAccumulatedCommissionRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorAccumulatedCommissionRecord.
                 * @implements IValidatorAccumulatedCommissionRecord
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorAccumulatedCommissionRecord=} [p] Properties to set
                 */
                function ValidatorAccumulatedCommissionRecord(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorAccumulatedCommissionRecord validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
                 * @instance
                 */
                ValidatorAccumulatedCommissionRecord.prototype.validator_address = "";

                /**
                 * ValidatorAccumulatedCommissionRecord accumulated.
                 * @member {cosmos.distribution.v1beta1.IValidatorAccumulatedCommission|null|undefined} accumulated
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
                 * @instance
                 */
                ValidatorAccumulatedCommissionRecord.prototype.accumulated = null;

                /**
                 * Encodes the specified ValidatorAccumulatedCommissionRecord message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorAccumulatedCommissionRecord} m ValidatorAccumulatedCommissionRecord message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorAccumulatedCommissionRecord.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.accumulated != null && Object.hasOwnProperty.call(m, "accumulated"))
                        $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.encode(m.accumulated, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ValidatorAccumulatedCommissionRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord} ValidatorAccumulatedCommissionRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorAccumulatedCommissionRecord.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                m.accumulated = $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorAccumulatedCommissionRecord;
            })();

            v1beta1.ValidatorHistoricalRewardsRecord = (function () {

                /**
                 * Properties of a ValidatorHistoricalRewardsRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorHistoricalRewardsRecord
                 * @property {string|null} [validator_address] ValidatorHistoricalRewardsRecord validator_address
                 * @property {Long|null} [period] ValidatorHistoricalRewardsRecord period
                 * @property {cosmos.distribution.v1beta1.IValidatorHistoricalRewards|null} [rewards] ValidatorHistoricalRewardsRecord rewards
                 */

                /**
                 * Constructs a new ValidatorHistoricalRewardsRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorHistoricalRewardsRecord.
                 * @implements IValidatorHistoricalRewardsRecord
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorHistoricalRewardsRecord=} [p] Properties to set
                 */
                function ValidatorHistoricalRewardsRecord(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorHistoricalRewardsRecord validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
                 * @instance
                 */
                ValidatorHistoricalRewardsRecord.prototype.validator_address = "";

                /**
                 * ValidatorHistoricalRewardsRecord period.
                 * @member {Long} period
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
                 * @instance
                 */
                ValidatorHistoricalRewardsRecord.prototype.period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * ValidatorHistoricalRewardsRecord rewards.
                 * @member {cosmos.distribution.v1beta1.IValidatorHistoricalRewards|null|undefined} rewards
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
                 * @instance
                 */
                ValidatorHistoricalRewardsRecord.prototype.rewards = null;

                /**
                 * Encodes the specified ValidatorHistoricalRewardsRecord message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorHistoricalRewardsRecord} m ValidatorHistoricalRewardsRecord message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorHistoricalRewardsRecord.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.period != null && Object.hasOwnProperty.call(m, "period"))
                        w.uint32(16).uint64(m.period);
                    if (m.rewards != null && Object.hasOwnProperty.call(m, "rewards"))
                        $root.cosmos.distribution.v1beta1.ValidatorHistoricalRewards.encode(m.rewards, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ValidatorHistoricalRewardsRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord} ValidatorHistoricalRewardsRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorHistoricalRewardsRecord.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                m.period = r.uint64();
                                break;
                            case 3:
                                m.rewards = $root.cosmos.distribution.v1beta1.ValidatorHistoricalRewards.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorHistoricalRewardsRecord;
            })();

            v1beta1.ValidatorCurrentRewardsRecord = (function () {

                /**
                 * Properties of a ValidatorCurrentRewardsRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorCurrentRewardsRecord
                 * @property {string|null} [validator_address] ValidatorCurrentRewardsRecord validator_address
                 * @property {cosmos.distribution.v1beta1.IValidatorCurrentRewards|null} [rewards] ValidatorCurrentRewardsRecord rewards
                 */

                /**
                 * Constructs a new ValidatorCurrentRewardsRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorCurrentRewardsRecord.
                 * @implements IValidatorCurrentRewardsRecord
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorCurrentRewardsRecord=} [p] Properties to set
                 */
                function ValidatorCurrentRewardsRecord(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorCurrentRewardsRecord validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
                 * @instance
                 */
                ValidatorCurrentRewardsRecord.prototype.validator_address = "";

                /**
                 * ValidatorCurrentRewardsRecord rewards.
                 * @member {cosmos.distribution.v1beta1.IValidatorCurrentRewards|null|undefined} rewards
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
                 * @instance
                 */
                ValidatorCurrentRewardsRecord.prototype.rewards = null;

                /**
                 * Encodes the specified ValidatorCurrentRewardsRecord message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorCurrentRewardsRecord} m ValidatorCurrentRewardsRecord message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorCurrentRewardsRecord.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.rewards != null && Object.hasOwnProperty.call(m, "rewards"))
                        $root.cosmos.distribution.v1beta1.ValidatorCurrentRewards.encode(m.rewards, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ValidatorCurrentRewardsRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord} ValidatorCurrentRewardsRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorCurrentRewardsRecord.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                m.rewards = $root.cosmos.distribution.v1beta1.ValidatorCurrentRewards.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorCurrentRewardsRecord;
            })();

            v1beta1.DelegatorStartingInfoRecord = (function () {

                /**
                 * Properties of a DelegatorStartingInfoRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IDelegatorStartingInfoRecord
                 * @property {string|null} [delegator_address] DelegatorStartingInfoRecord delegator_address
                 * @property {string|null} [validator_address] DelegatorStartingInfoRecord validator_address
                 * @property {cosmos.distribution.v1beta1.IDelegatorStartingInfo|null} [starting_info] DelegatorStartingInfoRecord starting_info
                 */

                /**
                 * Constructs a new DelegatorStartingInfoRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a DelegatorStartingInfoRecord.
                 * @implements IDelegatorStartingInfoRecord
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IDelegatorStartingInfoRecord=} [p] Properties to set
                 */
                function DelegatorStartingInfoRecord(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DelegatorStartingInfoRecord delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
                 * @instance
                 */
                DelegatorStartingInfoRecord.prototype.delegator_address = "";

                /**
                 * DelegatorStartingInfoRecord validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
                 * @instance
                 */
                DelegatorStartingInfoRecord.prototype.validator_address = "";

                /**
                 * DelegatorStartingInfoRecord starting_info.
                 * @member {cosmos.distribution.v1beta1.IDelegatorStartingInfo|null|undefined} starting_info
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
                 * @instance
                 */
                DelegatorStartingInfoRecord.prototype.starting_info = null;

                /**
                 * Encodes the specified DelegatorStartingInfoRecord message. Does not implicitly {@link cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
                 * @static
                 * @param {cosmos.distribution.v1beta1.IDelegatorStartingInfoRecord} m DelegatorStartingInfoRecord message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DelegatorStartingInfoRecord.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    if (m.starting_info != null && Object.hasOwnProperty.call(m, "starting_info"))
                        $root.cosmos.distribution.v1beta1.DelegatorStartingInfo.encode(m.starting_info, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a DelegatorStartingInfoRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.DelegatorStartingInfoRecord} DelegatorStartingInfoRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DelegatorStartingInfoRecord.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.DelegatorStartingInfoRecord();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            case 3:
                                m.starting_info = $root.cosmos.distribution.v1beta1.DelegatorStartingInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DelegatorStartingInfoRecord;
            })();

            v1beta1.ValidatorSlashEventRecord = (function () {

                /**
                 * Properties of a ValidatorSlashEventRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorSlashEventRecord
                 * @property {string|null} [validator_address] ValidatorSlashEventRecord validator_address
                 * @property {Long|null} [height] ValidatorSlashEventRecord height
                 * @property {Long|null} [period] ValidatorSlashEventRecord period
                 * @property {cosmos.distribution.v1beta1.IValidatorSlashEvent|null} [validator_slash_event] ValidatorSlashEventRecord validator_slash_event
                 */

                /**
                 * Constructs a new ValidatorSlashEventRecord.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorSlashEventRecord.
                 * @implements IValidatorSlashEventRecord
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorSlashEventRecord=} [p] Properties to set
                 */
                function ValidatorSlashEventRecord(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorSlashEventRecord validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEventRecord
                 * @instance
                 */
                ValidatorSlashEventRecord.prototype.validator_address = "";

                /**
                 * ValidatorSlashEventRecord height.
                 * @member {Long} height
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEventRecord
                 * @instance
                 */
                ValidatorSlashEventRecord.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * ValidatorSlashEventRecord period.
                 * @member {Long} period
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEventRecord
                 * @instance
                 */
                ValidatorSlashEventRecord.prototype.period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * ValidatorSlashEventRecord validator_slash_event.
                 * @member {cosmos.distribution.v1beta1.IValidatorSlashEvent|null|undefined} validator_slash_event
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEventRecord
                 * @instance
                 */
                ValidatorSlashEventRecord.prototype.validator_slash_event = null;

                /**
                 * Encodes the specified ValidatorSlashEventRecord message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorSlashEventRecord.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEventRecord
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorSlashEventRecord} m ValidatorSlashEventRecord message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorSlashEventRecord.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                        w.uint32(16).uint64(m.height);
                    if (m.period != null && Object.hasOwnProperty.call(m, "period"))
                        w.uint32(24).uint64(m.period);
                    if (m.validator_slash_event != null && Object.hasOwnProperty.call(m, "validator_slash_event"))
                        $root.cosmos.distribution.v1beta1.ValidatorSlashEvent.encode(m.validator_slash_event, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ValidatorSlashEventRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEventRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorSlashEventRecord} ValidatorSlashEventRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorSlashEventRecord.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorSlashEventRecord();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                m.height = r.uint64();
                                break;
                            case 3:
                                m.period = r.uint64();
                                break;
                            case 4:
                                m.validator_slash_event = $root.cosmos.distribution.v1beta1.ValidatorSlashEvent.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorSlashEventRecord;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.distribution.v1beta1.IParams|null} [params] GenesisState params
                 * @property {cosmos.distribution.v1beta1.IFeePool|null} [fee_pool] GenesisState fee_pool
                 * @property {Array.<cosmos.distribution.v1beta1.IDelegatorWithdrawInfo>|null} [delegator_withdraw_infos] GenesisState delegator_withdraw_infos
                 * @property {string|null} [previous_proposer] GenesisState previous_proposer
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorOutstandingRewardsRecord>|null} [outstanding_rewards] GenesisState outstanding_rewards
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorAccumulatedCommissionRecord>|null} [validator_accumulated_commissions] GenesisState validator_accumulated_commissions
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorHistoricalRewardsRecord>|null} [validator_historical_rewards] GenesisState validator_historical_rewards
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorCurrentRewardsRecord>|null} [validator_current_rewards] GenesisState validator_current_rewards
                 * @property {Array.<cosmos.distribution.v1beta1.IDelegatorStartingInfoRecord>|null} [delegator_starting_infos] GenesisState delegator_starting_infos
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorSlashEventRecord>|null} [validator_slash_events] GenesisState validator_slash_events
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.delegator_withdraw_infos = [];
                    this.outstanding_rewards = [];
                    this.validator_accumulated_commissions = [];
                    this.validator_historical_rewards = [];
                    this.validator_current_rewards = [];
                    this.delegator_starting_infos = [];
                    this.validator_slash_events = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmos.distribution.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState fee_pool.
                 * @member {cosmos.distribution.v1beta1.IFeePool|null|undefined} fee_pool
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.fee_pool = null;

                /**
                 * GenesisState delegator_withdraw_infos.
                 * @member {Array.<cosmos.distribution.v1beta1.IDelegatorWithdrawInfo>} delegator_withdraw_infos
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.delegator_withdraw_infos = $util.emptyArray;

                /**
                 * GenesisState previous_proposer.
                 * @member {string} previous_proposer
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.previous_proposer = "";

                /**
                 * GenesisState outstanding_rewards.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorOutstandingRewardsRecord>} outstanding_rewards
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.outstanding_rewards = $util.emptyArray;

                /**
                 * GenesisState validator_accumulated_commissions.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorAccumulatedCommissionRecord>} validator_accumulated_commissions
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.validator_accumulated_commissions = $util.emptyArray;

                /**
                 * GenesisState validator_historical_rewards.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorHistoricalRewardsRecord>} validator_historical_rewards
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.validator_historical_rewards = $util.emptyArray;

                /**
                 * GenesisState validator_current_rewards.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorCurrentRewardsRecord>} validator_current_rewards
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.validator_current_rewards = $util.emptyArray;

                /**
                 * GenesisState delegator_starting_infos.
                 * @member {Array.<cosmos.distribution.v1beta1.IDelegatorStartingInfoRecord>} delegator_starting_infos
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.delegator_starting_infos = $util.emptyArray;

                /**
                 * GenesisState validator_slash_events.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorSlashEventRecord>} validator_slash_events
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.validator_slash_events = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.distribution.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.distribution.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.distribution.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    if (m.fee_pool != null && Object.hasOwnProperty.call(m, "fee_pool"))
                        $root.cosmos.distribution.v1beta1.FeePool.encode(m.fee_pool, w.uint32(18).fork()).ldelim();
                    if (m.delegator_withdraw_infos != null && m.delegator_withdraw_infos.length) {
                        for (var i = 0; i < m.delegator_withdraw_infos.length; ++i)
                            $root.cosmos.distribution.v1beta1.DelegatorWithdrawInfo.encode(m.delegator_withdraw_infos[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.previous_proposer != null && Object.hasOwnProperty.call(m, "previous_proposer"))
                        w.uint32(34).string(m.previous_proposer);
                    if (m.outstanding_rewards != null && m.outstanding_rewards.length) {
                        for (var i = 0; i < m.outstanding_rewards.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.encode(m.outstanding_rewards[i], w.uint32(42).fork()).ldelim();
                    }
                    if (m.validator_accumulated_commissions != null && m.validator_accumulated_commissions.length) {
                        for (var i = 0; i < m.validator_accumulated_commissions.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.encode(m.validator_accumulated_commissions[i], w.uint32(50).fork()).ldelim();
                    }
                    if (m.validator_historical_rewards != null && m.validator_historical_rewards.length) {
                        for (var i = 0; i < m.validator_historical_rewards.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.encode(m.validator_historical_rewards[i], w.uint32(58).fork()).ldelim();
                    }
                    if (m.validator_current_rewards != null && m.validator_current_rewards.length) {
                        for (var i = 0; i < m.validator_current_rewards.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.encode(m.validator_current_rewards[i], w.uint32(66).fork()).ldelim();
                    }
                    if (m.delegator_starting_infos != null && m.delegator_starting_infos.length) {
                        for (var i = 0; i < m.delegator_starting_infos.length; ++i)
                            $root.cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.encode(m.delegator_starting_infos[i], w.uint32(74).fork()).ldelim();
                    }
                    if (m.validator_slash_events != null && m.validator_slash_events.length) {
                        for (var i = 0; i < m.validator_slash_events.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorSlashEventRecord.encode(m.validator_slash_events[i], w.uint32(82).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.distribution.v1beta1.Params.decode(r, r.uint32());
                                break;
                            case 2:
                                m.fee_pool = $root.cosmos.distribution.v1beta1.FeePool.decode(r, r.uint32());
                                break;
                            case 3:
                                if (!(m.delegator_withdraw_infos && m.delegator_withdraw_infos.length))
                                    m.delegator_withdraw_infos = [];
                                m.delegator_withdraw_infos.push($root.cosmos.distribution.v1beta1.DelegatorWithdrawInfo.decode(r, r.uint32()));
                                break;
                            case 4:
                                m.previous_proposer = r.string();
                                break;
                            case 5:
                                if (!(m.outstanding_rewards && m.outstanding_rewards.length))
                                    m.outstanding_rewards = [];
                                m.outstanding_rewards.push($root.cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.decode(r, r.uint32()));
                                break;
                            case 6:
                                if (!(m.validator_accumulated_commissions && m.validator_accumulated_commissions.length))
                                    m.validator_accumulated_commissions = [];
                                m.validator_accumulated_commissions.push($root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.decode(r, r.uint32()));
                                break;
                            case 7:
                                if (!(m.validator_historical_rewards && m.validator_historical_rewards.length))
                                    m.validator_historical_rewards = [];
                                m.validator_historical_rewards.push($root.cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.decode(r, r.uint32()));
                                break;
                            case 8:
                                if (!(m.validator_current_rewards && m.validator_current_rewards.length))
                                    m.validator_current_rewards = [];
                                m.validator_current_rewards.push($root.cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.decode(r, r.uint32()));
                                break;
                            case 9:
                                if (!(m.delegator_starting_infos && m.delegator_starting_infos.length))
                                    m.delegator_starting_infos = [];
                                m.delegator_starting_infos.push($root.cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.decode(r, r.uint32()));
                                break;
                            case 10:
                                if (!(m.validator_slash_events && m.validator_slash_events.length))
                                    m.validator_slash_events = [];
                                m.validator_slash_events.push($root.cosmos.distribution.v1beta1.ValidatorSlashEventRecord.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.MsgSetWithdrawAddress = (function () {

                /**
                 * Properties of a MsgSetWithdrawAddress.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgSetWithdrawAddress
                 * @property {string|null} [delegator_address] MsgSetWithdrawAddress delegator_address
                 * @property {string|null} [withdraw_address] MsgSetWithdrawAddress withdraw_address
                 */

                /**
                 * Constructs a new MsgSetWithdrawAddress.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgSetWithdrawAddress.
                 * @implements IMsgSetWithdrawAddress
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgSetWithdrawAddress=} [p] Properties to set
                 */
                function MsgSetWithdrawAddress(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSetWithdrawAddress delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.MsgSetWithdrawAddress
                 * @instance
                 */
                MsgSetWithdrawAddress.prototype.delegator_address = "";

                /**
                 * MsgSetWithdrawAddress withdraw_address.
                 * @member {string} withdraw_address
                 * @memberof cosmos.distribution.v1beta1.MsgSetWithdrawAddress
                 * @instance
                 */
                MsgSetWithdrawAddress.prototype.withdraw_address = "";

                /**
                 * Encodes the specified MsgSetWithdrawAddress message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgSetWithdrawAddress.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgSetWithdrawAddress
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgSetWithdrawAddress} m MsgSetWithdrawAddress message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSetWithdrawAddress.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.withdraw_address != null && Object.hasOwnProperty.call(m, "withdraw_address"))
                        w.uint32(18).string(m.withdraw_address);
                    return w;
                };

                /**
                 * Decodes a MsgSetWithdrawAddress message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgSetWithdrawAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgSetWithdrawAddress} MsgSetWithdrawAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSetWithdrawAddress.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgSetWithdrawAddress();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.withdraw_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSetWithdrawAddress;
            })();

            v1beta1.MsgSetWithdrawAddressResponse = (function () {

                /**
                 * Properties of a MsgSetWithdrawAddressResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgSetWithdrawAddressResponse
                 */

                /**
                 * Constructs a new MsgSetWithdrawAddressResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgSetWithdrawAddressResponse.
                 * @implements IMsgSetWithdrawAddressResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgSetWithdrawAddressResponse=} [p] Properties to set
                 */
                function MsgSetWithdrawAddressResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgSetWithdrawAddressResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgSetWithdrawAddressResponse} m MsgSetWithdrawAddressResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSetWithdrawAddressResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgSetWithdrawAddressResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse} MsgSetWithdrawAddressResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSetWithdrawAddressResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSetWithdrawAddressResponse;
            })();

            v1beta1.MsgWithdrawDelegatorReward = (function () {

                /**
                 * Properties of a MsgWithdrawDelegatorReward.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgWithdrawDelegatorReward
                 * @property {string|null} [delegator_address] MsgWithdrawDelegatorReward delegator_address
                 * @property {string|null} [validator_address] MsgWithdrawDelegatorReward validator_address
                 */

                /**
                 * Constructs a new MsgWithdrawDelegatorReward.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgWithdrawDelegatorReward.
                 * @implements IMsgWithdrawDelegatorReward
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawDelegatorReward=} [p] Properties to set
                 */
                function MsgWithdrawDelegatorReward(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgWithdrawDelegatorReward delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward
                 * @instance
                 */
                MsgWithdrawDelegatorReward.prototype.delegator_address = "";

                /**
                 * MsgWithdrawDelegatorReward validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward
                 * @instance
                 */
                MsgWithdrawDelegatorReward.prototype.validator_address = "";

                /**
                 * Encodes the specified MsgWithdrawDelegatorReward message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawDelegatorReward} m MsgWithdrawDelegatorReward message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawDelegatorReward.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a MsgWithdrawDelegatorReward message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward} MsgWithdrawDelegatorReward
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawDelegatorReward.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgWithdrawDelegatorReward;
            })();

            v1beta1.MsgWithdrawDelegatorRewardResponse = (function () {

                /**
                 * Properties of a MsgWithdrawDelegatorRewardResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgWithdrawDelegatorRewardResponse
                 */

                /**
                 * Constructs a new MsgWithdrawDelegatorRewardResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgWithdrawDelegatorRewardResponse.
                 * @implements IMsgWithdrawDelegatorRewardResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawDelegatorRewardResponse=} [p] Properties to set
                 */
                function MsgWithdrawDelegatorRewardResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgWithdrawDelegatorRewardResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawDelegatorRewardResponse} m MsgWithdrawDelegatorRewardResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawDelegatorRewardResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgWithdrawDelegatorRewardResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse} MsgWithdrawDelegatorRewardResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawDelegatorRewardResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgWithdrawDelegatorRewardResponse;
            })();

            v1beta1.MsgWithdrawValidatorCommission = (function () {

                /**
                 * Properties of a MsgWithdrawValidatorCommission.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgWithdrawValidatorCommission
                 * @property {string|null} [validator_address] MsgWithdrawValidatorCommission validator_address
                 */

                /**
                 * Constructs a new MsgWithdrawValidatorCommission.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgWithdrawValidatorCommission.
                 * @implements IMsgWithdrawValidatorCommission
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawValidatorCommission=} [p] Properties to set
                 */
                function MsgWithdrawValidatorCommission(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgWithdrawValidatorCommission validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission
                 * @instance
                 */
                MsgWithdrawValidatorCommission.prototype.validator_address = "";

                /**
                 * Encodes the specified MsgWithdrawValidatorCommission message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawValidatorCommission} m MsgWithdrawValidatorCommission message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawValidatorCommission.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a MsgWithdrawValidatorCommission message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission} MsgWithdrawValidatorCommission
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawValidatorCommission.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgWithdrawValidatorCommission;
            })();

            v1beta1.MsgWithdrawValidatorCommissionResponse = (function () {

                /**
                 * Properties of a MsgWithdrawValidatorCommissionResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgWithdrawValidatorCommissionResponse
                 */

                /**
                 * Constructs a new MsgWithdrawValidatorCommissionResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgWithdrawValidatorCommissionResponse.
                 * @implements IMsgWithdrawValidatorCommissionResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawValidatorCommissionResponse=} [p] Properties to set
                 */
                function MsgWithdrawValidatorCommissionResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgWithdrawValidatorCommissionResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgWithdrawValidatorCommissionResponse} m MsgWithdrawValidatorCommissionResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawValidatorCommissionResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgWithdrawValidatorCommissionResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse} MsgWithdrawValidatorCommissionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawValidatorCommissionResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgWithdrawValidatorCommissionResponse;
            })();

            v1beta1.MsgFundCommunityPool = (function () {

                /**
                 * Properties of a MsgFundCommunityPool.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgFundCommunityPool
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] MsgFundCommunityPool amount
                 * @property {string|null} [depositor] MsgFundCommunityPool depositor
                 */

                /**
                 * Constructs a new MsgFundCommunityPool.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgFundCommunityPool.
                 * @implements IMsgFundCommunityPool
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgFundCommunityPool=} [p] Properties to set
                 */
                function MsgFundCommunityPool(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgFundCommunityPool amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.distribution.v1beta1.MsgFundCommunityPool
                 * @instance
                 */
                MsgFundCommunityPool.prototype.amount = $util.emptyArray;

                /**
                 * MsgFundCommunityPool depositor.
                 * @member {string} depositor
                 * @memberof cosmos.distribution.v1beta1.MsgFundCommunityPool
                 * @instance
                 */
                MsgFundCommunityPool.prototype.depositor = "";

                /**
                 * Encodes the specified MsgFundCommunityPool message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgFundCommunityPool.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgFundCommunityPool
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgFundCommunityPool} m MsgFundCommunityPool message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgFundCommunityPool.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.depositor != null && Object.hasOwnProperty.call(m, "depositor"))
                        w.uint32(18).string(m.depositor);
                    return w;
                };

                /**
                 * Decodes a MsgFundCommunityPool message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgFundCommunityPool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgFundCommunityPool} MsgFundCommunityPool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgFundCommunityPool.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgFundCommunityPool();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.depositor = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgFundCommunityPool;
            })();

            v1beta1.MsgFundCommunityPoolResponse = (function () {

                /**
                 * Properties of a MsgFundCommunityPoolResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IMsgFundCommunityPoolResponse
                 */

                /**
                 * Constructs a new MsgFundCommunityPoolResponse.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a MsgFundCommunityPoolResponse.
                 * @implements IMsgFundCommunityPoolResponse
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IMsgFundCommunityPoolResponse=} [p] Properties to set
                 */
                function MsgFundCommunityPoolResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgFundCommunityPoolResponse message. Does not implicitly {@link cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse
                 * @static
                 * @param {cosmos.distribution.v1beta1.IMsgFundCommunityPoolResponse} m MsgFundCommunityPoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgFundCommunityPoolResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgFundCommunityPoolResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse} MsgFundCommunityPoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgFundCommunityPoolResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgFundCommunityPoolResponse;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IParams
                 * @property {string|null} [community_tax] Params community_tax
                 * @property {string|null} [base_proposer_reward] Params base_proposer_reward
                 * @property {string|null} [bonus_proposer_reward] Params bonus_proposer_reward
                 * @property {boolean|null} [withdraw_addr_enabled] Params withdraw_addr_enabled
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params community_tax.
                 * @member {string} community_tax
                 * @memberof cosmos.distribution.v1beta1.Params
                 * @instance
                 */
                Params.prototype.community_tax = "";

                /**
                 * Params base_proposer_reward.
                 * @member {string} base_proposer_reward
                 * @memberof cosmos.distribution.v1beta1.Params
                 * @instance
                 */
                Params.prototype.base_proposer_reward = "";

                /**
                 * Params bonus_proposer_reward.
                 * @member {string} bonus_proposer_reward
                 * @memberof cosmos.distribution.v1beta1.Params
                 * @instance
                 */
                Params.prototype.bonus_proposer_reward = "";

                /**
                 * Params withdraw_addr_enabled.
                 * @member {boolean} withdraw_addr_enabled
                 * @memberof cosmos.distribution.v1beta1.Params
                 * @instance
                 */
                Params.prototype.withdraw_addr_enabled = false;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.distribution.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.Params
                 * @static
                 * @param {cosmos.distribution.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.community_tax != null && Object.hasOwnProperty.call(m, "community_tax"))
                        w.uint32(10).string(m.community_tax);
                    if (m.base_proposer_reward != null && Object.hasOwnProperty.call(m, "base_proposer_reward"))
                        w.uint32(18).string(m.base_proposer_reward);
                    if (m.bonus_proposer_reward != null && Object.hasOwnProperty.call(m, "bonus_proposer_reward"))
                        w.uint32(26).string(m.bonus_proposer_reward);
                    if (m.withdraw_addr_enabled != null && Object.hasOwnProperty.call(m, "withdraw_addr_enabled"))
                        w.uint32(32).bool(m.withdraw_addr_enabled);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.community_tax = r.string();
                                break;
                            case 2:
                                m.base_proposer_reward = r.string();
                                break;
                            case 3:
                                m.bonus_proposer_reward = r.string();
                                break;
                            case 4:
                                m.withdraw_addr_enabled = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            v1beta1.ValidatorHistoricalRewards = (function () {

                /**
                 * Properties of a ValidatorHistoricalRewards.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorHistoricalRewards
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [cumulative_reward_ratio] ValidatorHistoricalRewards cumulative_reward_ratio
                 * @property {number|null} [reference_count] ValidatorHistoricalRewards reference_count
                 */

                /**
                 * Constructs a new ValidatorHistoricalRewards.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorHistoricalRewards.
                 * @implements IValidatorHistoricalRewards
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorHistoricalRewards=} [p] Properties to set
                 */
                function ValidatorHistoricalRewards(p) {
                    this.cumulative_reward_ratio = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorHistoricalRewards cumulative_reward_ratio.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} cumulative_reward_ratio
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewards
                 * @instance
                 */
                ValidatorHistoricalRewards.prototype.cumulative_reward_ratio = $util.emptyArray;

                /**
                 * ValidatorHistoricalRewards reference_count.
                 * @member {number} reference_count
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewards
                 * @instance
                 */
                ValidatorHistoricalRewards.prototype.reference_count = 0;

                /**
                 * Encodes the specified ValidatorHistoricalRewards message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorHistoricalRewards.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewards
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorHistoricalRewards} m ValidatorHistoricalRewards message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorHistoricalRewards.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.cumulative_reward_ratio != null && m.cumulative_reward_ratio.length) {
                        for (var i = 0; i < m.cumulative_reward_ratio.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.cumulative_reward_ratio[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.reference_count != null && Object.hasOwnProperty.call(m, "reference_count"))
                        w.uint32(16).uint32(m.reference_count);
                    return w;
                };

                /**
                 * Decodes a ValidatorHistoricalRewards message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorHistoricalRewards
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorHistoricalRewards} ValidatorHistoricalRewards
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorHistoricalRewards.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorHistoricalRewards();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.cumulative_reward_ratio && m.cumulative_reward_ratio.length))
                                    m.cumulative_reward_ratio = [];
                                m.cumulative_reward_ratio.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.reference_count = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorHistoricalRewards;
            })();

            v1beta1.ValidatorCurrentRewards = (function () {

                /**
                 * Properties of a ValidatorCurrentRewards.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorCurrentRewards
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [rewards] ValidatorCurrentRewards rewards
                 * @property {Long|null} [period] ValidatorCurrentRewards period
                 */

                /**
                 * Constructs a new ValidatorCurrentRewards.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorCurrentRewards.
                 * @implements IValidatorCurrentRewards
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorCurrentRewards=} [p] Properties to set
                 */
                function ValidatorCurrentRewards(p) {
                    this.rewards = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorCurrentRewards rewards.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} rewards
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewards
                 * @instance
                 */
                ValidatorCurrentRewards.prototype.rewards = $util.emptyArray;

                /**
                 * ValidatorCurrentRewards period.
                 * @member {Long} period
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewards
                 * @instance
                 */
                ValidatorCurrentRewards.prototype.period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified ValidatorCurrentRewards message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorCurrentRewards.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewards
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorCurrentRewards} m ValidatorCurrentRewards message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorCurrentRewards.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.rewards != null && m.rewards.length) {
                        for (var i = 0; i < m.rewards.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.rewards[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.period != null && Object.hasOwnProperty.call(m, "period"))
                        w.uint32(16).uint64(m.period);
                    return w;
                };

                /**
                 * Decodes a ValidatorCurrentRewards message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorCurrentRewards
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorCurrentRewards} ValidatorCurrentRewards
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorCurrentRewards.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorCurrentRewards();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.rewards && m.rewards.length))
                                    m.rewards = [];
                                m.rewards.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.period = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorCurrentRewards;
            })();

            v1beta1.ValidatorAccumulatedCommission = (function () {

                /**
                 * Properties of a ValidatorAccumulatedCommission.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorAccumulatedCommission
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [commission] ValidatorAccumulatedCommission commission
                 */

                /**
                 * Constructs a new ValidatorAccumulatedCommission.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorAccumulatedCommission.
                 * @implements IValidatorAccumulatedCommission
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorAccumulatedCommission=} [p] Properties to set
                 */
                function ValidatorAccumulatedCommission(p) {
                    this.commission = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorAccumulatedCommission commission.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} commission
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommission
                 * @instance
                 */
                ValidatorAccumulatedCommission.prototype.commission = $util.emptyArray;

                /**
                 * Encodes the specified ValidatorAccumulatedCommission message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommission
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorAccumulatedCommission} m ValidatorAccumulatedCommission message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorAccumulatedCommission.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.commission != null && m.commission.length) {
                        for (var i = 0; i < m.commission.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.commission[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ValidatorAccumulatedCommission message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorAccumulatedCommission
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorAccumulatedCommission} ValidatorAccumulatedCommission
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorAccumulatedCommission.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.commission && m.commission.length))
                                    m.commission = [];
                                m.commission.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorAccumulatedCommission;
            })();

            v1beta1.ValidatorOutstandingRewards = (function () {

                /**
                 * Properties of a ValidatorOutstandingRewards.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorOutstandingRewards
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [rewards] ValidatorOutstandingRewards rewards
                 */

                /**
                 * Constructs a new ValidatorOutstandingRewards.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorOutstandingRewards.
                 * @implements IValidatorOutstandingRewards
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorOutstandingRewards=} [p] Properties to set
                 */
                function ValidatorOutstandingRewards(p) {
                    this.rewards = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorOutstandingRewards rewards.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} rewards
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewards
                 * @instance
                 */
                ValidatorOutstandingRewards.prototype.rewards = $util.emptyArray;

                /**
                 * Encodes the specified ValidatorOutstandingRewards message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorOutstandingRewards.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewards
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorOutstandingRewards} m ValidatorOutstandingRewards message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorOutstandingRewards.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.rewards != null && m.rewards.length) {
                        for (var i = 0; i < m.rewards.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.rewards[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ValidatorOutstandingRewards message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorOutstandingRewards
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorOutstandingRewards} ValidatorOutstandingRewards
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorOutstandingRewards.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorOutstandingRewards();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.rewards && m.rewards.length))
                                    m.rewards = [];
                                m.rewards.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorOutstandingRewards;
            })();

            v1beta1.ValidatorSlashEvent = (function () {

                /**
                 * Properties of a ValidatorSlashEvent.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorSlashEvent
                 * @property {Long|null} [validator_period] ValidatorSlashEvent validator_period
                 * @property {string|null} [fraction] ValidatorSlashEvent fraction
                 */

                /**
                 * Constructs a new ValidatorSlashEvent.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorSlashEvent.
                 * @implements IValidatorSlashEvent
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorSlashEvent=} [p] Properties to set
                 */
                function ValidatorSlashEvent(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorSlashEvent validator_period.
                 * @member {Long} validator_period
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvent
                 * @instance
                 */
                ValidatorSlashEvent.prototype.validator_period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * ValidatorSlashEvent fraction.
                 * @member {string} fraction
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvent
                 * @instance
                 */
                ValidatorSlashEvent.prototype.fraction = "";

                /**
                 * Encodes the specified ValidatorSlashEvent message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorSlashEvent.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvent
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorSlashEvent} m ValidatorSlashEvent message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorSlashEvent.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_period != null && Object.hasOwnProperty.call(m, "validator_period"))
                        w.uint32(8).uint64(m.validator_period);
                    if (m.fraction != null && Object.hasOwnProperty.call(m, "fraction"))
                        w.uint32(18).string(m.fraction);
                    return w;
                };

                /**
                 * Decodes a ValidatorSlashEvent message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorSlashEvent} ValidatorSlashEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorSlashEvent.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorSlashEvent();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_period = r.uint64();
                                break;
                            case 2:
                                m.fraction = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorSlashEvent;
            })();

            v1beta1.ValidatorSlashEvents = (function () {

                /**
                 * Properties of a ValidatorSlashEvents.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IValidatorSlashEvents
                 * @property {Array.<cosmos.distribution.v1beta1.IValidatorSlashEvent>|null} [validator_slash_events] ValidatorSlashEvents validator_slash_events
                 */

                /**
                 * Constructs a new ValidatorSlashEvents.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a ValidatorSlashEvents.
                 * @implements IValidatorSlashEvents
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IValidatorSlashEvents=} [p] Properties to set
                 */
                function ValidatorSlashEvents(p) {
                    this.validator_slash_events = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorSlashEvents validator_slash_events.
                 * @member {Array.<cosmos.distribution.v1beta1.IValidatorSlashEvent>} validator_slash_events
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvents
                 * @instance
                 */
                ValidatorSlashEvents.prototype.validator_slash_events = $util.emptyArray;

                /**
                 * Encodes the specified ValidatorSlashEvents message. Does not implicitly {@link cosmos.distribution.v1beta1.ValidatorSlashEvents.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvents
                 * @static
                 * @param {cosmos.distribution.v1beta1.IValidatorSlashEvents} m ValidatorSlashEvents message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorSlashEvents.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_slash_events != null && m.validator_slash_events.length) {
                        for (var i = 0; i < m.validator_slash_events.length; ++i)
                            $root.cosmos.distribution.v1beta1.ValidatorSlashEvent.encode(m.validator_slash_events[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ValidatorSlashEvents message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.ValidatorSlashEvents
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.ValidatorSlashEvents} ValidatorSlashEvents
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorSlashEvents.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.ValidatorSlashEvents();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.validator_slash_events && m.validator_slash_events.length))
                                    m.validator_slash_events = [];
                                m.validator_slash_events.push($root.cosmos.distribution.v1beta1.ValidatorSlashEvent.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorSlashEvents;
            })();

            v1beta1.FeePool = (function () {

                /**
                 * Properties of a FeePool.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IFeePool
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [community_pool] FeePool community_pool
                 */

                /**
                 * Constructs a new FeePool.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a FeePool.
                 * @implements IFeePool
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IFeePool=} [p] Properties to set
                 */
                function FeePool(p) {
                    this.community_pool = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * FeePool community_pool.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} community_pool
                 * @memberof cosmos.distribution.v1beta1.FeePool
                 * @instance
                 */
                FeePool.prototype.community_pool = $util.emptyArray;

                /**
                 * Encodes the specified FeePool message. Does not implicitly {@link cosmos.distribution.v1beta1.FeePool.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.FeePool
                 * @static
                 * @param {cosmos.distribution.v1beta1.IFeePool} m FeePool message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeePool.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.community_pool != null && m.community_pool.length) {
                        for (var i = 0; i < m.community_pool.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.community_pool[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a FeePool message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.FeePool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.FeePool} FeePool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeePool.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.FeePool();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.community_pool && m.community_pool.length))
                                    m.community_pool = [];
                                m.community_pool.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return FeePool;
            })();

            v1beta1.CommunityPoolSpendProposal = (function () {

                /**
                 * Properties of a CommunityPoolSpendProposal.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface ICommunityPoolSpendProposal
                 * @property {string|null} [title] CommunityPoolSpendProposal title
                 * @property {string|null} [description] CommunityPoolSpendProposal description
                 * @property {string|null} [recipient] CommunityPoolSpendProposal recipient
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] CommunityPoolSpendProposal amount
                 */

                /**
                 * Constructs a new CommunityPoolSpendProposal.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a CommunityPoolSpendProposal.
                 * @implements ICommunityPoolSpendProposal
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.ICommunityPoolSpendProposal=} [p] Properties to set
                 */
                function CommunityPoolSpendProposal(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CommunityPoolSpendProposal title.
                 * @member {string} title
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposal
                 * @instance
                 */
                CommunityPoolSpendProposal.prototype.title = "";

                /**
                 * CommunityPoolSpendProposal description.
                 * @member {string} description
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposal
                 * @instance
                 */
                CommunityPoolSpendProposal.prototype.description = "";

                /**
                 * CommunityPoolSpendProposal recipient.
                 * @member {string} recipient
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposal
                 * @instance
                 */
                CommunityPoolSpendProposal.prototype.recipient = "";

                /**
                 * CommunityPoolSpendProposal amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposal
                 * @instance
                 */
                CommunityPoolSpendProposal.prototype.amount = $util.emptyArray;

                /**
                 * Encodes the specified CommunityPoolSpendProposal message. Does not implicitly {@link cosmos.distribution.v1beta1.CommunityPoolSpendProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposal
                 * @static
                 * @param {cosmos.distribution.v1beta1.ICommunityPoolSpendProposal} m CommunityPoolSpendProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommunityPoolSpendProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.recipient != null && Object.hasOwnProperty.call(m, "recipient"))
                        w.uint32(26).string(m.recipient);
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(34).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a CommunityPoolSpendProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.CommunityPoolSpendProposal} CommunityPoolSpendProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommunityPoolSpendProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.CommunityPoolSpendProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.recipient = r.string();
                                break;
                            case 4:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CommunityPoolSpendProposal;
            })();

            v1beta1.DelegatorStartingInfo = (function () {

                /**
                 * Properties of a DelegatorStartingInfo.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IDelegatorStartingInfo
                 * @property {Long|null} [previous_period] DelegatorStartingInfo previous_period
                 * @property {string|null} [stake] DelegatorStartingInfo stake
                 * @property {Long|null} [height] DelegatorStartingInfo height
                 */

                /**
                 * Constructs a new DelegatorStartingInfo.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a DelegatorStartingInfo.
                 * @implements IDelegatorStartingInfo
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IDelegatorStartingInfo=} [p] Properties to set
                 */
                function DelegatorStartingInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DelegatorStartingInfo previous_period.
                 * @member {Long} previous_period
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfo
                 * @instance
                 */
                DelegatorStartingInfo.prototype.previous_period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * DelegatorStartingInfo stake.
                 * @member {string} stake
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfo
                 * @instance
                 */
                DelegatorStartingInfo.prototype.stake = "";

                /**
                 * DelegatorStartingInfo height.
                 * @member {Long} height
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfo
                 * @instance
                 */
                DelegatorStartingInfo.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified DelegatorStartingInfo message. Does not implicitly {@link cosmos.distribution.v1beta1.DelegatorStartingInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfo
                 * @static
                 * @param {cosmos.distribution.v1beta1.IDelegatorStartingInfo} m DelegatorStartingInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DelegatorStartingInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.previous_period != null && Object.hasOwnProperty.call(m, "previous_period"))
                        w.uint32(8).uint64(m.previous_period);
                    if (m.stake != null && Object.hasOwnProperty.call(m, "stake"))
                        w.uint32(18).string(m.stake);
                    if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                        w.uint32(24).uint64(m.height);
                    return w;
                };

                /**
                 * Decodes a DelegatorStartingInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.DelegatorStartingInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.DelegatorStartingInfo} DelegatorStartingInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DelegatorStartingInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.DelegatorStartingInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.previous_period = r.uint64();
                                break;
                            case 2:
                                m.stake = r.string();
                                break;
                            case 3:
                                m.height = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DelegatorStartingInfo;
            })();

            v1beta1.DelegationDelegatorReward = (function () {

                /**
                 * Properties of a DelegationDelegatorReward.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface IDelegationDelegatorReward
                 * @property {string|null} [validator_address] DelegationDelegatorReward validator_address
                 * @property {Array.<cosmos.base.v1beta1.IDecCoin>|null} [reward] DelegationDelegatorReward reward
                 */

                /**
                 * Constructs a new DelegationDelegatorReward.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a DelegationDelegatorReward.
                 * @implements IDelegationDelegatorReward
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.IDelegationDelegatorReward=} [p] Properties to set
                 */
                function DelegationDelegatorReward(p) {
                    this.reward = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DelegationDelegatorReward validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.distribution.v1beta1.DelegationDelegatorReward
                 * @instance
                 */
                DelegationDelegatorReward.prototype.validator_address = "";

                /**
                 * DelegationDelegatorReward reward.
                 * @member {Array.<cosmos.base.v1beta1.IDecCoin>} reward
                 * @memberof cosmos.distribution.v1beta1.DelegationDelegatorReward
                 * @instance
                 */
                DelegationDelegatorReward.prototype.reward = $util.emptyArray;

                /**
                 * Encodes the specified DelegationDelegatorReward message. Does not implicitly {@link cosmos.distribution.v1beta1.DelegationDelegatorReward.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.DelegationDelegatorReward
                 * @static
                 * @param {cosmos.distribution.v1beta1.IDelegationDelegatorReward} m DelegationDelegatorReward message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DelegationDelegatorReward.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(10).string(m.validator_address);
                    if (m.reward != null && m.reward.length) {
                        for (var i = 0; i < m.reward.length; ++i)
                            $root.cosmos.base.v1beta1.DecCoin.encode(m.reward[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a DelegationDelegatorReward message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.DelegationDelegatorReward
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.DelegationDelegatorReward} DelegationDelegatorReward
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DelegationDelegatorReward.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.DelegationDelegatorReward();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_address = r.string();
                                break;
                            case 2:
                                if (!(m.reward && m.reward.length))
                                    m.reward = [];
                                m.reward.push($root.cosmos.base.v1beta1.DecCoin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DelegationDelegatorReward;
            })();

            v1beta1.CommunityPoolSpendProposalWithDeposit = (function () {

                /**
                 * Properties of a CommunityPoolSpendProposalWithDeposit.
                 * @memberof cosmos.distribution.v1beta1
                 * @interface ICommunityPoolSpendProposalWithDeposit
                 * @property {string|null} [title] CommunityPoolSpendProposalWithDeposit title
                 * @property {string|null} [description] CommunityPoolSpendProposalWithDeposit description
                 * @property {string|null} [recipient] CommunityPoolSpendProposalWithDeposit recipient
                 * @property {string|null} [amount] CommunityPoolSpendProposalWithDeposit amount
                 * @property {string|null} [deposit] CommunityPoolSpendProposalWithDeposit deposit
                 */

                /**
                 * Constructs a new CommunityPoolSpendProposalWithDeposit.
                 * @memberof cosmos.distribution.v1beta1
                 * @classdesc Represents a CommunityPoolSpendProposalWithDeposit.
                 * @implements ICommunityPoolSpendProposalWithDeposit
                 * @constructor
                 * @param {cosmos.distribution.v1beta1.ICommunityPoolSpendProposalWithDeposit=} [p] Properties to set
                 */
                function CommunityPoolSpendProposalWithDeposit(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CommunityPoolSpendProposalWithDeposit title.
                 * @member {string} title
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @instance
                 */
                CommunityPoolSpendProposalWithDeposit.prototype.title = "";

                /**
                 * CommunityPoolSpendProposalWithDeposit description.
                 * @member {string} description
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @instance
                 */
                CommunityPoolSpendProposalWithDeposit.prototype.description = "";

                /**
                 * CommunityPoolSpendProposalWithDeposit recipient.
                 * @member {string} recipient
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @instance
                 */
                CommunityPoolSpendProposalWithDeposit.prototype.recipient = "";

                /**
                 * CommunityPoolSpendProposalWithDeposit amount.
                 * @member {string} amount
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @instance
                 */
                CommunityPoolSpendProposalWithDeposit.prototype.amount = "";

                /**
                 * CommunityPoolSpendProposalWithDeposit deposit.
                 * @member {string} deposit
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @instance
                 */
                CommunityPoolSpendProposalWithDeposit.prototype.deposit = "";

                /**
                 * Encodes the specified CommunityPoolSpendProposalWithDeposit message. Does not implicitly {@link cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @static
                 * @param {cosmos.distribution.v1beta1.ICommunityPoolSpendProposalWithDeposit} m CommunityPoolSpendProposalWithDeposit message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommunityPoolSpendProposalWithDeposit.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.recipient != null && Object.hasOwnProperty.call(m, "recipient"))
                        w.uint32(26).string(m.recipient);
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        w.uint32(34).string(m.amount);
                    if (m.deposit != null && Object.hasOwnProperty.call(m, "deposit"))
                        w.uint32(42).string(m.deposit);
                    return w;
                };

                /**
                 * Decodes a CommunityPoolSpendProposalWithDeposit message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit} CommunityPoolSpendProposalWithDeposit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommunityPoolSpendProposalWithDeposit.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.recipient = r.string();
                                break;
                            case 4:
                                m.amount = r.string();
                                break;
                            case 5:
                                m.deposit = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CommunityPoolSpendProposalWithDeposit;
            })();

            return v1beta1;
        })();

        return distribution;
    })();

    cosmos.evidence = (function () {

        /**
         * Namespace evidence.
         * @memberof cosmos
         * @namespace
         */
        const evidence = {};

        evidence.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.evidence
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryEvidenceRequest = (function () {

                /**
                 * Properties of a QueryEvidenceRequest.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IQueryEvidenceRequest
                 * @property {Uint8Array|null} [evidence_hash] QueryEvidenceRequest evidence_hash
                 */

                /**
                 * Constructs a new QueryEvidenceRequest.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a QueryEvidenceRequest.
                 * @implements IQueryEvidenceRequest
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IQueryEvidenceRequest=} [p] Properties to set
                 */
                function QueryEvidenceRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryEvidenceRequest evidence_hash.
                 * @member {Uint8Array} evidence_hash
                 * @memberof cosmos.evidence.v1beta1.QueryEvidenceRequest
                 * @instance
                 */
                QueryEvidenceRequest.prototype.evidence_hash = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryEvidenceRequest message. Does not implicitly {@link cosmos.evidence.v1beta1.QueryEvidenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.QueryEvidenceRequest
                 * @static
                 * @param {cosmos.evidence.v1beta1.IQueryEvidenceRequest} m QueryEvidenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryEvidenceRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.evidence_hash != null && Object.hasOwnProperty.call(m, "evidence_hash"))
                        w.uint32(10).bytes(m.evidence_hash);
                    return w;
                };

                /**
                 * Decodes a QueryEvidenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.QueryEvidenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.QueryEvidenceRequest} QueryEvidenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryEvidenceRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.QueryEvidenceRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.evidence_hash = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryEvidenceRequest;
            })();

            v1beta1.QueryEvidenceResponse = (function () {

                /**
                 * Properties of a QueryEvidenceResponse.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IQueryEvidenceResponse
                 * @property {google.protobuf.IAny|null} [evidence] QueryEvidenceResponse evidence
                 */

                /**
                 * Constructs a new QueryEvidenceResponse.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a QueryEvidenceResponse.
                 * @implements IQueryEvidenceResponse
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IQueryEvidenceResponse=} [p] Properties to set
                 */
                function QueryEvidenceResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryEvidenceResponse evidence.
                 * @member {google.protobuf.IAny|null|undefined} evidence
                 * @memberof cosmos.evidence.v1beta1.QueryEvidenceResponse
                 * @instance
                 */
                QueryEvidenceResponse.prototype.evidence = null;

                /**
                 * Encodes the specified QueryEvidenceResponse message. Does not implicitly {@link cosmos.evidence.v1beta1.QueryEvidenceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.QueryEvidenceResponse
                 * @static
                 * @param {cosmos.evidence.v1beta1.IQueryEvidenceResponse} m QueryEvidenceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryEvidenceResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.evidence != null && Object.hasOwnProperty.call(m, "evidence"))
                        $root.google.protobuf.Any.encode(m.evidence, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryEvidenceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.QueryEvidenceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.QueryEvidenceResponse} QueryEvidenceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryEvidenceResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.QueryEvidenceResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.evidence = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryEvidenceResponse;
            })();

            v1beta1.QueryAllEvidenceRequest = (function () {

                /**
                 * Properties of a QueryAllEvidenceRequest.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IQueryAllEvidenceRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryAllEvidenceRequest pagination
                 */

                /**
                 * Constructs a new QueryAllEvidenceRequest.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a QueryAllEvidenceRequest.
                 * @implements IQueryAllEvidenceRequest
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IQueryAllEvidenceRequest=} [p] Properties to set
                 */
                function QueryAllEvidenceRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAllEvidenceRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceRequest
                 * @instance
                 */
                QueryAllEvidenceRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllEvidenceRequest message. Does not implicitly {@link cosmos.evidence.v1beta1.QueryAllEvidenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceRequest
                 * @static
                 * @param {cosmos.evidence.v1beta1.IQueryAllEvidenceRequest} m QueryAllEvidenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllEvidenceRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAllEvidenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.QueryAllEvidenceRequest} QueryAllEvidenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllEvidenceRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.QueryAllEvidenceRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAllEvidenceRequest;
            })();

            v1beta1.QueryAllEvidenceResponse = (function () {

                /**
                 * Properties of a QueryAllEvidenceResponse.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IQueryAllEvidenceResponse
                 * @property {Array.<google.protobuf.IAny>|null} [evidence] QueryAllEvidenceResponse evidence
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryAllEvidenceResponse pagination
                 */

                /**
                 * Constructs a new QueryAllEvidenceResponse.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a QueryAllEvidenceResponse.
                 * @implements IQueryAllEvidenceResponse
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IQueryAllEvidenceResponse=} [p] Properties to set
                 */
                function QueryAllEvidenceResponse(p) {
                    this.evidence = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAllEvidenceResponse evidence.
                 * @member {Array.<google.protobuf.IAny>} evidence
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceResponse
                 * @instance
                 */
                QueryAllEvidenceResponse.prototype.evidence = $util.emptyArray;

                /**
                 * QueryAllEvidenceResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceResponse
                 * @instance
                 */
                QueryAllEvidenceResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllEvidenceResponse message. Does not implicitly {@link cosmos.evidence.v1beta1.QueryAllEvidenceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceResponse
                 * @static
                 * @param {cosmos.evidence.v1beta1.IQueryAllEvidenceResponse} m QueryAllEvidenceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllEvidenceResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.evidence != null && m.evidence.length) {
                        for (var i = 0; i < m.evidence.length; ++i)
                            $root.google.protobuf.Any.encode(m.evidence[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryAllEvidenceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.QueryAllEvidenceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.QueryAllEvidenceResponse} QueryAllEvidenceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllEvidenceResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.QueryAllEvidenceResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.evidence && m.evidence.length))
                                    m.evidence = [];
                                m.evidence.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAllEvidenceResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IGenesisState
                 * @property {Array.<google.protobuf.IAny>|null} [evidence] GenesisState evidence
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.evidence = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState evidence.
                 * @member {Array.<google.protobuf.IAny>} evidence
                 * @memberof cosmos.evidence.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.evidence = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.evidence.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.evidence.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.evidence != null && m.evidence.length) {
                        for (var i = 0; i < m.evidence.length; ++i)
                            $root.google.protobuf.Any.encode(m.evidence[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.evidence && m.evidence.length))
                                    m.evidence = [];
                                m.evidence.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.Equivocation = (function () {

                /**
                 * Properties of an Equivocation.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IEquivocation
                 * @property {Long|null} [height] Equivocation height
                 * @property {google.protobuf.ITimestamp|null} [time] Equivocation time
                 * @property {Long|null} [power] Equivocation power
                 * @property {string|null} [consensus_address] Equivocation consensus_address
                 */

                /**
                 * Constructs a new Equivocation.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents an Equivocation.
                 * @implements IEquivocation
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IEquivocation=} [p] Properties to set
                 */
                function Equivocation(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Equivocation height.
                 * @member {Long} height
                 * @memberof cosmos.evidence.v1beta1.Equivocation
                 * @instance
                 */
                Equivocation.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Equivocation time.
                 * @member {google.protobuf.ITimestamp|null|undefined} time
                 * @memberof cosmos.evidence.v1beta1.Equivocation
                 * @instance
                 */
                Equivocation.prototype.time = null;

                /**
                 * Equivocation power.
                 * @member {Long} power
                 * @memberof cosmos.evidence.v1beta1.Equivocation
                 * @instance
                 */
                Equivocation.prototype.power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Equivocation consensus_address.
                 * @member {string} consensus_address
                 * @memberof cosmos.evidence.v1beta1.Equivocation
                 * @instance
                 */
                Equivocation.prototype.consensus_address = "";

                /**
                 * Encodes the specified Equivocation message. Does not implicitly {@link cosmos.evidence.v1beta1.Equivocation.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.Equivocation
                 * @static
                 * @param {cosmos.evidence.v1beta1.IEquivocation} m Equivocation message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Equivocation.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                        w.uint32(8).int64(m.height);
                    if (m.time != null && Object.hasOwnProperty.call(m, "time"))
                        $root.google.protobuf.Timestamp.encode(m.time, w.uint32(18).fork()).ldelim();
                    if (m.power != null && Object.hasOwnProperty.call(m, "power"))
                        w.uint32(24).int64(m.power);
                    if (m.consensus_address != null && Object.hasOwnProperty.call(m, "consensus_address"))
                        w.uint32(34).string(m.consensus_address);
                    return w;
                };

                /**
                 * Decodes an Equivocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.Equivocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.Equivocation} Equivocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Equivocation.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.Equivocation();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.height = r.int64();
                                break;
                            case 2:
                                m.time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 3:
                                m.power = r.int64();
                                break;
                            case 4:
                                m.consensus_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Equivocation;
            })();

            v1beta1.MsgSubmitEvidence = (function () {

                /**
                 * Properties of a MsgSubmitEvidence.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IMsgSubmitEvidence
                 * @property {string|null} [submitter] MsgSubmitEvidence submitter
                 * @property {google.protobuf.IAny|null} [evidence] MsgSubmitEvidence evidence
                 */

                /**
                 * Constructs a new MsgSubmitEvidence.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a MsgSubmitEvidence.
                 * @implements IMsgSubmitEvidence
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IMsgSubmitEvidence=} [p] Properties to set
                 */
                function MsgSubmitEvidence(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSubmitEvidence submitter.
                 * @member {string} submitter
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidence
                 * @instance
                 */
                MsgSubmitEvidence.prototype.submitter = "";

                /**
                 * MsgSubmitEvidence evidence.
                 * @member {google.protobuf.IAny|null|undefined} evidence
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidence
                 * @instance
                 */
                MsgSubmitEvidence.prototype.evidence = null;

                /**
                 * Encodes the specified MsgSubmitEvidence message. Does not implicitly {@link cosmos.evidence.v1beta1.MsgSubmitEvidence.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidence
                 * @static
                 * @param {cosmos.evidence.v1beta1.IMsgSubmitEvidence} m MsgSubmitEvidence message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitEvidence.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.submitter != null && Object.hasOwnProperty.call(m, "submitter"))
                        w.uint32(10).string(m.submitter);
                    if (m.evidence != null && Object.hasOwnProperty.call(m, "evidence"))
                        $root.google.protobuf.Any.encode(m.evidence, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgSubmitEvidence message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.MsgSubmitEvidence} MsgSubmitEvidence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitEvidence.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.MsgSubmitEvidence();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.submitter = r.string();
                                break;
                            case 2:
                                m.evidence = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSubmitEvidence;
            })();

            v1beta1.MsgSubmitEvidenceResponse = (function () {

                /**
                 * Properties of a MsgSubmitEvidenceResponse.
                 * @memberof cosmos.evidence.v1beta1
                 * @interface IMsgSubmitEvidenceResponse
                 * @property {Uint8Array|null} [hash] MsgSubmitEvidenceResponse hash
                 */

                /**
                 * Constructs a new MsgSubmitEvidenceResponse.
                 * @memberof cosmos.evidence.v1beta1
                 * @classdesc Represents a MsgSubmitEvidenceResponse.
                 * @implements IMsgSubmitEvidenceResponse
                 * @constructor
                 * @param {cosmos.evidence.v1beta1.IMsgSubmitEvidenceResponse=} [p] Properties to set
                 */
                function MsgSubmitEvidenceResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSubmitEvidenceResponse hash.
                 * @member {Uint8Array} hash
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse
                 * @instance
                 */
                MsgSubmitEvidenceResponse.prototype.hash = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgSubmitEvidenceResponse message. Does not implicitly {@link cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse
                 * @static
                 * @param {cosmos.evidence.v1beta1.IMsgSubmitEvidenceResponse} m MsgSubmitEvidenceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitEvidenceResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                        w.uint32(34).bytes(m.hash);
                    return w;
                };

                /**
                 * Decodes a MsgSubmitEvidenceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse} MsgSubmitEvidenceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitEvidenceResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 4:
                                m.hash = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSubmitEvidenceResponse;
            })();

            return v1beta1;
        })();

        return evidence;
    })();

    cosmos.genutil = (function () {

        /**
         * Namespace genutil.
         * @memberof cosmos
         * @namespace
         */
        const genutil = {};

        genutil.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.genutil
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.genutil.v1beta1
                 * @interface IGenesisState
                 * @property {Array.<Uint8Array>|null} [gen_txs] GenesisState gen_txs
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.genutil.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.genutil.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.gen_txs = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState gen_txs.
                 * @member {Array.<Uint8Array>} gen_txs
                 * @memberof cosmos.genutil.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.gen_txs = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.genutil.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.genutil.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.genutil.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.gen_txs != null && m.gen_txs.length) {
                        for (var i = 0; i < m.gen_txs.length; ++i)
                            w.uint32(10).bytes(m.gen_txs[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.genutil.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.genutil.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.genutil.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.gen_txs && m.gen_txs.length))
                                    m.gen_txs = [];
                                m.gen_txs.push(r.bytes());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            return v1beta1;
        })();

        return genutil;
    })();

    cosmos.gov = (function () {

        /**
         * Namespace gov.
         * @memberof cosmos
         * @namespace
         */
        const gov = {};

        gov.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.gov
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryProposalRequest = (function () {

                /**
                 * Properties of a QueryProposalRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryProposalRequest
                 * @property {Long|null} [proposal_id] QueryProposalRequest proposal_id
                 */

                /**
                 * Constructs a new QueryProposalRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryProposalRequest.
                 * @implements IQueryProposalRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryProposalRequest=} [p] Properties to set
                 */
                function QueryProposalRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryProposalRequest proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.QueryProposalRequest
                 * @instance
                 */
                QueryProposalRequest.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified QueryProposalRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryProposalRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryProposalRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryProposalRequest} m QueryProposalRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryProposalRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    return w;
                };

                /**
                 * Decodes a QueryProposalRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryProposalRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryProposalRequest} QueryProposalRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryProposalRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryProposalRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryProposalRequest;
            })();

            v1beta1.QueryProposalResponse = (function () {

                /**
                 * Properties of a QueryProposalResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryProposalResponse
                 * @property {cosmos.gov.v1beta1.IProposal|null} [proposal] QueryProposalResponse proposal
                 */

                /**
                 * Constructs a new QueryProposalResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryProposalResponse.
                 * @implements IQueryProposalResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryProposalResponse=} [p] Properties to set
                 */
                function QueryProposalResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryProposalResponse proposal.
                 * @member {cosmos.gov.v1beta1.IProposal|null|undefined} proposal
                 * @memberof cosmos.gov.v1beta1.QueryProposalResponse
                 * @instance
                 */
                QueryProposalResponse.prototype.proposal = null;

                /**
                 * Encodes the specified QueryProposalResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryProposalResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryProposalResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryProposalResponse} m QueryProposalResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryProposalResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal != null && Object.hasOwnProperty.call(m, "proposal"))
                        $root.cosmos.gov.v1beta1.Proposal.encode(m.proposal, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryProposalResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryProposalResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryProposalResponse} QueryProposalResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryProposalResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryProposalResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal = $root.cosmos.gov.v1beta1.Proposal.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryProposalResponse;
            })();

            v1beta1.QueryProposalsRequest = (function () {

                /**
                 * Properties of a QueryProposalsRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryProposalsRequest
                 * @property {cosmos.gov.v1beta1.ProposalStatus|null} [proposal_status] QueryProposalsRequest proposal_status
                 * @property {string|null} [voter] QueryProposalsRequest voter
                 * @property {string|null} [depositor] QueryProposalsRequest depositor
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryProposalsRequest pagination
                 */

                /**
                 * Constructs a new QueryProposalsRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryProposalsRequest.
                 * @implements IQueryProposalsRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryProposalsRequest=} [p] Properties to set
                 */
                function QueryProposalsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryProposalsRequest proposal_status.
                 * @member {cosmos.gov.v1beta1.ProposalStatus} proposal_status
                 * @memberof cosmos.gov.v1beta1.QueryProposalsRequest
                 * @instance
                 */
                QueryProposalsRequest.prototype.proposal_status = 0;

                /**
                 * QueryProposalsRequest voter.
                 * @member {string} voter
                 * @memberof cosmos.gov.v1beta1.QueryProposalsRequest
                 * @instance
                 */
                QueryProposalsRequest.prototype.voter = "";

                /**
                 * QueryProposalsRequest depositor.
                 * @member {string} depositor
                 * @memberof cosmos.gov.v1beta1.QueryProposalsRequest
                 * @instance
                 */
                QueryProposalsRequest.prototype.depositor = "";

                /**
                 * QueryProposalsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.gov.v1beta1.QueryProposalsRequest
                 * @instance
                 */
                QueryProposalsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryProposalsRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryProposalsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryProposalsRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryProposalsRequest} m QueryProposalsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryProposalsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_status != null && Object.hasOwnProperty.call(m, "proposal_status"))
                        w.uint32(8).int32(m.proposal_status);
                    if (m.voter != null && Object.hasOwnProperty.call(m, "voter"))
                        w.uint32(18).string(m.voter);
                    if (m.depositor != null && Object.hasOwnProperty.call(m, "depositor"))
                        w.uint32(26).string(m.depositor);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryProposalsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryProposalsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryProposalsRequest} QueryProposalsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryProposalsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryProposalsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_status = r.int32();
                                break;
                            case 2:
                                m.voter = r.string();
                                break;
                            case 3:
                                m.depositor = r.string();
                                break;
                            case 4:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryProposalsRequest;
            })();

            v1beta1.QueryProposalsResponse = (function () {

                /**
                 * Properties of a QueryProposalsResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryProposalsResponse
                 * @property {Array.<cosmos.gov.v1beta1.IProposal>|null} [proposals] QueryProposalsResponse proposals
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryProposalsResponse pagination
                 */

                /**
                 * Constructs a new QueryProposalsResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryProposalsResponse.
                 * @implements IQueryProposalsResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryProposalsResponse=} [p] Properties to set
                 */
                function QueryProposalsResponse(p) {
                    this.proposals = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryProposalsResponse proposals.
                 * @member {Array.<cosmos.gov.v1beta1.IProposal>} proposals
                 * @memberof cosmos.gov.v1beta1.QueryProposalsResponse
                 * @instance
                 */
                QueryProposalsResponse.prototype.proposals = $util.emptyArray;

                /**
                 * QueryProposalsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.gov.v1beta1.QueryProposalsResponse
                 * @instance
                 */
                QueryProposalsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryProposalsResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryProposalsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryProposalsResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryProposalsResponse} m QueryProposalsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryProposalsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposals != null && m.proposals.length) {
                        for (var i = 0; i < m.proposals.length; ++i)
                            $root.cosmos.gov.v1beta1.Proposal.encode(m.proposals[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryProposalsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryProposalsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryProposalsResponse} QueryProposalsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryProposalsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryProposalsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.proposals && m.proposals.length))
                                    m.proposals = [];
                                m.proposals.push($root.cosmos.gov.v1beta1.Proposal.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryProposalsResponse;
            })();

            v1beta1.QueryVoteRequest = (function () {

                /**
                 * Properties of a QueryVoteRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryVoteRequest
                 * @property {Long|null} [proposal_id] QueryVoteRequest proposal_id
                 * @property {string|null} [voter] QueryVoteRequest voter
                 */

                /**
                 * Constructs a new QueryVoteRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryVoteRequest.
                 * @implements IQueryVoteRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryVoteRequest=} [p] Properties to set
                 */
                function QueryVoteRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryVoteRequest proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.QueryVoteRequest
                 * @instance
                 */
                QueryVoteRequest.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryVoteRequest voter.
                 * @member {string} voter
                 * @memberof cosmos.gov.v1beta1.QueryVoteRequest
                 * @instance
                 */
                QueryVoteRequest.prototype.voter = "";

                /**
                 * Encodes the specified QueryVoteRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryVoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryVoteRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryVoteRequest} m QueryVoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryVoteRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.voter != null && Object.hasOwnProperty.call(m, "voter"))
                        w.uint32(18).string(m.voter);
                    return w;
                };

                /**
                 * Decodes a QueryVoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryVoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryVoteRequest} QueryVoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryVoteRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryVoteRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.voter = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryVoteRequest;
            })();

            v1beta1.QueryVoteResponse = (function () {

                /**
                 * Properties of a QueryVoteResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryVoteResponse
                 * @property {cosmos.gov.v1beta1.IVote|null} [vote] QueryVoteResponse vote
                 */

                /**
                 * Constructs a new QueryVoteResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryVoteResponse.
                 * @implements IQueryVoteResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryVoteResponse=} [p] Properties to set
                 */
                function QueryVoteResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryVoteResponse vote.
                 * @member {cosmos.gov.v1beta1.IVote|null|undefined} vote
                 * @memberof cosmos.gov.v1beta1.QueryVoteResponse
                 * @instance
                 */
                QueryVoteResponse.prototype.vote = null;

                /**
                 * Encodes the specified QueryVoteResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryVoteResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryVoteResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryVoteResponse} m QueryVoteResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryVoteResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.vote != null && Object.hasOwnProperty.call(m, "vote"))
                        $root.cosmos.gov.v1beta1.Vote.encode(m.vote, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryVoteResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryVoteResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryVoteResponse} QueryVoteResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryVoteResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryVoteResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.vote = $root.cosmos.gov.v1beta1.Vote.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryVoteResponse;
            })();

            v1beta1.QueryVotesRequest = (function () {

                /**
                 * Properties of a QueryVotesRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryVotesRequest
                 * @property {Long|null} [proposal_id] QueryVotesRequest proposal_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryVotesRequest pagination
                 */

                /**
                 * Constructs a new QueryVotesRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryVotesRequest.
                 * @implements IQueryVotesRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryVotesRequest=} [p] Properties to set
                 */
                function QueryVotesRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryVotesRequest proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.QueryVotesRequest
                 * @instance
                 */
                QueryVotesRequest.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryVotesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.gov.v1beta1.QueryVotesRequest
                 * @instance
                 */
                QueryVotesRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryVotesRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryVotesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryVotesRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryVotesRequest} m QueryVotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryVotesRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryVotesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryVotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryVotesRequest} QueryVotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryVotesRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryVotesRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryVotesRequest;
            })();

            v1beta1.QueryVotesResponse = (function () {

                /**
                 * Properties of a QueryVotesResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryVotesResponse
                 * @property {Array.<cosmos.gov.v1beta1.IVote>|null} [votes] QueryVotesResponse votes
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryVotesResponse pagination
                 */

                /**
                 * Constructs a new QueryVotesResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryVotesResponse.
                 * @implements IQueryVotesResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryVotesResponse=} [p] Properties to set
                 */
                function QueryVotesResponse(p) {
                    this.votes = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryVotesResponse votes.
                 * @member {Array.<cosmos.gov.v1beta1.IVote>} votes
                 * @memberof cosmos.gov.v1beta1.QueryVotesResponse
                 * @instance
                 */
                QueryVotesResponse.prototype.votes = $util.emptyArray;

                /**
                 * QueryVotesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.gov.v1beta1.QueryVotesResponse
                 * @instance
                 */
                QueryVotesResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryVotesResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryVotesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryVotesResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryVotesResponse} m QueryVotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryVotesResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.votes != null && m.votes.length) {
                        for (var i = 0; i < m.votes.length; ++i)
                            $root.cosmos.gov.v1beta1.Vote.encode(m.votes[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryVotesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryVotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryVotesResponse} QueryVotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryVotesResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryVotesResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.votes && m.votes.length))
                                    m.votes = [];
                                m.votes.push($root.cosmos.gov.v1beta1.Vote.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryVotesResponse;
            })();

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryParamsRequest
                 * @property {string|null} [params_type] QueryParamsRequest params_type
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsRequest params_type.
                 * @member {string} params_type
                 * @memberof cosmos.gov.v1beta1.QueryParamsRequest
                 * @instance
                 */
                QueryParamsRequest.prototype.params_type = "";

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params_type != null && Object.hasOwnProperty.call(m, "params_type"))
                        w.uint32(10).string(m.params_type);
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params_type = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.gov.v1beta1.IVotingParams|null} [voting_params] QueryParamsResponse voting_params
                 * @property {cosmos.gov.v1beta1.IDepositParams|null} [deposit_params] QueryParamsResponse deposit_params
                 * @property {cosmos.gov.v1beta1.ITallyParams|null} [tally_params] QueryParamsResponse tally_params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse voting_params.
                 * @member {cosmos.gov.v1beta1.IVotingParams|null|undefined} voting_params
                 * @memberof cosmos.gov.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.voting_params = null;

                /**
                 * QueryParamsResponse deposit_params.
                 * @member {cosmos.gov.v1beta1.IDepositParams|null|undefined} deposit_params
                 * @memberof cosmos.gov.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.deposit_params = null;

                /**
                 * QueryParamsResponse tally_params.
                 * @member {cosmos.gov.v1beta1.ITallyParams|null|undefined} tally_params
                 * @memberof cosmos.gov.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.tally_params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.voting_params != null && Object.hasOwnProperty.call(m, "voting_params"))
                        $root.cosmos.gov.v1beta1.VotingParams.encode(m.voting_params, w.uint32(10).fork()).ldelim();
                    if (m.deposit_params != null && Object.hasOwnProperty.call(m, "deposit_params"))
                        $root.cosmos.gov.v1beta1.DepositParams.encode(m.deposit_params, w.uint32(18).fork()).ldelim();
                    if (m.tally_params != null && Object.hasOwnProperty.call(m, "tally_params"))
                        $root.cosmos.gov.v1beta1.TallyParams.encode(m.tally_params, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.voting_params = $root.cosmos.gov.v1beta1.VotingParams.decode(r, r.uint32());
                                break;
                            case 2:
                                m.deposit_params = $root.cosmos.gov.v1beta1.DepositParams.decode(r, r.uint32());
                                break;
                            case 3:
                                m.tally_params = $root.cosmos.gov.v1beta1.TallyParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.QueryDepositRequest = (function () {

                /**
                 * Properties of a QueryDepositRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryDepositRequest
                 * @property {Long|null} [proposal_id] QueryDepositRequest proposal_id
                 * @property {string|null} [depositor] QueryDepositRequest depositor
                 */

                /**
                 * Constructs a new QueryDepositRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryDepositRequest.
                 * @implements IQueryDepositRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryDepositRequest=} [p] Properties to set
                 */
                function QueryDepositRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDepositRequest proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.QueryDepositRequest
                 * @instance
                 */
                QueryDepositRequest.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryDepositRequest depositor.
                 * @member {string} depositor
                 * @memberof cosmos.gov.v1beta1.QueryDepositRequest
                 * @instance
                 */
                QueryDepositRequest.prototype.depositor = "";

                /**
                 * Encodes the specified QueryDepositRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryDepositRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryDepositRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryDepositRequest} m QueryDepositRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDepositRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.depositor != null && Object.hasOwnProperty.call(m, "depositor"))
                        w.uint32(18).string(m.depositor);
                    return w;
                };

                /**
                 * Decodes a QueryDepositRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryDepositRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryDepositRequest} QueryDepositRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDepositRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryDepositRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.depositor = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDepositRequest;
            })();

            v1beta1.QueryDepositResponse = (function () {

                /**
                 * Properties of a QueryDepositResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryDepositResponse
                 * @property {cosmos.gov.v1beta1.IDeposit|null} [deposit] QueryDepositResponse deposit
                 */

                /**
                 * Constructs a new QueryDepositResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryDepositResponse.
                 * @implements IQueryDepositResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryDepositResponse=} [p] Properties to set
                 */
                function QueryDepositResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDepositResponse deposit.
                 * @member {cosmos.gov.v1beta1.IDeposit|null|undefined} deposit
                 * @memberof cosmos.gov.v1beta1.QueryDepositResponse
                 * @instance
                 */
                QueryDepositResponse.prototype.deposit = null;

                /**
                 * Encodes the specified QueryDepositResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryDepositResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryDepositResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryDepositResponse} m QueryDepositResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDepositResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.deposit != null && Object.hasOwnProperty.call(m, "deposit"))
                        $root.cosmos.gov.v1beta1.Deposit.encode(m.deposit, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDepositResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryDepositResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryDepositResponse} QueryDepositResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDepositResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryDepositResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.deposit = $root.cosmos.gov.v1beta1.Deposit.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDepositResponse;
            })();

            v1beta1.QueryDepositsRequest = (function () {

                /**
                 * Properties of a QueryDepositsRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryDepositsRequest
                 * @property {Long|null} [proposal_id] QueryDepositsRequest proposal_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDepositsRequest pagination
                 */

                /**
                 * Constructs a new QueryDepositsRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryDepositsRequest.
                 * @implements IQueryDepositsRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryDepositsRequest=} [p] Properties to set
                 */
                function QueryDepositsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDepositsRequest proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.QueryDepositsRequest
                 * @instance
                 */
                QueryDepositsRequest.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * QueryDepositsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.gov.v1beta1.QueryDepositsRequest
                 * @instance
                 */
                QueryDepositsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDepositsRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryDepositsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryDepositsRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryDepositsRequest} m QueryDepositsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDepositsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDepositsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryDepositsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryDepositsRequest} QueryDepositsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDepositsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryDepositsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDepositsRequest;
            })();

            v1beta1.QueryDepositsResponse = (function () {

                /**
                 * Properties of a QueryDepositsResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryDepositsResponse
                 * @property {Array.<cosmos.gov.v1beta1.IDeposit>|null} [deposits] QueryDepositsResponse deposits
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDepositsResponse pagination
                 */

                /**
                 * Constructs a new QueryDepositsResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryDepositsResponse.
                 * @implements IQueryDepositsResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryDepositsResponse=} [p] Properties to set
                 */
                function QueryDepositsResponse(p) {
                    this.deposits = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDepositsResponse deposits.
                 * @member {Array.<cosmos.gov.v1beta1.IDeposit>} deposits
                 * @memberof cosmos.gov.v1beta1.QueryDepositsResponse
                 * @instance
                 */
                QueryDepositsResponse.prototype.deposits = $util.emptyArray;

                /**
                 * QueryDepositsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.gov.v1beta1.QueryDepositsResponse
                 * @instance
                 */
                QueryDepositsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDepositsResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryDepositsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryDepositsResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryDepositsResponse} m QueryDepositsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDepositsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.deposits != null && m.deposits.length) {
                        for (var i = 0; i < m.deposits.length; ++i)
                            $root.cosmos.gov.v1beta1.Deposit.encode(m.deposits[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDepositsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryDepositsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryDepositsResponse} QueryDepositsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDepositsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryDepositsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.deposits && m.deposits.length))
                                    m.deposits = [];
                                m.deposits.push($root.cosmos.gov.v1beta1.Deposit.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDepositsResponse;
            })();

            v1beta1.QueryTallyResultRequest = (function () {

                /**
                 * Properties of a QueryTallyResultRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryTallyResultRequest
                 * @property {Long|null} [proposal_id] QueryTallyResultRequest proposal_id
                 */

                /**
                 * Constructs a new QueryTallyResultRequest.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryTallyResultRequest.
                 * @implements IQueryTallyResultRequest
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryTallyResultRequest=} [p] Properties to set
                 */
                function QueryTallyResultRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTallyResultRequest proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.QueryTallyResultRequest
                 * @instance
                 */
                QueryTallyResultRequest.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified QueryTallyResultRequest message. Does not implicitly {@link cosmos.gov.v1beta1.QueryTallyResultRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryTallyResultRequest
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryTallyResultRequest} m QueryTallyResultRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTallyResultRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    return w;
                };

                /**
                 * Decodes a QueryTallyResultRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryTallyResultRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryTallyResultRequest} QueryTallyResultRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTallyResultRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryTallyResultRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTallyResultRequest;
            })();

            v1beta1.QueryTallyResultResponse = (function () {

                /**
                 * Properties of a QueryTallyResultResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IQueryTallyResultResponse
                 * @property {cosmos.gov.v1beta1.ITallyResult|null} [tally] QueryTallyResultResponse tally
                 */

                /**
                 * Constructs a new QueryTallyResultResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a QueryTallyResultResponse.
                 * @implements IQueryTallyResultResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IQueryTallyResultResponse=} [p] Properties to set
                 */
                function QueryTallyResultResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTallyResultResponse tally.
                 * @member {cosmos.gov.v1beta1.ITallyResult|null|undefined} tally
                 * @memberof cosmos.gov.v1beta1.QueryTallyResultResponse
                 * @instance
                 */
                QueryTallyResultResponse.prototype.tally = null;

                /**
                 * Encodes the specified QueryTallyResultResponse message. Does not implicitly {@link cosmos.gov.v1beta1.QueryTallyResultResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.QueryTallyResultResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IQueryTallyResultResponse} m QueryTallyResultResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTallyResultResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.tally != null && Object.hasOwnProperty.call(m, "tally"))
                        $root.cosmos.gov.v1beta1.TallyResult.encode(m.tally, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryTallyResultResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.QueryTallyResultResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.QueryTallyResultResponse} QueryTallyResultResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTallyResultResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.QueryTallyResultResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.tally = $root.cosmos.gov.v1beta1.TallyResult.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTallyResultResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IGenesisState
                 * @property {Long|null} [starting_proposal_id] GenesisState starting_proposal_id
                 * @property {Array.<cosmos.gov.v1beta1.IDeposit>|null} [deposits] GenesisState deposits
                 * @property {Array.<cosmos.gov.v1beta1.IVote>|null} [votes] GenesisState votes
                 * @property {Array.<cosmos.gov.v1beta1.IProposal>|null} [proposals] GenesisState proposals
                 * @property {cosmos.gov.v1beta1.IDepositParams|null} [deposit_params] GenesisState deposit_params
                 * @property {cosmos.gov.v1beta1.IVotingParams|null} [voting_params] GenesisState voting_params
                 * @property {cosmos.gov.v1beta1.ITallyParams|null} [tally_params] GenesisState tally_params
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.deposits = [];
                    this.votes = [];
                    this.proposals = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState starting_proposal_id.
                 * @member {Long} starting_proposal_id
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.starting_proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * GenesisState deposits.
                 * @member {Array.<cosmos.gov.v1beta1.IDeposit>} deposits
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.deposits = $util.emptyArray;

                /**
                 * GenesisState votes.
                 * @member {Array.<cosmos.gov.v1beta1.IVote>} votes
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.votes = $util.emptyArray;

                /**
                 * GenesisState proposals.
                 * @member {Array.<cosmos.gov.v1beta1.IProposal>} proposals
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.proposals = $util.emptyArray;

                /**
                 * GenesisState deposit_params.
                 * @member {cosmos.gov.v1beta1.IDepositParams|null|undefined} deposit_params
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.deposit_params = null;

                /**
                 * GenesisState voting_params.
                 * @member {cosmos.gov.v1beta1.IVotingParams|null|undefined} voting_params
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.voting_params = null;

                /**
                 * GenesisState tally_params.
                 * @member {cosmos.gov.v1beta1.ITallyParams|null|undefined} tally_params
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.tally_params = null;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.gov.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.gov.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.starting_proposal_id != null && Object.hasOwnProperty.call(m, "starting_proposal_id"))
                        w.uint32(8).uint64(m.starting_proposal_id);
                    if (m.deposits != null && m.deposits.length) {
                        for (var i = 0; i < m.deposits.length; ++i)
                            $root.cosmos.gov.v1beta1.Deposit.encode(m.deposits[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.votes != null && m.votes.length) {
                        for (var i = 0; i < m.votes.length; ++i)
                            $root.cosmos.gov.v1beta1.Vote.encode(m.votes[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.proposals != null && m.proposals.length) {
                        for (var i = 0; i < m.proposals.length; ++i)
                            $root.cosmos.gov.v1beta1.Proposal.encode(m.proposals[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.deposit_params != null && Object.hasOwnProperty.call(m, "deposit_params"))
                        $root.cosmos.gov.v1beta1.DepositParams.encode(m.deposit_params, w.uint32(42).fork()).ldelim();
                    if (m.voting_params != null && Object.hasOwnProperty.call(m, "voting_params"))
                        $root.cosmos.gov.v1beta1.VotingParams.encode(m.voting_params, w.uint32(50).fork()).ldelim();
                    if (m.tally_params != null && Object.hasOwnProperty.call(m, "tally_params"))
                        $root.cosmos.gov.v1beta1.TallyParams.encode(m.tally_params, w.uint32(58).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.starting_proposal_id = r.uint64();
                                break;
                            case 2:
                                if (!(m.deposits && m.deposits.length))
                                    m.deposits = [];
                                m.deposits.push($root.cosmos.gov.v1beta1.Deposit.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.votes && m.votes.length))
                                    m.votes = [];
                                m.votes.push($root.cosmos.gov.v1beta1.Vote.decode(r, r.uint32()));
                                break;
                            case 4:
                                if (!(m.proposals && m.proposals.length))
                                    m.proposals = [];
                                m.proposals.push($root.cosmos.gov.v1beta1.Proposal.decode(r, r.uint32()));
                                break;
                            case 5:
                                m.deposit_params = $root.cosmos.gov.v1beta1.DepositParams.decode(r, r.uint32());
                                break;
                            case 6:
                                m.voting_params = $root.cosmos.gov.v1beta1.VotingParams.decode(r, r.uint32());
                                break;
                            case 7:
                                m.tally_params = $root.cosmos.gov.v1beta1.TallyParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            /**
             * VoteOption enum.
             * @name cosmos.gov.v1beta1.VoteOption
             * @enum {number}
             * @property {number} VOTE_OPTION_UNSPECIFIED=0 VOTE_OPTION_UNSPECIFIED value
             * @property {number} VOTE_OPTION_YES=1 VOTE_OPTION_YES value
             * @property {number} VOTE_OPTION_ABSTAIN=2 VOTE_OPTION_ABSTAIN value
             * @property {number} VOTE_OPTION_NO=3 VOTE_OPTION_NO value
             * @property {number} VOTE_OPTION_NO_WITH_VETO=4 VOTE_OPTION_NO_WITH_VETO value
             */
            v1beta1.VoteOption = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "VOTE_OPTION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "VOTE_OPTION_YES"] = 1;
                values[valuesById[2] = "VOTE_OPTION_ABSTAIN"] = 2;
                values[valuesById[3] = "VOTE_OPTION_NO"] = 3;
                values[valuesById[4] = "VOTE_OPTION_NO_WITH_VETO"] = 4;
                return values;
            })();

            v1beta1.TextProposal = (function () {

                /**
                 * Properties of a TextProposal.
                 * @memberof cosmos.gov.v1beta1
                 * @interface ITextProposal
                 * @property {string|null} [title] TextProposal title
                 * @property {string|null} [description] TextProposal description
                 */

                /**
                 * Constructs a new TextProposal.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a TextProposal.
                 * @implements ITextProposal
                 * @constructor
                 * @param {cosmos.gov.v1beta1.ITextProposal=} [p] Properties to set
                 */
                function TextProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * TextProposal title.
                 * @member {string} title
                 * @memberof cosmos.gov.v1beta1.TextProposal
                 * @instance
                 */
                TextProposal.prototype.title = "";

                /**
                 * TextProposal description.
                 * @member {string} description
                 * @memberof cosmos.gov.v1beta1.TextProposal
                 * @instance
                 */
                TextProposal.prototype.description = "";

                /**
                 * Encodes the specified TextProposal message. Does not implicitly {@link cosmos.gov.v1beta1.TextProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.TextProposal
                 * @static
                 * @param {cosmos.gov.v1beta1.ITextProposal} m TextProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TextProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    return w;
                };

                /**
                 * Decodes a TextProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.TextProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.TextProposal} TextProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TextProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.TextProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return TextProposal;
            })();

            v1beta1.Deposit = (function () {

                /**
                 * Properties of a Deposit.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IDeposit
                 * @property {Long|null} [proposal_id] Deposit proposal_id
                 * @property {string|null} [depositor] Deposit depositor
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] Deposit amount
                 */

                /**
                 * Constructs a new Deposit.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a Deposit.
                 * @implements IDeposit
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IDeposit=} [p] Properties to set
                 */
                function Deposit(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Deposit proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.Deposit
                 * @instance
                 */
                Deposit.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Deposit depositor.
                 * @member {string} depositor
                 * @memberof cosmos.gov.v1beta1.Deposit
                 * @instance
                 */
                Deposit.prototype.depositor = "";

                /**
                 * Deposit amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.gov.v1beta1.Deposit
                 * @instance
                 */
                Deposit.prototype.amount = $util.emptyArray;

                /**
                 * Encodes the specified Deposit message. Does not implicitly {@link cosmos.gov.v1beta1.Deposit.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.Deposit
                 * @static
                 * @param {cosmos.gov.v1beta1.IDeposit} m Deposit message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Deposit.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.depositor != null && Object.hasOwnProperty.call(m, "depositor"))
                        w.uint32(18).string(m.depositor);
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Deposit message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.Deposit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.Deposit} Deposit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Deposit.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.Deposit();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.depositor = r.string();
                                break;
                            case 3:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Deposit;
            })();

            v1beta1.Proposal = (function () {

                /**
                 * Properties of a Proposal.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IProposal
                 * @property {Long|null} [proposal_id] Proposal proposal_id
                 * @property {google.protobuf.IAny|null} [content] Proposal content
                 * @property {cosmos.gov.v1beta1.ProposalStatus|null} [status] Proposal status
                 * @property {cosmos.gov.v1beta1.ITallyResult|null} [final_tally_result] Proposal final_tally_result
                 * @property {google.protobuf.ITimestamp|null} [submit_time] Proposal submit_time
                 * @property {google.protobuf.ITimestamp|null} [deposit_end_time] Proposal deposit_end_time
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [total_deposit] Proposal total_deposit
                 * @property {google.protobuf.ITimestamp|null} [voting_start_time] Proposal voting_start_time
                 * @property {google.protobuf.ITimestamp|null} [voting_end_time] Proposal voting_end_time
                 */

                /**
                 * Constructs a new Proposal.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a Proposal.
                 * @implements IProposal
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IProposal=} [p] Properties to set
                 */
                function Proposal(p) {
                    this.total_deposit = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Proposal proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Proposal content.
                 * @member {google.protobuf.IAny|null|undefined} content
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.content = null;

                /**
                 * Proposal status.
                 * @member {cosmos.gov.v1beta1.ProposalStatus} status
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.status = 0;

                /**
                 * Proposal final_tally_result.
                 * @member {cosmos.gov.v1beta1.ITallyResult|null|undefined} final_tally_result
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.final_tally_result = null;

                /**
                 * Proposal submit_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} submit_time
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.submit_time = null;

                /**
                 * Proposal deposit_end_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} deposit_end_time
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.deposit_end_time = null;

                /**
                 * Proposal total_deposit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} total_deposit
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.total_deposit = $util.emptyArray;

                /**
                 * Proposal voting_start_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} voting_start_time
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.voting_start_time = null;

                /**
                 * Proposal voting_end_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} voting_end_time
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @instance
                 */
                Proposal.prototype.voting_end_time = null;

                /**
                 * Encodes the specified Proposal message. Does not implicitly {@link cosmos.gov.v1beta1.Proposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @static
                 * @param {cosmos.gov.v1beta1.IProposal} m Proposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Proposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                        $root.google.protobuf.Any.encode(m.content, w.uint32(18).fork()).ldelim();
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(24).int32(m.status);
                    if (m.final_tally_result != null && Object.hasOwnProperty.call(m, "final_tally_result"))
                        $root.cosmos.gov.v1beta1.TallyResult.encode(m.final_tally_result, w.uint32(34).fork()).ldelim();
                    if (m.submit_time != null && Object.hasOwnProperty.call(m, "submit_time"))
                        $root.google.protobuf.Timestamp.encode(m.submit_time, w.uint32(42).fork()).ldelim();
                    if (m.deposit_end_time != null && Object.hasOwnProperty.call(m, "deposit_end_time"))
                        $root.google.protobuf.Timestamp.encode(m.deposit_end_time, w.uint32(50).fork()).ldelim();
                    if (m.total_deposit != null && m.total_deposit.length) {
                        for (var i = 0; i < m.total_deposit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.total_deposit[i], w.uint32(58).fork()).ldelim();
                    }
                    if (m.voting_start_time != null && Object.hasOwnProperty.call(m, "voting_start_time"))
                        $root.google.protobuf.Timestamp.encode(m.voting_start_time, w.uint32(66).fork()).ldelim();
                    if (m.voting_end_time != null && Object.hasOwnProperty.call(m, "voting_end_time"))
                        $root.google.protobuf.Timestamp.encode(m.voting_end_time, w.uint32(74).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a Proposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.Proposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.Proposal} Proposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Proposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.Proposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.content = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            case 3:
                                m.status = r.int32();
                                break;
                            case 4:
                                m.final_tally_result = $root.cosmos.gov.v1beta1.TallyResult.decode(r, r.uint32());
                                break;
                            case 5:
                                m.submit_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 6:
                                m.deposit_end_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 7:
                                if (!(m.total_deposit && m.total_deposit.length))
                                    m.total_deposit = [];
                                m.total_deposit.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 8:
                                m.voting_start_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 9:
                                m.voting_end_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Proposal;
            })();

            /**
             * ProposalStatus enum.
             * @name cosmos.gov.v1beta1.ProposalStatus
             * @enum {number}
             * @property {number} PROPOSAL_STATUS_UNSPECIFIED=0 PROPOSAL_STATUS_UNSPECIFIED value
             * @property {number} PROPOSAL_STATUS_DEPOSIT_PERIOD=1 PROPOSAL_STATUS_DEPOSIT_PERIOD value
             * @property {number} PROPOSAL_STATUS_VOTING_PERIOD=2 PROPOSAL_STATUS_VOTING_PERIOD value
             * @property {number} PROPOSAL_STATUS_PASSED=3 PROPOSAL_STATUS_PASSED value
             * @property {number} PROPOSAL_STATUS_REJECTED=4 PROPOSAL_STATUS_REJECTED value
             * @property {number} PROPOSAL_STATUS_FAILED=5 PROPOSAL_STATUS_FAILED value
             */
            v1beta1.ProposalStatus = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "PROPOSAL_STATUS_UNSPECIFIED"] = 0;
                values[valuesById[1] = "PROPOSAL_STATUS_DEPOSIT_PERIOD"] = 1;
                values[valuesById[2] = "PROPOSAL_STATUS_VOTING_PERIOD"] = 2;
                values[valuesById[3] = "PROPOSAL_STATUS_PASSED"] = 3;
                values[valuesById[4] = "PROPOSAL_STATUS_REJECTED"] = 4;
                values[valuesById[5] = "PROPOSAL_STATUS_FAILED"] = 5;
                return values;
            })();

            v1beta1.TallyResult = (function () {

                /**
                 * Properties of a TallyResult.
                 * @memberof cosmos.gov.v1beta1
                 * @interface ITallyResult
                 * @property {string|null} [yes] TallyResult yes
                 * @property {string|null} [abstain] TallyResult abstain
                 * @property {string|null} [no] TallyResult no
                 * @property {string|null} [no_with_veto] TallyResult no_with_veto
                 */

                /**
                 * Constructs a new TallyResult.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a TallyResult.
                 * @implements ITallyResult
                 * @constructor
                 * @param {cosmos.gov.v1beta1.ITallyResult=} [p] Properties to set
                 */
                function TallyResult(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * TallyResult yes.
                 * @member {string} yes
                 * @memberof cosmos.gov.v1beta1.TallyResult
                 * @instance
                 */
                TallyResult.prototype.yes = "";

                /**
                 * TallyResult abstain.
                 * @member {string} abstain
                 * @memberof cosmos.gov.v1beta1.TallyResult
                 * @instance
                 */
                TallyResult.prototype.abstain = "";

                /**
                 * TallyResult no.
                 * @member {string} no
                 * @memberof cosmos.gov.v1beta1.TallyResult
                 * @instance
                 */
                TallyResult.prototype.no = "";

                /**
                 * TallyResult no_with_veto.
                 * @member {string} no_with_veto
                 * @memberof cosmos.gov.v1beta1.TallyResult
                 * @instance
                 */
                TallyResult.prototype.no_with_veto = "";

                /**
                 * Encodes the specified TallyResult message. Does not implicitly {@link cosmos.gov.v1beta1.TallyResult.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.TallyResult
                 * @static
                 * @param {cosmos.gov.v1beta1.ITallyResult} m TallyResult message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TallyResult.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.yes != null && Object.hasOwnProperty.call(m, "yes"))
                        w.uint32(10).string(m.yes);
                    if (m.abstain != null && Object.hasOwnProperty.call(m, "abstain"))
                        w.uint32(18).string(m.abstain);
                    if (m.no != null && Object.hasOwnProperty.call(m, "no"))
                        w.uint32(26).string(m.no);
                    if (m.no_with_veto != null && Object.hasOwnProperty.call(m, "no_with_veto"))
                        w.uint32(34).string(m.no_with_veto);
                    return w;
                };

                /**
                 * Decodes a TallyResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.TallyResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.TallyResult} TallyResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TallyResult.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.TallyResult();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.yes = r.string();
                                break;
                            case 2:
                                m.abstain = r.string();
                                break;
                            case 3:
                                m.no = r.string();
                                break;
                            case 4:
                                m.no_with_veto = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return TallyResult;
            })();

            v1beta1.Vote = (function () {

                /**
                 * Properties of a Vote.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IVote
                 * @property {Long|null} [proposal_id] Vote proposal_id
                 * @property {string|null} [voter] Vote voter
                 * @property {cosmos.gov.v1beta1.VoteOption|null} [option] Vote option
                 */

                /**
                 * Constructs a new Vote.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a Vote.
                 * @implements IVote
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IVote=} [p] Properties to set
                 */
                function Vote(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Vote proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.Vote
                 * @instance
                 */
                Vote.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Vote voter.
                 * @member {string} voter
                 * @memberof cosmos.gov.v1beta1.Vote
                 * @instance
                 */
                Vote.prototype.voter = "";

                /**
                 * Vote option.
                 * @member {cosmos.gov.v1beta1.VoteOption} option
                 * @memberof cosmos.gov.v1beta1.Vote
                 * @instance
                 */
                Vote.prototype.option = 0;

                /**
                 * Encodes the specified Vote message. Does not implicitly {@link cosmos.gov.v1beta1.Vote.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.Vote
                 * @static
                 * @param {cosmos.gov.v1beta1.IVote} m Vote message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vote.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.voter != null && Object.hasOwnProperty.call(m, "voter"))
                        w.uint32(18).string(m.voter);
                    if (m.option != null && Object.hasOwnProperty.call(m, "option"))
                        w.uint32(24).int32(m.option);
                    return w;
                };

                /**
                 * Decodes a Vote message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.Vote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.Vote} Vote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vote.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.Vote();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.voter = r.string();
                                break;
                            case 3:
                                m.option = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Vote;
            })();

            v1beta1.DepositParams = (function () {

                /**
                 * Properties of a DepositParams.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IDepositParams
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [min_deposit] DepositParams min_deposit
                 * @property {google.protobuf.IDuration|null} [max_deposit_period] DepositParams max_deposit_period
                 */

                /**
                 * Constructs a new DepositParams.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a DepositParams.
                 * @implements IDepositParams
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IDepositParams=} [p] Properties to set
                 */
                function DepositParams(p) {
                    this.min_deposit = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DepositParams min_deposit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} min_deposit
                 * @memberof cosmos.gov.v1beta1.DepositParams
                 * @instance
                 */
                DepositParams.prototype.min_deposit = $util.emptyArray;

                /**
                 * DepositParams max_deposit_period.
                 * @member {google.protobuf.IDuration|null|undefined} max_deposit_period
                 * @memberof cosmos.gov.v1beta1.DepositParams
                 * @instance
                 */
                DepositParams.prototype.max_deposit_period = null;

                /**
                 * Encodes the specified DepositParams message. Does not implicitly {@link cosmos.gov.v1beta1.DepositParams.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.DepositParams
                 * @static
                 * @param {cosmos.gov.v1beta1.IDepositParams} m DepositParams message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DepositParams.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.min_deposit != null && m.min_deposit.length) {
                        for (var i = 0; i < m.min_deposit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.min_deposit[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.max_deposit_period != null && Object.hasOwnProperty.call(m, "max_deposit_period"))
                        $root.google.protobuf.Duration.encode(m.max_deposit_period, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a DepositParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.DepositParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.DepositParams} DepositParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DepositParams.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.DepositParams();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.min_deposit && m.min_deposit.length))
                                    m.min_deposit = [];
                                m.min_deposit.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.max_deposit_period = $root.google.protobuf.Duration.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DepositParams;
            })();

            v1beta1.VotingParams = (function () {

                /**
                 * Properties of a VotingParams.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IVotingParams
                 * @property {google.protobuf.IDuration|null} [voting_period] VotingParams voting_period
                 */

                /**
                 * Constructs a new VotingParams.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a VotingParams.
                 * @implements IVotingParams
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IVotingParams=} [p] Properties to set
                 */
                function VotingParams(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * VotingParams voting_period.
                 * @member {google.protobuf.IDuration|null|undefined} voting_period
                 * @memberof cosmos.gov.v1beta1.VotingParams
                 * @instance
                 */
                VotingParams.prototype.voting_period = null;

                /**
                 * Encodes the specified VotingParams message. Does not implicitly {@link cosmos.gov.v1beta1.VotingParams.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.VotingParams
                 * @static
                 * @param {cosmos.gov.v1beta1.IVotingParams} m VotingParams message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VotingParams.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.voting_period != null && Object.hasOwnProperty.call(m, "voting_period"))
                        $root.google.protobuf.Duration.encode(m.voting_period, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a VotingParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.VotingParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.VotingParams} VotingParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VotingParams.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.VotingParams();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.voting_period = $root.google.protobuf.Duration.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return VotingParams;
            })();

            v1beta1.TallyParams = (function () {

                /**
                 * Properties of a TallyParams.
                 * @memberof cosmos.gov.v1beta1
                 * @interface ITallyParams
                 * @property {Uint8Array|null} [quorum] TallyParams quorum
                 * @property {Uint8Array|null} [threshold] TallyParams threshold
                 * @property {Uint8Array|null} [veto_threshold] TallyParams veto_threshold
                 */

                /**
                 * Constructs a new TallyParams.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a TallyParams.
                 * @implements ITallyParams
                 * @constructor
                 * @param {cosmos.gov.v1beta1.ITallyParams=} [p] Properties to set
                 */
                function TallyParams(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * TallyParams quorum.
                 * @member {Uint8Array} quorum
                 * @memberof cosmos.gov.v1beta1.TallyParams
                 * @instance
                 */
                TallyParams.prototype.quorum = $util.newBuffer([]);

                /**
                 * TallyParams threshold.
                 * @member {Uint8Array} threshold
                 * @memberof cosmos.gov.v1beta1.TallyParams
                 * @instance
                 */
                TallyParams.prototype.threshold = $util.newBuffer([]);

                /**
                 * TallyParams veto_threshold.
                 * @member {Uint8Array} veto_threshold
                 * @memberof cosmos.gov.v1beta1.TallyParams
                 * @instance
                 */
                TallyParams.prototype.veto_threshold = $util.newBuffer([]);

                /**
                 * Encodes the specified TallyParams message. Does not implicitly {@link cosmos.gov.v1beta1.TallyParams.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.TallyParams
                 * @static
                 * @param {cosmos.gov.v1beta1.ITallyParams} m TallyParams message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TallyParams.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.quorum != null && Object.hasOwnProperty.call(m, "quorum"))
                        w.uint32(10).bytes(m.quorum);
                    if (m.threshold != null && Object.hasOwnProperty.call(m, "threshold"))
                        w.uint32(18).bytes(m.threshold);
                    if (m.veto_threshold != null && Object.hasOwnProperty.call(m, "veto_threshold"))
                        w.uint32(26).bytes(m.veto_threshold);
                    return w;
                };

                /**
                 * Decodes a TallyParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.TallyParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.TallyParams} TallyParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TallyParams.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.TallyParams();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.quorum = r.bytes();
                                break;
                            case 2:
                                m.threshold = r.bytes();
                                break;
                            case 3:
                                m.veto_threshold = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return TallyParams;
            })();

            v1beta1.MsgSubmitProposal = (function () {

                /**
                 * Properties of a MsgSubmitProposal.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IMsgSubmitProposal
                 * @property {google.protobuf.IAny|null} [content] MsgSubmitProposal content
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [initial_deposit] MsgSubmitProposal initial_deposit
                 * @property {string|null} [proposer] MsgSubmitProposal proposer
                 */

                /**
                 * Constructs a new MsgSubmitProposal.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a MsgSubmitProposal.
                 * @implements IMsgSubmitProposal
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IMsgSubmitProposal=} [p] Properties to set
                 */
                function MsgSubmitProposal(p) {
                    this.initial_deposit = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSubmitProposal content.
                 * @member {google.protobuf.IAny|null|undefined} content
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposal
                 * @instance
                 */
                MsgSubmitProposal.prototype.content = null;

                /**
                 * MsgSubmitProposal initial_deposit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} initial_deposit
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposal
                 * @instance
                 */
                MsgSubmitProposal.prototype.initial_deposit = $util.emptyArray;

                /**
                 * MsgSubmitProposal proposer.
                 * @member {string} proposer
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposal
                 * @instance
                 */
                MsgSubmitProposal.prototype.proposer = "";

                /**
                 * Encodes the specified MsgSubmitProposal message. Does not implicitly {@link cosmos.gov.v1beta1.MsgSubmitProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposal
                 * @static
                 * @param {cosmos.gov.v1beta1.IMsgSubmitProposal} m MsgSubmitProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                        $root.google.protobuf.Any.encode(m.content, w.uint32(10).fork()).ldelim();
                    if (m.initial_deposit != null && m.initial_deposit.length) {
                        for (var i = 0; i < m.initial_deposit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.initial_deposit[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.proposer != null && Object.hasOwnProperty.call(m, "proposer"))
                        w.uint32(26).string(m.proposer);
                    return w;
                };

                /**
                 * Decodes a MsgSubmitProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.MsgSubmitProposal} MsgSubmitProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.MsgSubmitProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.content = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.initial_deposit && m.initial_deposit.length))
                                    m.initial_deposit = [];
                                m.initial_deposit.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.proposer = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSubmitProposal;
            })();

            v1beta1.MsgSubmitProposalResponse = (function () {

                /**
                 * Properties of a MsgSubmitProposalResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IMsgSubmitProposalResponse
                 * @property {Long|null} [proposal_id] MsgSubmitProposalResponse proposal_id
                 */

                /**
                 * Constructs a new MsgSubmitProposalResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a MsgSubmitProposalResponse.
                 * @implements IMsgSubmitProposalResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IMsgSubmitProposalResponse=} [p] Properties to set
                 */
                function MsgSubmitProposalResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSubmitProposalResponse proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposalResponse
                 * @instance
                 */
                MsgSubmitProposalResponse.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified MsgSubmitProposalResponse message. Does not implicitly {@link cosmos.gov.v1beta1.MsgSubmitProposalResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposalResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IMsgSubmitProposalResponse} m MsgSubmitProposalResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitProposalResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    return w;
                };

                /**
                 * Decodes a MsgSubmitProposalResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.MsgSubmitProposalResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.MsgSubmitProposalResponse} MsgSubmitProposalResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitProposalResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.MsgSubmitProposalResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSubmitProposalResponse;
            })();

            v1beta1.MsgVote = (function () {

                /**
                 * Properties of a MsgVote.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IMsgVote
                 * @property {Long|null} [proposal_id] MsgVote proposal_id
                 * @property {string|null} [voter] MsgVote voter
                 * @property {cosmos.gov.v1beta1.VoteOption|null} [option] MsgVote option
                 */

                /**
                 * Constructs a new MsgVote.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a MsgVote.
                 * @implements IMsgVote
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IMsgVote=} [p] Properties to set
                 */
                function MsgVote(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgVote proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.MsgVote
                 * @instance
                 */
                MsgVote.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * MsgVote voter.
                 * @member {string} voter
                 * @memberof cosmos.gov.v1beta1.MsgVote
                 * @instance
                 */
                MsgVote.prototype.voter = "";

                /**
                 * MsgVote option.
                 * @member {cosmos.gov.v1beta1.VoteOption} option
                 * @memberof cosmos.gov.v1beta1.MsgVote
                 * @instance
                 */
                MsgVote.prototype.option = 0;

                /**
                 * Encodes the specified MsgVote message. Does not implicitly {@link cosmos.gov.v1beta1.MsgVote.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.MsgVote
                 * @static
                 * @param {cosmos.gov.v1beta1.IMsgVote} m MsgVote message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgVote.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.voter != null && Object.hasOwnProperty.call(m, "voter"))
                        w.uint32(18).string(m.voter);
                    if (m.option != null && Object.hasOwnProperty.call(m, "option"))
                        w.uint32(24).int32(m.option);
                    return w;
                };

                /**
                 * Decodes a MsgVote message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.MsgVote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.MsgVote} MsgVote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgVote.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.MsgVote();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.voter = r.string();
                                break;
                            case 3:
                                m.option = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgVote;
            })();

            v1beta1.MsgVoteResponse = (function () {

                /**
                 * Properties of a MsgVoteResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IMsgVoteResponse
                 */

                /**
                 * Constructs a new MsgVoteResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a MsgVoteResponse.
                 * @implements IMsgVoteResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IMsgVoteResponse=} [p] Properties to set
                 */
                function MsgVoteResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgVoteResponse message. Does not implicitly {@link cosmos.gov.v1beta1.MsgVoteResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.MsgVoteResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IMsgVoteResponse} m MsgVoteResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgVoteResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgVoteResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.MsgVoteResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.MsgVoteResponse} MsgVoteResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgVoteResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.MsgVoteResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgVoteResponse;
            })();

            v1beta1.MsgDeposit = (function () {

                /**
                 * Properties of a MsgDeposit.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IMsgDeposit
                 * @property {Long|null} [proposal_id] MsgDeposit proposal_id
                 * @property {string|null} [depositor] MsgDeposit depositor
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] MsgDeposit amount
                 */

                /**
                 * Constructs a new MsgDeposit.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a MsgDeposit.
                 * @implements IMsgDeposit
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IMsgDeposit=} [p] Properties to set
                 */
                function MsgDeposit(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgDeposit proposal_id.
                 * @member {Long} proposal_id
                 * @memberof cosmos.gov.v1beta1.MsgDeposit
                 * @instance
                 */
                MsgDeposit.prototype.proposal_id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * MsgDeposit depositor.
                 * @member {string} depositor
                 * @memberof cosmos.gov.v1beta1.MsgDeposit
                 * @instance
                 */
                MsgDeposit.prototype.depositor = "";

                /**
                 * MsgDeposit amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.gov.v1beta1.MsgDeposit
                 * @instance
                 */
                MsgDeposit.prototype.amount = $util.emptyArray;

                /**
                 * Encodes the specified MsgDeposit message. Does not implicitly {@link cosmos.gov.v1beta1.MsgDeposit.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.MsgDeposit
                 * @static
                 * @param {cosmos.gov.v1beta1.IMsgDeposit} m MsgDeposit message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDeposit.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.proposal_id != null && Object.hasOwnProperty.call(m, "proposal_id"))
                        w.uint32(8).uint64(m.proposal_id);
                    if (m.depositor != null && Object.hasOwnProperty.call(m, "depositor"))
                        w.uint32(18).string(m.depositor);
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgDeposit message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.MsgDeposit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.MsgDeposit} MsgDeposit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDeposit.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.MsgDeposit();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.proposal_id = r.uint64();
                                break;
                            case 2:
                                m.depositor = r.string();
                                break;
                            case 3:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgDeposit;
            })();

            v1beta1.MsgDepositResponse = (function () {

                /**
                 * Properties of a MsgDepositResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @interface IMsgDepositResponse
                 */

                /**
                 * Constructs a new MsgDepositResponse.
                 * @memberof cosmos.gov.v1beta1
                 * @classdesc Represents a MsgDepositResponse.
                 * @implements IMsgDepositResponse
                 * @constructor
                 * @param {cosmos.gov.v1beta1.IMsgDepositResponse=} [p] Properties to set
                 */
                function MsgDepositResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgDepositResponse message. Does not implicitly {@link cosmos.gov.v1beta1.MsgDepositResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.gov.v1beta1.MsgDepositResponse
                 * @static
                 * @param {cosmos.gov.v1beta1.IMsgDepositResponse} m MsgDepositResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDepositResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgDepositResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.gov.v1beta1.MsgDepositResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.gov.v1beta1.MsgDepositResponse} MsgDepositResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDepositResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.gov.v1beta1.MsgDepositResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgDepositResponse;
            })();

            return v1beta1;
        })();

        return gov;
    })();

    cosmos.mint = (function () {

        /**
         * Namespace mint.
         * @memberof cosmos
         * @namespace
         */
        const mint = {};

        mint.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.mint
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.mint.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.mint.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.mint.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {cosmos.mint.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.mint.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.mint.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.mint.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.mint.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.mint.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.QueryInflationRequest = (function () {

                /**
                 * Properties of a QueryInflationRequest.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IQueryInflationRequest
                 */

                /**
                 * Constructs a new QueryInflationRequest.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a QueryInflationRequest.
                 * @implements IQueryInflationRequest
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IQueryInflationRequest=} [p] Properties to set
                 */
                function QueryInflationRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryInflationRequest message. Does not implicitly {@link cosmos.mint.v1beta1.QueryInflationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.QueryInflationRequest
                 * @static
                 * @param {cosmos.mint.v1beta1.IQueryInflationRequest} m QueryInflationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryInflationRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryInflationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.QueryInflationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.QueryInflationRequest} QueryInflationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryInflationRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.QueryInflationRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryInflationRequest;
            })();

            v1beta1.QueryInflationResponse = (function () {

                /**
                 * Properties of a QueryInflationResponse.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IQueryInflationResponse
                 * @property {Uint8Array|null} [inflation] QueryInflationResponse inflation
                 */

                /**
                 * Constructs a new QueryInflationResponse.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a QueryInflationResponse.
                 * @implements IQueryInflationResponse
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IQueryInflationResponse=} [p] Properties to set
                 */
                function QueryInflationResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryInflationResponse inflation.
                 * @member {Uint8Array} inflation
                 * @memberof cosmos.mint.v1beta1.QueryInflationResponse
                 * @instance
                 */
                QueryInflationResponse.prototype.inflation = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryInflationResponse message. Does not implicitly {@link cosmos.mint.v1beta1.QueryInflationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.QueryInflationResponse
                 * @static
                 * @param {cosmos.mint.v1beta1.IQueryInflationResponse} m QueryInflationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryInflationResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.inflation != null && Object.hasOwnProperty.call(m, "inflation"))
                        w.uint32(10).bytes(m.inflation);
                    return w;
                };

                /**
                 * Decodes a QueryInflationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.QueryInflationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.QueryInflationResponse} QueryInflationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryInflationResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.QueryInflationResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.inflation = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryInflationResponse;
            })();

            v1beta1.QueryAnnualProvisionsRequest = (function () {

                /**
                 * Properties of a QueryAnnualProvisionsRequest.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IQueryAnnualProvisionsRequest
                 */

                /**
                 * Constructs a new QueryAnnualProvisionsRequest.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a QueryAnnualProvisionsRequest.
                 * @implements IQueryAnnualProvisionsRequest
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IQueryAnnualProvisionsRequest=} [p] Properties to set
                 */
                function QueryAnnualProvisionsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryAnnualProvisionsRequest message. Does not implicitly {@link cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.QueryAnnualProvisionsRequest
                 * @static
                 * @param {cosmos.mint.v1beta1.IQueryAnnualProvisionsRequest} m QueryAnnualProvisionsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAnnualProvisionsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryAnnualProvisionsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.QueryAnnualProvisionsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.QueryAnnualProvisionsRequest} QueryAnnualProvisionsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAnnualProvisionsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAnnualProvisionsRequest;
            })();

            v1beta1.QueryAnnualProvisionsResponse = (function () {

                /**
                 * Properties of a QueryAnnualProvisionsResponse.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IQueryAnnualProvisionsResponse
                 * @property {Uint8Array|null} [annual_provisions] QueryAnnualProvisionsResponse annual_provisions
                 */

                /**
                 * Constructs a new QueryAnnualProvisionsResponse.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a QueryAnnualProvisionsResponse.
                 * @implements IQueryAnnualProvisionsResponse
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IQueryAnnualProvisionsResponse=} [p] Properties to set
                 */
                function QueryAnnualProvisionsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAnnualProvisionsResponse annual_provisions.
                 * @member {Uint8Array} annual_provisions
                 * @memberof cosmos.mint.v1beta1.QueryAnnualProvisionsResponse
                 * @instance
                 */
                QueryAnnualProvisionsResponse.prototype.annual_provisions = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryAnnualProvisionsResponse message. Does not implicitly {@link cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.QueryAnnualProvisionsResponse
                 * @static
                 * @param {cosmos.mint.v1beta1.IQueryAnnualProvisionsResponse} m QueryAnnualProvisionsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAnnualProvisionsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.annual_provisions != null && Object.hasOwnProperty.call(m, "annual_provisions"))
                        w.uint32(10).bytes(m.annual_provisions);
                    return w;
                };

                /**
                 * Decodes a QueryAnnualProvisionsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.QueryAnnualProvisionsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.QueryAnnualProvisionsResponse} QueryAnnualProvisionsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAnnualProvisionsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.annual_provisions = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAnnualProvisionsResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.mint.v1beta1.IMinter|null} [minter] GenesisState minter
                 * @property {cosmos.mint.v1beta1.IParams|null} [params] GenesisState params
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState minter.
                 * @member {cosmos.mint.v1beta1.IMinter|null|undefined} minter
                 * @memberof cosmos.mint.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.minter = null;

                /**
                 * GenesisState params.
                 * @member {cosmos.mint.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.mint.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.mint.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.mint.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.minter != null && Object.hasOwnProperty.call(m, "minter"))
                        $root.cosmos.mint.v1beta1.Minter.encode(m.minter, w.uint32(10).fork()).ldelim();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.mint.v1beta1.Params.encode(m.params, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.minter = $root.cosmos.mint.v1beta1.Minter.decode(r, r.uint32());
                                break;
                            case 2:
                                m.params = $root.cosmos.mint.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.Minter = (function () {

                /**
                 * Properties of a Minter.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IMinter
                 * @property {string|null} [inflation] Minter inflation
                 * @property {string|null} [annual_provisions] Minter annual_provisions
                 */

                /**
                 * Constructs a new Minter.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a Minter.
                 * @implements IMinter
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IMinter=} [p] Properties to set
                 */
                function Minter(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Minter inflation.
                 * @member {string} inflation
                 * @memberof cosmos.mint.v1beta1.Minter
                 * @instance
                 */
                Minter.prototype.inflation = "";

                /**
                 * Minter annual_provisions.
                 * @member {string} annual_provisions
                 * @memberof cosmos.mint.v1beta1.Minter
                 * @instance
                 */
                Minter.prototype.annual_provisions = "";

                /**
                 * Encodes the specified Minter message. Does not implicitly {@link cosmos.mint.v1beta1.Minter.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.Minter
                 * @static
                 * @param {cosmos.mint.v1beta1.IMinter} m Minter message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Minter.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.inflation != null && Object.hasOwnProperty.call(m, "inflation"))
                        w.uint32(10).string(m.inflation);
                    if (m.annual_provisions != null && Object.hasOwnProperty.call(m, "annual_provisions"))
                        w.uint32(18).string(m.annual_provisions);
                    return w;
                };

                /**
                 * Decodes a Minter message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.Minter
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.Minter} Minter
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Minter.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.Minter();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.inflation = r.string();
                                break;
                            case 2:
                                m.annual_provisions = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Minter;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.mint.v1beta1
                 * @interface IParams
                 * @property {string|null} [mint_denom] Params mint_denom
                 * @property {string|null} [inflation_rate_change] Params inflation_rate_change
                 * @property {string|null} [inflation_max] Params inflation_max
                 * @property {string|null} [inflation_min] Params inflation_min
                 * @property {string|null} [goal_bonded] Params goal_bonded
                 * @property {Long|null} [blocks_per_year] Params blocks_per_year
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.mint.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.mint.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params mint_denom.
                 * @member {string} mint_denom
                 * @memberof cosmos.mint.v1beta1.Params
                 * @instance
                 */
                Params.prototype.mint_denom = "";

                /**
                 * Params inflation_rate_change.
                 * @member {string} inflation_rate_change
                 * @memberof cosmos.mint.v1beta1.Params
                 * @instance
                 */
                Params.prototype.inflation_rate_change = "";

                /**
                 * Params inflation_max.
                 * @member {string} inflation_max
                 * @memberof cosmos.mint.v1beta1.Params
                 * @instance
                 */
                Params.prototype.inflation_max = "";

                /**
                 * Params inflation_min.
                 * @member {string} inflation_min
                 * @memberof cosmos.mint.v1beta1.Params
                 * @instance
                 */
                Params.prototype.inflation_min = "";

                /**
                 * Params goal_bonded.
                 * @member {string} goal_bonded
                 * @memberof cosmos.mint.v1beta1.Params
                 * @instance
                 */
                Params.prototype.goal_bonded = "";

                /**
                 * Params blocks_per_year.
                 * @member {Long} blocks_per_year
                 * @memberof cosmos.mint.v1beta1.Params
                 * @instance
                 */
                Params.prototype.blocks_per_year = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.mint.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.mint.v1beta1.Params
                 * @static
                 * @param {cosmos.mint.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.mint_denom != null && Object.hasOwnProperty.call(m, "mint_denom"))
                        w.uint32(10).string(m.mint_denom);
                    if (m.inflation_rate_change != null && Object.hasOwnProperty.call(m, "inflation_rate_change"))
                        w.uint32(18).string(m.inflation_rate_change);
                    if (m.inflation_max != null && Object.hasOwnProperty.call(m, "inflation_max"))
                        w.uint32(26).string(m.inflation_max);
                    if (m.inflation_min != null && Object.hasOwnProperty.call(m, "inflation_min"))
                        w.uint32(34).string(m.inflation_min);
                    if (m.goal_bonded != null && Object.hasOwnProperty.call(m, "goal_bonded"))
                        w.uint32(42).string(m.goal_bonded);
                    if (m.blocks_per_year != null && Object.hasOwnProperty.call(m, "blocks_per_year"))
                        w.uint32(48).uint64(m.blocks_per_year);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.mint.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.mint.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.mint.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.mint_denom = r.string();
                                break;
                            case 2:
                                m.inflation_rate_change = r.string();
                                break;
                            case 3:
                                m.inflation_max = r.string();
                                break;
                            case 4:
                                m.inflation_min = r.string();
                                break;
                            case 5:
                                m.goal_bonded = r.string();
                                break;
                            case 6:
                                m.blocks_per_year = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            return v1beta1;
        })();

        return mint;
    })();

    cosmos.params = (function () {

        /**
         * Namespace params.
         * @memberof cosmos
         * @namespace
         */
        const params = {};

        params.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.params
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.ParameterChangeProposal = (function () {

                /**
                 * Properties of a ParameterChangeProposal.
                 * @memberof cosmos.params.v1beta1
                 * @interface IParameterChangeProposal
                 * @property {string|null} [title] ParameterChangeProposal title
                 * @property {string|null} [description] ParameterChangeProposal description
                 * @property {Array.<cosmos.params.v1beta1.IParamChange>|null} [changes] ParameterChangeProposal changes
                 */

                /**
                 * Constructs a new ParameterChangeProposal.
                 * @memberof cosmos.params.v1beta1
                 * @classdesc Represents a ParameterChangeProposal.
                 * @implements IParameterChangeProposal
                 * @constructor
                 * @param {cosmos.params.v1beta1.IParameterChangeProposal=} [p] Properties to set
                 */
                function ParameterChangeProposal(p) {
                    this.changes = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ParameterChangeProposal title.
                 * @member {string} title
                 * @memberof cosmos.params.v1beta1.ParameterChangeProposal
                 * @instance
                 */
                ParameterChangeProposal.prototype.title = "";

                /**
                 * ParameterChangeProposal description.
                 * @member {string} description
                 * @memberof cosmos.params.v1beta1.ParameterChangeProposal
                 * @instance
                 */
                ParameterChangeProposal.prototype.description = "";

                /**
                 * ParameterChangeProposal changes.
                 * @member {Array.<cosmos.params.v1beta1.IParamChange>} changes
                 * @memberof cosmos.params.v1beta1.ParameterChangeProposal
                 * @instance
                 */
                ParameterChangeProposal.prototype.changes = $util.emptyArray;

                /**
                 * Encodes the specified ParameterChangeProposal message. Does not implicitly {@link cosmos.params.v1beta1.ParameterChangeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.params.v1beta1.ParameterChangeProposal
                 * @static
                 * @param {cosmos.params.v1beta1.IParameterChangeProposal} m ParameterChangeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ParameterChangeProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.changes != null && m.changes.length) {
                        for (var i = 0; i < m.changes.length; ++i)
                            $root.cosmos.params.v1beta1.ParamChange.encode(m.changes[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ParameterChangeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.params.v1beta1.ParameterChangeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.params.v1beta1.ParameterChangeProposal} ParameterChangeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ParameterChangeProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.params.v1beta1.ParameterChangeProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                if (!(m.changes && m.changes.length))
                                    m.changes = [];
                                m.changes.push($root.cosmos.params.v1beta1.ParamChange.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ParameterChangeProposal;
            })();

            v1beta1.ParamChange = (function () {

                /**
                 * Properties of a ParamChange.
                 * @memberof cosmos.params.v1beta1
                 * @interface IParamChange
                 * @property {string|null} [subspace] ParamChange subspace
                 * @property {string|null} [key] ParamChange key
                 * @property {string|null} [value] ParamChange value
                 */

                /**
                 * Constructs a new ParamChange.
                 * @memberof cosmos.params.v1beta1
                 * @classdesc Represents a ParamChange.
                 * @implements IParamChange
                 * @constructor
                 * @param {cosmos.params.v1beta1.IParamChange=} [p] Properties to set
                 */
                function ParamChange(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ParamChange subspace.
                 * @member {string} subspace
                 * @memberof cosmos.params.v1beta1.ParamChange
                 * @instance
                 */
                ParamChange.prototype.subspace = "";

                /**
                 * ParamChange key.
                 * @member {string} key
                 * @memberof cosmos.params.v1beta1.ParamChange
                 * @instance
                 */
                ParamChange.prototype.key = "";

                /**
                 * ParamChange value.
                 * @member {string} value
                 * @memberof cosmos.params.v1beta1.ParamChange
                 * @instance
                 */
                ParamChange.prototype.value = "";

                /**
                 * Encodes the specified ParamChange message. Does not implicitly {@link cosmos.params.v1beta1.ParamChange.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.params.v1beta1.ParamChange
                 * @static
                 * @param {cosmos.params.v1beta1.IParamChange} m ParamChange message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ParamChange.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.subspace != null && Object.hasOwnProperty.call(m, "subspace"))
                        w.uint32(10).string(m.subspace);
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(18).string(m.key);
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(26).string(m.value);
                    return w;
                };

                /**
                 * Decodes a ParamChange message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.params.v1beta1.ParamChange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.params.v1beta1.ParamChange} ParamChange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ParamChange.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.params.v1beta1.ParamChange();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.subspace = r.string();
                                break;
                            case 2:
                                m.key = r.string();
                                break;
                            case 3:
                                m.value = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ParamChange;
            })();

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.params.v1beta1
                 * @interface IQueryParamsRequest
                 * @property {string|null} [subspace] QueryParamsRequest subspace
                 * @property {string|null} [key] QueryParamsRequest key
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.params.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.params.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsRequest subspace.
                 * @member {string} subspace
                 * @memberof cosmos.params.v1beta1.QueryParamsRequest
                 * @instance
                 */
                QueryParamsRequest.prototype.subspace = "";

                /**
                 * QueryParamsRequest key.
                 * @member {string} key
                 * @memberof cosmos.params.v1beta1.QueryParamsRequest
                 * @instance
                 */
                QueryParamsRequest.prototype.key = "";

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.params.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.params.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.params.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.subspace != null && Object.hasOwnProperty.call(m, "subspace"))
                        w.uint32(10).string(m.subspace);
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        w.uint32(18).string(m.key);
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.params.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.params.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.params.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.subspace = r.string();
                                break;
                            case 2:
                                m.key = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.params.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.params.v1beta1.IParamChange|null} [param] QueryParamsResponse param
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.params.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.params.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse param.
                 * @member {cosmos.params.v1beta1.IParamChange|null|undefined} param
                 * @memberof cosmos.params.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.param = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.params.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.params.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.params.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.param != null && Object.hasOwnProperty.call(m, "param"))
                        $root.cosmos.params.v1beta1.ParamChange.encode(m.param, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.params.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.params.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.params.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.param = $root.cosmos.params.v1beta1.ParamChange.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            return v1beta1;
        })();

        return params;
    })();

    cosmos.slashing = (function () {

        /**
         * Namespace slashing.
         * @memberof cosmos
         * @namespace
         */
        const slashing = {};

        slashing.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.slashing
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.slashing.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.slashing.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.slashing.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {cosmos.slashing.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.slashing.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.slashing.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.slashing.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.slashing.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.slashing.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.QuerySigningInfoRequest = (function () {

                /**
                 * Properties of a QuerySigningInfoRequest.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IQuerySigningInfoRequest
                 * @property {string|null} [cons_address] QuerySigningInfoRequest cons_address
                 */

                /**
                 * Constructs a new QuerySigningInfoRequest.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a QuerySigningInfoRequest.
                 * @implements IQuerySigningInfoRequest
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfoRequest=} [p] Properties to set
                 */
                function QuerySigningInfoRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySigningInfoRequest cons_address.
                 * @member {string} cons_address
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfoRequest
                 * @instance
                 */
                QuerySigningInfoRequest.prototype.cons_address = "";

                /**
                 * Encodes the specified QuerySigningInfoRequest message. Does not implicitly {@link cosmos.slashing.v1beta1.QuerySigningInfoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfoRequest
                 * @static
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfoRequest} m QuerySigningInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySigningInfoRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.cons_address != null && Object.hasOwnProperty.call(m, "cons_address"))
                        w.uint32(10).string(m.cons_address);
                    return w;
                };

                /**
                 * Decodes a QuerySigningInfoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.QuerySigningInfoRequest} QuerySigningInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySigningInfoRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.QuerySigningInfoRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.cons_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySigningInfoRequest;
            })();

            v1beta1.QuerySigningInfoResponse = (function () {

                /**
                 * Properties of a QuerySigningInfoResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IQuerySigningInfoResponse
                 * @property {cosmos.slashing.v1beta1.IValidatorSigningInfo|null} [val_signing_info] QuerySigningInfoResponse val_signing_info
                 */

                /**
                 * Constructs a new QuerySigningInfoResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a QuerySigningInfoResponse.
                 * @implements IQuerySigningInfoResponse
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfoResponse=} [p] Properties to set
                 */
                function QuerySigningInfoResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySigningInfoResponse val_signing_info.
                 * @member {cosmos.slashing.v1beta1.IValidatorSigningInfo|null|undefined} val_signing_info
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfoResponse
                 * @instance
                 */
                QuerySigningInfoResponse.prototype.val_signing_info = null;

                /**
                 * Encodes the specified QuerySigningInfoResponse message. Does not implicitly {@link cosmos.slashing.v1beta1.QuerySigningInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfoResponse
                 * @static
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfoResponse} m QuerySigningInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySigningInfoResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.val_signing_info != null && Object.hasOwnProperty.call(m, "val_signing_info"))
                        $root.cosmos.slashing.v1beta1.ValidatorSigningInfo.encode(m.val_signing_info, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QuerySigningInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.QuerySigningInfoResponse} QuerySigningInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySigningInfoResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.QuerySigningInfoResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.val_signing_info = $root.cosmos.slashing.v1beta1.ValidatorSigningInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySigningInfoResponse;
            })();

            v1beta1.QuerySigningInfosRequest = (function () {

                /**
                 * Properties of a QuerySigningInfosRequest.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IQuerySigningInfosRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QuerySigningInfosRequest pagination
                 */

                /**
                 * Constructs a new QuerySigningInfosRequest.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a QuerySigningInfosRequest.
                 * @implements IQuerySigningInfosRequest
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfosRequest=} [p] Properties to set
                 */
                function QuerySigningInfosRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySigningInfosRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosRequest
                 * @instance
                 */
                QuerySigningInfosRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QuerySigningInfosRequest message. Does not implicitly {@link cosmos.slashing.v1beta1.QuerySigningInfosRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosRequest
                 * @static
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfosRequest} m QuerySigningInfosRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySigningInfosRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QuerySigningInfosRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.QuerySigningInfosRequest} QuerySigningInfosRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySigningInfosRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.QuerySigningInfosRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySigningInfosRequest;
            })();

            v1beta1.QuerySigningInfosResponse = (function () {

                /**
                 * Properties of a QuerySigningInfosResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IQuerySigningInfosResponse
                 * @property {Array.<cosmos.slashing.v1beta1.IValidatorSigningInfo>|null} [info] QuerySigningInfosResponse info
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QuerySigningInfosResponse pagination
                 */

                /**
                 * Constructs a new QuerySigningInfosResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a QuerySigningInfosResponse.
                 * @implements IQuerySigningInfosResponse
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfosResponse=} [p] Properties to set
                 */
                function QuerySigningInfosResponse(p) {
                    this.info = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QuerySigningInfosResponse info.
                 * @member {Array.<cosmos.slashing.v1beta1.IValidatorSigningInfo>} info
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosResponse
                 * @instance
                 */
                QuerySigningInfosResponse.prototype.info = $util.emptyArray;

                /**
                 * QuerySigningInfosResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosResponse
                 * @instance
                 */
                QuerySigningInfosResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QuerySigningInfosResponse message. Does not implicitly {@link cosmos.slashing.v1beta1.QuerySigningInfosResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosResponse
                 * @static
                 * @param {cosmos.slashing.v1beta1.IQuerySigningInfosResponse} m QuerySigningInfosResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySigningInfosResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.info != null && m.info.length) {
                        for (var i = 0; i < m.info.length; ++i)
                            $root.cosmos.slashing.v1beta1.ValidatorSigningInfo.encode(m.info[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QuerySigningInfosResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.QuerySigningInfosResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.QuerySigningInfosResponse} QuerySigningInfosResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySigningInfosResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.QuerySigningInfosResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.info && m.info.length))
                                    m.info = [];
                                m.info.push($root.cosmos.slashing.v1beta1.ValidatorSigningInfo.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QuerySigningInfosResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.slashing.v1beta1.IParams|null} [params] GenesisState params
                 * @property {Array.<cosmos.slashing.v1beta1.ISigningInfo>|null} [signing_infos] GenesisState signing_infos
                 * @property {Array.<cosmos.slashing.v1beta1.IValidatorMissedBlocks>|null} [missed_blocks] GenesisState missed_blocks
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.signing_infos = [];
                    this.missed_blocks = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmos.slashing.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.slashing.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState signing_infos.
                 * @member {Array.<cosmos.slashing.v1beta1.ISigningInfo>} signing_infos
                 * @memberof cosmos.slashing.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.signing_infos = $util.emptyArray;

                /**
                 * GenesisState missed_blocks.
                 * @member {Array.<cosmos.slashing.v1beta1.IValidatorMissedBlocks>} missed_blocks
                 * @memberof cosmos.slashing.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.missed_blocks = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.slashing.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.slashing.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.slashing.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    if (m.signing_infos != null && m.signing_infos.length) {
                        for (var i = 0; i < m.signing_infos.length; ++i)
                            $root.cosmos.slashing.v1beta1.SigningInfo.encode(m.signing_infos[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.missed_blocks != null && m.missed_blocks.length) {
                        for (var i = 0; i < m.missed_blocks.length; ++i)
                            $root.cosmos.slashing.v1beta1.ValidatorMissedBlocks.encode(m.missed_blocks[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.slashing.v1beta1.Params.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.signing_infos && m.signing_infos.length))
                                    m.signing_infos = [];
                                m.signing_infos.push($root.cosmos.slashing.v1beta1.SigningInfo.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.missed_blocks && m.missed_blocks.length))
                                    m.missed_blocks = [];
                                m.missed_blocks.push($root.cosmos.slashing.v1beta1.ValidatorMissedBlocks.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.SigningInfo = (function () {

                /**
                 * Properties of a SigningInfo.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface ISigningInfo
                 * @property {string|null} [address] SigningInfo address
                 * @property {cosmos.slashing.v1beta1.IValidatorSigningInfo|null} [validator_signing_info] SigningInfo validator_signing_info
                 */

                /**
                 * Constructs a new SigningInfo.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a SigningInfo.
                 * @implements ISigningInfo
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.ISigningInfo=} [p] Properties to set
                 */
                function SigningInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SigningInfo address.
                 * @member {string} address
                 * @memberof cosmos.slashing.v1beta1.SigningInfo
                 * @instance
                 */
                SigningInfo.prototype.address = "";

                /**
                 * SigningInfo validator_signing_info.
                 * @member {cosmos.slashing.v1beta1.IValidatorSigningInfo|null|undefined} validator_signing_info
                 * @memberof cosmos.slashing.v1beta1.SigningInfo
                 * @instance
                 */
                SigningInfo.prototype.validator_signing_info = null;

                /**
                 * Encodes the specified SigningInfo message. Does not implicitly {@link cosmos.slashing.v1beta1.SigningInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.SigningInfo
                 * @static
                 * @param {cosmos.slashing.v1beta1.ISigningInfo} m SigningInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SigningInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.validator_signing_info != null && Object.hasOwnProperty.call(m, "validator_signing_info"))
                        $root.cosmos.slashing.v1beta1.ValidatorSigningInfo.encode(m.validator_signing_info, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a SigningInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.SigningInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.SigningInfo} SigningInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SigningInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.SigningInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.validator_signing_info = $root.cosmos.slashing.v1beta1.ValidatorSigningInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SigningInfo;
            })();

            v1beta1.ValidatorMissedBlocks = (function () {

                /**
                 * Properties of a ValidatorMissedBlocks.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IValidatorMissedBlocks
                 * @property {string|null} [address] ValidatorMissedBlocks address
                 * @property {Array.<cosmos.slashing.v1beta1.IMissedBlock>|null} [missed_blocks] ValidatorMissedBlocks missed_blocks
                 */

                /**
                 * Constructs a new ValidatorMissedBlocks.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a ValidatorMissedBlocks.
                 * @implements IValidatorMissedBlocks
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IValidatorMissedBlocks=} [p] Properties to set
                 */
                function ValidatorMissedBlocks(p) {
                    this.missed_blocks = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorMissedBlocks address.
                 * @member {string} address
                 * @memberof cosmos.slashing.v1beta1.ValidatorMissedBlocks
                 * @instance
                 */
                ValidatorMissedBlocks.prototype.address = "";

                /**
                 * ValidatorMissedBlocks missed_blocks.
                 * @member {Array.<cosmos.slashing.v1beta1.IMissedBlock>} missed_blocks
                 * @memberof cosmos.slashing.v1beta1.ValidatorMissedBlocks
                 * @instance
                 */
                ValidatorMissedBlocks.prototype.missed_blocks = $util.emptyArray;

                /**
                 * Encodes the specified ValidatorMissedBlocks message. Does not implicitly {@link cosmos.slashing.v1beta1.ValidatorMissedBlocks.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.ValidatorMissedBlocks
                 * @static
                 * @param {cosmos.slashing.v1beta1.IValidatorMissedBlocks} m ValidatorMissedBlocks message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorMissedBlocks.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.missed_blocks != null && m.missed_blocks.length) {
                        for (var i = 0; i < m.missed_blocks.length; ++i)
                            $root.cosmos.slashing.v1beta1.MissedBlock.encode(m.missed_blocks[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ValidatorMissedBlocks message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.ValidatorMissedBlocks
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.ValidatorMissedBlocks} ValidatorMissedBlocks
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorMissedBlocks.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.ValidatorMissedBlocks();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                if (!(m.missed_blocks && m.missed_blocks.length))
                                    m.missed_blocks = [];
                                m.missed_blocks.push($root.cosmos.slashing.v1beta1.MissedBlock.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorMissedBlocks;
            })();

            v1beta1.MissedBlock = (function () {

                /**
                 * Properties of a MissedBlock.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IMissedBlock
                 * @property {Long|null} [index] MissedBlock index
                 * @property {boolean|null} [missed] MissedBlock missed
                 */

                /**
                 * Constructs a new MissedBlock.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a MissedBlock.
                 * @implements IMissedBlock
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IMissedBlock=} [p] Properties to set
                 */
                function MissedBlock(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MissedBlock index.
                 * @member {Long} index
                 * @memberof cosmos.slashing.v1beta1.MissedBlock
                 * @instance
                 */
                MissedBlock.prototype.index = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * MissedBlock missed.
                 * @member {boolean} missed
                 * @memberof cosmos.slashing.v1beta1.MissedBlock
                 * @instance
                 */
                MissedBlock.prototype.missed = false;

                /**
                 * Encodes the specified MissedBlock message. Does not implicitly {@link cosmos.slashing.v1beta1.MissedBlock.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.MissedBlock
                 * @static
                 * @param {cosmos.slashing.v1beta1.IMissedBlock} m MissedBlock message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MissedBlock.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                        w.uint32(8).int64(m.index);
                    if (m.missed != null && Object.hasOwnProperty.call(m, "missed"))
                        w.uint32(16).bool(m.missed);
                    return w;
                };

                /**
                 * Decodes a MissedBlock message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.MissedBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.MissedBlock} MissedBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MissedBlock.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.MissedBlock();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.index = r.int64();
                                break;
                            case 2:
                                m.missed = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MissedBlock;
            })();

            v1beta1.ValidatorSigningInfo = (function () {

                /**
                 * Properties of a ValidatorSigningInfo.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IValidatorSigningInfo
                 * @property {string|null} [address] ValidatorSigningInfo address
                 * @property {Long|null} [start_height] ValidatorSigningInfo start_height
                 * @property {Long|null} [index_offset] ValidatorSigningInfo index_offset
                 * @property {google.protobuf.ITimestamp|null} [jailed_until] ValidatorSigningInfo jailed_until
                 * @property {boolean|null} [tombstoned] ValidatorSigningInfo tombstoned
                 * @property {Long|null} [missed_blocks_counter] ValidatorSigningInfo missed_blocks_counter
                 */

                /**
                 * Constructs a new ValidatorSigningInfo.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a ValidatorSigningInfo.
                 * @implements IValidatorSigningInfo
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IValidatorSigningInfo=} [p] Properties to set
                 */
                function ValidatorSigningInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValidatorSigningInfo address.
                 * @member {string} address
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @instance
                 */
                ValidatorSigningInfo.prototype.address = "";

                /**
                 * ValidatorSigningInfo start_height.
                 * @member {Long} start_height
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @instance
                 */
                ValidatorSigningInfo.prototype.start_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * ValidatorSigningInfo index_offset.
                 * @member {Long} index_offset
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @instance
                 */
                ValidatorSigningInfo.prototype.index_offset = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * ValidatorSigningInfo jailed_until.
                 * @member {google.protobuf.ITimestamp|null|undefined} jailed_until
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @instance
                 */
                ValidatorSigningInfo.prototype.jailed_until = null;

                /**
                 * ValidatorSigningInfo tombstoned.
                 * @member {boolean} tombstoned
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @instance
                 */
                ValidatorSigningInfo.prototype.tombstoned = false;

                /**
                 * ValidatorSigningInfo missed_blocks_counter.
                 * @member {Long} missed_blocks_counter
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @instance
                 */
                ValidatorSigningInfo.prototype.missed_blocks_counter = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified ValidatorSigningInfo message. Does not implicitly {@link cosmos.slashing.v1beta1.ValidatorSigningInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @static
                 * @param {cosmos.slashing.v1beta1.IValidatorSigningInfo} m ValidatorSigningInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorSigningInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.start_height != null && Object.hasOwnProperty.call(m, "start_height"))
                        w.uint32(16).int64(m.start_height);
                    if (m.index_offset != null && Object.hasOwnProperty.call(m, "index_offset"))
                        w.uint32(24).int64(m.index_offset);
                    if (m.jailed_until != null && Object.hasOwnProperty.call(m, "jailed_until"))
                        $root.google.protobuf.Timestamp.encode(m.jailed_until, w.uint32(34).fork()).ldelim();
                    if (m.tombstoned != null && Object.hasOwnProperty.call(m, "tombstoned"))
                        w.uint32(40).bool(m.tombstoned);
                    if (m.missed_blocks_counter != null && Object.hasOwnProperty.call(m, "missed_blocks_counter"))
                        w.uint32(48).int64(m.missed_blocks_counter);
                    return w;
                };

                /**
                 * Decodes a ValidatorSigningInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.ValidatorSigningInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.ValidatorSigningInfo} ValidatorSigningInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorSigningInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.ValidatorSigningInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.start_height = r.int64();
                                break;
                            case 3:
                                m.index_offset = r.int64();
                                break;
                            case 4:
                                m.jailed_until = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 5:
                                m.tombstoned = r.bool();
                                break;
                            case 6:
                                m.missed_blocks_counter = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValidatorSigningInfo;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IParams
                 * @property {Long|null} [signed_blocks_window] Params signed_blocks_window
                 * @property {Uint8Array|null} [min_signed_per_window] Params min_signed_per_window
                 * @property {google.protobuf.IDuration|null} [downtime_jail_duration] Params downtime_jail_duration
                 * @property {Uint8Array|null} [slash_fraction_double_sign] Params slash_fraction_double_sign
                 * @property {Uint8Array|null} [slash_fraction_downtime] Params slash_fraction_downtime
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params signed_blocks_window.
                 * @member {Long} signed_blocks_window
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @instance
                 */
                Params.prototype.signed_blocks_window = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Params min_signed_per_window.
                 * @member {Uint8Array} min_signed_per_window
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @instance
                 */
                Params.prototype.min_signed_per_window = $util.newBuffer([]);

                /**
                 * Params downtime_jail_duration.
                 * @member {google.protobuf.IDuration|null|undefined} downtime_jail_duration
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @instance
                 */
                Params.prototype.downtime_jail_duration = null;

                /**
                 * Params slash_fraction_double_sign.
                 * @member {Uint8Array} slash_fraction_double_sign
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @instance
                 */
                Params.prototype.slash_fraction_double_sign = $util.newBuffer([]);

                /**
                 * Params slash_fraction_downtime.
                 * @member {Uint8Array} slash_fraction_downtime
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @instance
                 */
                Params.prototype.slash_fraction_downtime = $util.newBuffer([]);

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.slashing.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @static
                 * @param {cosmos.slashing.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.signed_blocks_window != null && Object.hasOwnProperty.call(m, "signed_blocks_window"))
                        w.uint32(8).int64(m.signed_blocks_window);
                    if (m.min_signed_per_window != null && Object.hasOwnProperty.call(m, "min_signed_per_window"))
                        w.uint32(18).bytes(m.min_signed_per_window);
                    if (m.downtime_jail_duration != null && Object.hasOwnProperty.call(m, "downtime_jail_duration"))
                        $root.google.protobuf.Duration.encode(m.downtime_jail_duration, w.uint32(26).fork()).ldelim();
                    if (m.slash_fraction_double_sign != null && Object.hasOwnProperty.call(m, "slash_fraction_double_sign"))
                        w.uint32(34).bytes(m.slash_fraction_double_sign);
                    if (m.slash_fraction_downtime != null && Object.hasOwnProperty.call(m, "slash_fraction_downtime"))
                        w.uint32(42).bytes(m.slash_fraction_downtime);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.signed_blocks_window = r.int64();
                                break;
                            case 2:
                                m.min_signed_per_window = r.bytes();
                                break;
                            case 3:
                                m.downtime_jail_duration = $root.google.protobuf.Duration.decode(r, r.uint32());
                                break;
                            case 4:
                                m.slash_fraction_double_sign = r.bytes();
                                break;
                            case 5:
                                m.slash_fraction_downtime = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            v1beta1.MsgUnjail = (function () {

                /**
                 * Properties of a MsgUnjail.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IMsgUnjail
                 * @property {string|null} [validator_addr] MsgUnjail validator_addr
                 */

                /**
                 * Constructs a new MsgUnjail.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a MsgUnjail.
                 * @implements IMsgUnjail
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IMsgUnjail=} [p] Properties to set
                 */
                function MsgUnjail(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgUnjail validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.slashing.v1beta1.MsgUnjail
                 * @instance
                 */
                MsgUnjail.prototype.validator_addr = "";

                /**
                 * Encodes the specified MsgUnjail message. Does not implicitly {@link cosmos.slashing.v1beta1.MsgUnjail.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.MsgUnjail
                 * @static
                 * @param {cosmos.slashing.v1beta1.IMsgUnjail} m MsgUnjail message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUnjail.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(10).string(m.validator_addr);
                    return w;
                };

                /**
                 * Decodes a MsgUnjail message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.MsgUnjail
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.MsgUnjail} MsgUnjail
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUnjail.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.MsgUnjail();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_addr = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgUnjail;
            })();

            v1beta1.MsgUnjailResponse = (function () {

                /**
                 * Properties of a MsgUnjailResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @interface IMsgUnjailResponse
                 */

                /**
                 * Constructs a new MsgUnjailResponse.
                 * @memberof cosmos.slashing.v1beta1
                 * @classdesc Represents a MsgUnjailResponse.
                 * @implements IMsgUnjailResponse
                 * @constructor
                 * @param {cosmos.slashing.v1beta1.IMsgUnjailResponse=} [p] Properties to set
                 */
                function MsgUnjailResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgUnjailResponse message. Does not implicitly {@link cosmos.slashing.v1beta1.MsgUnjailResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.slashing.v1beta1.MsgUnjailResponse
                 * @static
                 * @param {cosmos.slashing.v1beta1.IMsgUnjailResponse} m MsgUnjailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUnjailResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgUnjailResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.slashing.v1beta1.MsgUnjailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.slashing.v1beta1.MsgUnjailResponse} MsgUnjailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUnjailResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.slashing.v1beta1.MsgUnjailResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgUnjailResponse;
            })();

            return v1beta1;
        })();

        return slashing;
    })();

    cosmos.staking = (function () {

        /**
         * Namespace staking.
         * @memberof cosmos
         * @namespace
         */
        const staking = {};

        staking.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.staking
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryValidatorsRequest = (function () {

                /**
                 * Properties of a QueryValidatorsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorsRequest
                 * @property {string|null} [status] QueryValidatorsRequest status
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryValidatorsRequest pagination
                 */

                /**
                 * Constructs a new QueryValidatorsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorsRequest.
                 * @implements IQueryValidatorsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorsRequest=} [p] Properties to set
                 */
                function QueryValidatorsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorsRequest status.
                 * @member {string} status
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsRequest
                 * @instance
                 */
                QueryValidatorsRequest.prototype.status = "";

                /**
                 * QueryValidatorsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsRequest
                 * @instance
                 */
                QueryValidatorsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorsRequest} m QueryValidatorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(10).string(m.status);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorsRequest} QueryValidatorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.status = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorsRequest;
            })();

            v1beta1.QueryValidatorsResponse = (function () {

                /**
                 * Properties of a QueryValidatorsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IValidator>|null} [validators] QueryValidatorsResponse validators
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryValidatorsResponse pagination
                 */

                /**
                 * Constructs a new QueryValidatorsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorsResponse.
                 * @implements IQueryValidatorsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorsResponse=} [p] Properties to set
                 */
                function QueryValidatorsResponse(p) {
                    this.validators = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorsResponse validators.
                 * @member {Array.<cosmos.staking.v1beta1.IValidator>} validators
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsResponse
                 * @instance
                 */
                QueryValidatorsResponse.prototype.validators = $util.emptyArray;

                /**
                 * QueryValidatorsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsResponse
                 * @instance
                 */
                QueryValidatorsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorsResponse} m QueryValidatorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            $root.cosmos.staking.v1beta1.Validator.encode(m.validators[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorsResponse} QueryValidatorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push($root.cosmos.staking.v1beta1.Validator.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorsResponse;
            })();

            v1beta1.QueryValidatorRequest = (function () {

                /**
                 * Properties of a QueryValidatorRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorRequest
                 * @property {string|null} [validator_addr] QueryValidatorRequest validator_addr
                 */

                /**
                 * Constructs a new QueryValidatorRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorRequest.
                 * @implements IQueryValidatorRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorRequest=} [p] Properties to set
                 */
                function QueryValidatorRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorRequest validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryValidatorRequest
                 * @instance
                 */
                QueryValidatorRequest.prototype.validator_addr = "";

                /**
                 * Encodes the specified QueryValidatorRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorRequest} m QueryValidatorRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(10).string(m.validator_addr);
                    return w;
                };

                /**
                 * Decodes a QueryValidatorRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorRequest} QueryValidatorRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_addr = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorRequest;
            })();

            v1beta1.QueryValidatorResponse = (function () {

                /**
                 * Properties of a QueryValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorResponse
                 * @property {cosmos.staking.v1beta1.IValidator|null} [validator] QueryValidatorResponse validator
                 */

                /**
                 * Constructs a new QueryValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorResponse.
                 * @implements IQueryValidatorResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorResponse=} [p] Properties to set
                 */
                function QueryValidatorResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorResponse validator.
                 * @member {cosmos.staking.v1beta1.IValidator|null|undefined} validator
                 * @memberof cosmos.staking.v1beta1.QueryValidatorResponse
                 * @instance
                 */
                QueryValidatorResponse.prototype.validator = null;

                /**
                 * Encodes the specified QueryValidatorResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorResponse} m QueryValidatorResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                        $root.cosmos.staking.v1beta1.Validator.encode(m.validator, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorResponse} QueryValidatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator = $root.cosmos.staking.v1beta1.Validator.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorResponse;
            })();

            v1beta1.QueryValidatorDelegationsRequest = (function () {

                /**
                 * Properties of a QueryValidatorDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorDelegationsRequest
                 * @property {string|null} [validator_addr] QueryValidatorDelegationsRequest validator_addr
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryValidatorDelegationsRequest pagination
                 */

                /**
                 * Constructs a new QueryValidatorDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorDelegationsRequest.
                 * @implements IQueryValidatorDelegationsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorDelegationsRequest=} [p] Properties to set
                 */
                function QueryValidatorDelegationsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorDelegationsRequest validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
                 * @instance
                 */
                QueryValidatorDelegationsRequest.prototype.validator_addr = "";

                /**
                 * QueryValidatorDelegationsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
                 * @instance
                 */
                QueryValidatorDelegationsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorDelegationsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorDelegationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorDelegationsRequest} m QueryValidatorDelegationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorDelegationsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(10).string(m.validator_addr);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorDelegationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorDelegationsRequest} QueryValidatorDelegationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorDelegationsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorDelegationsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_addr = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorDelegationsRequest;
            })();

            v1beta1.QueryValidatorDelegationsResponse = (function () {

                /**
                 * Properties of a QueryValidatorDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorDelegationsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IDelegationResponse>|null} [delegation_responses] QueryValidatorDelegationsResponse delegation_responses
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryValidatorDelegationsResponse pagination
                 */

                /**
                 * Constructs a new QueryValidatorDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorDelegationsResponse.
                 * @implements IQueryValidatorDelegationsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorDelegationsResponse=} [p] Properties to set
                 */
                function QueryValidatorDelegationsResponse(p) {
                    this.delegation_responses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorDelegationsResponse delegation_responses.
                 * @member {Array.<cosmos.staking.v1beta1.IDelegationResponse>} delegation_responses
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
                 * @instance
                 */
                QueryValidatorDelegationsResponse.prototype.delegation_responses = $util.emptyArray;

                /**
                 * QueryValidatorDelegationsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
                 * @instance
                 */
                QueryValidatorDelegationsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorDelegationsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorDelegationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorDelegationsResponse} m QueryValidatorDelegationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorDelegationsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegation_responses != null && m.delegation_responses.length) {
                        for (var i = 0; i < m.delegation_responses.length; ++i)
                            $root.cosmos.staking.v1beta1.DelegationResponse.encode(m.delegation_responses[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorDelegationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorDelegationsResponse} QueryValidatorDelegationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorDelegationsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorDelegationsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.delegation_responses && m.delegation_responses.length))
                                    m.delegation_responses = [];
                                m.delegation_responses.push($root.cosmos.staking.v1beta1.DelegationResponse.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorDelegationsResponse;
            })();

            v1beta1.QueryValidatorUnbondingDelegationsRequest = (function () {

                /**
                 * Properties of a QueryValidatorUnbondingDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorUnbondingDelegationsRequest
                 * @property {string|null} [validator_addr] QueryValidatorUnbondingDelegationsRequest validator_addr
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryValidatorUnbondingDelegationsRequest pagination
                 */

                /**
                 * Constructs a new QueryValidatorUnbondingDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorUnbondingDelegationsRequest.
                 * @implements IQueryValidatorUnbondingDelegationsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorUnbondingDelegationsRequest=} [p] Properties to set
                 */
                function QueryValidatorUnbondingDelegationsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorUnbondingDelegationsRequest validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
                 * @instance
                 */
                QueryValidatorUnbondingDelegationsRequest.prototype.validator_addr = "";

                /**
                 * QueryValidatorUnbondingDelegationsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
                 * @instance
                 */
                QueryValidatorUnbondingDelegationsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorUnbondingDelegationsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorUnbondingDelegationsRequest} m QueryValidatorUnbondingDelegationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorUnbondingDelegationsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(10).string(m.validator_addr);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorUnbondingDelegationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest} QueryValidatorUnbondingDelegationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorUnbondingDelegationsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator_addr = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorUnbondingDelegationsRequest;
            })();

            v1beta1.QueryValidatorUnbondingDelegationsResponse = (function () {

                /**
                 * Properties of a QueryValidatorUnbondingDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryValidatorUnbondingDelegationsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IUnbondingDelegation>|null} [unbonding_responses] QueryValidatorUnbondingDelegationsResponse unbonding_responses
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryValidatorUnbondingDelegationsResponse pagination
                 */

                /**
                 * Constructs a new QueryValidatorUnbondingDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryValidatorUnbondingDelegationsResponse.
                 * @implements IQueryValidatorUnbondingDelegationsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryValidatorUnbondingDelegationsResponse=} [p] Properties to set
                 */
                function QueryValidatorUnbondingDelegationsResponse(p) {
                    this.unbonding_responses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryValidatorUnbondingDelegationsResponse unbonding_responses.
                 * @member {Array.<cosmos.staking.v1beta1.IUnbondingDelegation>} unbonding_responses
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
                 * @instance
                 */
                QueryValidatorUnbondingDelegationsResponse.prototype.unbonding_responses = $util.emptyArray;

                /**
                 * QueryValidatorUnbondingDelegationsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
                 * @instance
                 */
                QueryValidatorUnbondingDelegationsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryValidatorUnbondingDelegationsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryValidatorUnbondingDelegationsResponse} m QueryValidatorUnbondingDelegationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorUnbondingDelegationsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.unbonding_responses != null && m.unbonding_responses.length) {
                        for (var i = 0; i < m.unbonding_responses.length; ++i)
                            $root.cosmos.staking.v1beta1.UnbondingDelegation.encode(m.unbonding_responses[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryValidatorUnbondingDelegationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse} QueryValidatorUnbondingDelegationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorUnbondingDelegationsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.unbonding_responses && m.unbonding_responses.length))
                                    m.unbonding_responses = [];
                                m.unbonding_responses.push($root.cosmos.staking.v1beta1.UnbondingDelegation.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryValidatorUnbondingDelegationsResponse;
            })();

            v1beta1.QueryDelegationRequest = (function () {

                /**
                 * Properties of a QueryDelegationRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegationRequest
                 * @property {string|null} [delegator_addr] QueryDelegationRequest delegator_addr
                 * @property {string|null} [validator_addr] QueryDelegationRequest validator_addr
                 */

                /**
                 * Constructs a new QueryDelegationRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegationRequest.
                 * @implements IQueryDelegationRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegationRequest=} [p] Properties to set
                 */
                function QueryDelegationRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegationRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegationRequest
                 * @instance
                 */
                QueryDelegationRequest.prototype.delegator_addr = "";

                /**
                 * QueryDelegationRequest validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegationRequest
                 * @instance
                 */
                QueryDelegationRequest.prototype.validator_addr = "";

                /**
                 * Encodes the specified QueryDelegationRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegationRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegationRequest} m QueryDelegationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegationRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(18).string(m.validator_addr);
                    return w;
                };

                /**
                 * Decodes a QueryDelegationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegationRequest} QueryDelegationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegationRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegationRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.validator_addr = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegationRequest;
            })();

            v1beta1.QueryDelegationResponse = (function () {

                /**
                 * Properties of a QueryDelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegationResponse
                 * @property {cosmos.staking.v1beta1.IDelegationResponse|null} [delegation_response] QueryDelegationResponse delegation_response
                 */

                /**
                 * Constructs a new QueryDelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegationResponse.
                 * @implements IQueryDelegationResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegationResponse=} [p] Properties to set
                 */
                function QueryDelegationResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegationResponse delegation_response.
                 * @member {cosmos.staking.v1beta1.IDelegationResponse|null|undefined} delegation_response
                 * @memberof cosmos.staking.v1beta1.QueryDelegationResponse
                 * @instance
                 */
                QueryDelegationResponse.prototype.delegation_response = null;

                /**
                 * Encodes the specified QueryDelegationResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegationResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegationResponse} m QueryDelegationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegationResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegation_response != null && Object.hasOwnProperty.call(m, "delegation_response"))
                        $root.cosmos.staking.v1beta1.DelegationResponse.encode(m.delegation_response, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegationResponse} QueryDelegationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegationResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegationResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegation_response = $root.cosmos.staking.v1beta1.DelegationResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegationResponse;
            })();

            v1beta1.QueryUnbondingDelegationRequest = (function () {

                /**
                 * Properties of a QueryUnbondingDelegationRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryUnbondingDelegationRequest
                 * @property {string|null} [delegator_addr] QueryUnbondingDelegationRequest delegator_addr
                 * @property {string|null} [validator_addr] QueryUnbondingDelegationRequest validator_addr
                 */

                /**
                 * Constructs a new QueryUnbondingDelegationRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryUnbondingDelegationRequest.
                 * @implements IQueryUnbondingDelegationRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryUnbondingDelegationRequest=} [p] Properties to set
                 */
                function QueryUnbondingDelegationRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryUnbondingDelegationRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
                 * @instance
                 */
                QueryUnbondingDelegationRequest.prototype.delegator_addr = "";

                /**
                 * QueryUnbondingDelegationRequest validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
                 * @instance
                 */
                QueryUnbondingDelegationRequest.prototype.validator_addr = "";

                /**
                 * Encodes the specified QueryUnbondingDelegationRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryUnbondingDelegationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryUnbondingDelegationRequest} m QueryUnbondingDelegationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUnbondingDelegationRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(18).string(m.validator_addr);
                    return w;
                };

                /**
                 * Decodes a QueryUnbondingDelegationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryUnbondingDelegationRequest} QueryUnbondingDelegationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUnbondingDelegationRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryUnbondingDelegationRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.validator_addr = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryUnbondingDelegationRequest;
            })();

            v1beta1.QueryUnbondingDelegationResponse = (function () {

                /**
                 * Properties of a QueryUnbondingDelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryUnbondingDelegationResponse
                 * @property {cosmos.staking.v1beta1.IUnbondingDelegation|null} [unbond] QueryUnbondingDelegationResponse unbond
                 */

                /**
                 * Constructs a new QueryUnbondingDelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryUnbondingDelegationResponse.
                 * @implements IQueryUnbondingDelegationResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryUnbondingDelegationResponse=} [p] Properties to set
                 */
                function QueryUnbondingDelegationResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryUnbondingDelegationResponse unbond.
                 * @member {cosmos.staking.v1beta1.IUnbondingDelegation|null|undefined} unbond
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
                 * @instance
                 */
                QueryUnbondingDelegationResponse.prototype.unbond = null;

                /**
                 * Encodes the specified QueryUnbondingDelegationResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryUnbondingDelegationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryUnbondingDelegationResponse} m QueryUnbondingDelegationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUnbondingDelegationResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.unbond != null && Object.hasOwnProperty.call(m, "unbond"))
                        $root.cosmos.staking.v1beta1.UnbondingDelegation.encode(m.unbond, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryUnbondingDelegationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryUnbondingDelegationResponse} QueryUnbondingDelegationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUnbondingDelegationResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryUnbondingDelegationResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.unbond = $root.cosmos.staking.v1beta1.UnbondingDelegation.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryUnbondingDelegationResponse;
            })();

            v1beta1.QueryDelegatorDelegationsRequest = (function () {

                /**
                 * Properties of a QueryDelegatorDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorDelegationsRequest
                 * @property {string|null} [delegator_addr] QueryDelegatorDelegationsRequest delegator_addr
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDelegatorDelegationsRequest pagination
                 */

                /**
                 * Constructs a new QueryDelegatorDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorDelegationsRequest.
                 * @implements IQueryDelegatorDelegationsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorDelegationsRequest=} [p] Properties to set
                 */
                function QueryDelegatorDelegationsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorDelegationsRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
                 * @instance
                 */
                QueryDelegatorDelegationsRequest.prototype.delegator_addr = "";

                /**
                 * QueryDelegatorDelegationsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
                 * @instance
                 */
                QueryDelegatorDelegationsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDelegatorDelegationsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorDelegationsRequest} m QueryDelegatorDelegationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorDelegationsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorDelegationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest} QueryDelegatorDelegationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorDelegationsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorDelegationsRequest;
            })();

            v1beta1.QueryDelegatorDelegationsResponse = (function () {

                /**
                 * Properties of a QueryDelegatorDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorDelegationsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IDelegationResponse>|null} [delegation_responses] QueryDelegatorDelegationsResponse delegation_responses
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDelegatorDelegationsResponse pagination
                 */

                /**
                 * Constructs a new QueryDelegatorDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorDelegationsResponse.
                 * @implements IQueryDelegatorDelegationsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorDelegationsResponse=} [p] Properties to set
                 */
                function QueryDelegatorDelegationsResponse(p) {
                    this.delegation_responses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorDelegationsResponse delegation_responses.
                 * @member {Array.<cosmos.staking.v1beta1.IDelegationResponse>} delegation_responses
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
                 * @instance
                 */
                QueryDelegatorDelegationsResponse.prototype.delegation_responses = $util.emptyArray;

                /**
                 * QueryDelegatorDelegationsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
                 * @instance
                 */
                QueryDelegatorDelegationsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDelegatorDelegationsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorDelegationsResponse} m QueryDelegatorDelegationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorDelegationsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegation_responses != null && m.delegation_responses.length) {
                        for (var i = 0; i < m.delegation_responses.length; ++i)
                            $root.cosmos.staking.v1beta1.DelegationResponse.encode(m.delegation_responses[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorDelegationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse} QueryDelegatorDelegationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorDelegationsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.delegation_responses && m.delegation_responses.length))
                                    m.delegation_responses = [];
                                m.delegation_responses.push($root.cosmos.staking.v1beta1.DelegationResponse.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorDelegationsResponse;
            })();

            v1beta1.QueryDelegatorUnbondingDelegationsRequest = (function () {

                /**
                 * Properties of a QueryDelegatorUnbondingDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorUnbondingDelegationsRequest
                 * @property {string|null} [delegator_addr] QueryDelegatorUnbondingDelegationsRequest delegator_addr
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDelegatorUnbondingDelegationsRequest pagination
                 */

                /**
                 * Constructs a new QueryDelegatorUnbondingDelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorUnbondingDelegationsRequest.
                 * @implements IQueryDelegatorUnbondingDelegationsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorUnbondingDelegationsRequest=} [p] Properties to set
                 */
                function QueryDelegatorUnbondingDelegationsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorUnbondingDelegationsRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
                 * @instance
                 */
                QueryDelegatorUnbondingDelegationsRequest.prototype.delegator_addr = "";

                /**
                 * QueryDelegatorUnbondingDelegationsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
                 * @instance
                 */
                QueryDelegatorUnbondingDelegationsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDelegatorUnbondingDelegationsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorUnbondingDelegationsRequest} m QueryDelegatorUnbondingDelegationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorUnbondingDelegationsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorUnbondingDelegationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest} QueryDelegatorUnbondingDelegationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorUnbondingDelegationsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorUnbondingDelegationsRequest;
            })();

            v1beta1.QueryDelegatorUnbondingDelegationsResponse = (function () {

                /**
                 * Properties of a QueryDelegatorUnbondingDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorUnbondingDelegationsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IUnbondingDelegation>|null} [unbonding_responses] QueryDelegatorUnbondingDelegationsResponse unbonding_responses
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDelegatorUnbondingDelegationsResponse pagination
                 */

                /**
                 * Constructs a new QueryDelegatorUnbondingDelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorUnbondingDelegationsResponse.
                 * @implements IQueryDelegatorUnbondingDelegationsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorUnbondingDelegationsResponse=} [p] Properties to set
                 */
                function QueryDelegatorUnbondingDelegationsResponse(p) {
                    this.unbonding_responses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorUnbondingDelegationsResponse unbonding_responses.
                 * @member {Array.<cosmos.staking.v1beta1.IUnbondingDelegation>} unbonding_responses
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
                 * @instance
                 */
                QueryDelegatorUnbondingDelegationsResponse.prototype.unbonding_responses = $util.emptyArray;

                /**
                 * QueryDelegatorUnbondingDelegationsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
                 * @instance
                 */
                QueryDelegatorUnbondingDelegationsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDelegatorUnbondingDelegationsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorUnbondingDelegationsResponse} m QueryDelegatorUnbondingDelegationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorUnbondingDelegationsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.unbonding_responses != null && m.unbonding_responses.length) {
                        for (var i = 0; i < m.unbonding_responses.length; ++i)
                            $root.cosmos.staking.v1beta1.UnbondingDelegation.encode(m.unbonding_responses[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorUnbondingDelegationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse} QueryDelegatorUnbondingDelegationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorUnbondingDelegationsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.unbonding_responses && m.unbonding_responses.length))
                                    m.unbonding_responses = [];
                                m.unbonding_responses.push($root.cosmos.staking.v1beta1.UnbondingDelegation.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorUnbondingDelegationsResponse;
            })();

            v1beta1.QueryRedelegationsRequest = (function () {

                /**
                 * Properties of a QueryRedelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryRedelegationsRequest
                 * @property {string|null} [delegator_addr] QueryRedelegationsRequest delegator_addr
                 * @property {string|null} [src_validator_addr] QueryRedelegationsRequest src_validator_addr
                 * @property {string|null} [dst_validator_addr] QueryRedelegationsRequest dst_validator_addr
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryRedelegationsRequest pagination
                 */

                /**
                 * Constructs a new QueryRedelegationsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryRedelegationsRequest.
                 * @implements IQueryRedelegationsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryRedelegationsRequest=} [p] Properties to set
                 */
                function QueryRedelegationsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryRedelegationsRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsRequest
                 * @instance
                 */
                QueryRedelegationsRequest.prototype.delegator_addr = "";

                /**
                 * QueryRedelegationsRequest src_validator_addr.
                 * @member {string} src_validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsRequest
                 * @instance
                 */
                QueryRedelegationsRequest.prototype.src_validator_addr = "";

                /**
                 * QueryRedelegationsRequest dst_validator_addr.
                 * @member {string} dst_validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsRequest
                 * @instance
                 */
                QueryRedelegationsRequest.prototype.dst_validator_addr = "";

                /**
                 * QueryRedelegationsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsRequest
                 * @instance
                 */
                QueryRedelegationsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryRedelegationsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryRedelegationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryRedelegationsRequest} m QueryRedelegationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRedelegationsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.src_validator_addr != null && Object.hasOwnProperty.call(m, "src_validator_addr"))
                        w.uint32(18).string(m.src_validator_addr);
                    if (m.dst_validator_addr != null && Object.hasOwnProperty.call(m, "dst_validator_addr"))
                        w.uint32(26).string(m.dst_validator_addr);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryRedelegationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryRedelegationsRequest} QueryRedelegationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRedelegationsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryRedelegationsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.src_validator_addr = r.string();
                                break;
                            case 3:
                                m.dst_validator_addr = r.string();
                                break;
                            case 4:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryRedelegationsRequest;
            })();

            v1beta1.QueryRedelegationsResponse = (function () {

                /**
                 * Properties of a QueryRedelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryRedelegationsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IRedelegationResponse>|null} [redelegation_responses] QueryRedelegationsResponse redelegation_responses
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryRedelegationsResponse pagination
                 */

                /**
                 * Constructs a new QueryRedelegationsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryRedelegationsResponse.
                 * @implements IQueryRedelegationsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryRedelegationsResponse=} [p] Properties to set
                 */
                function QueryRedelegationsResponse(p) {
                    this.redelegation_responses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryRedelegationsResponse redelegation_responses.
                 * @member {Array.<cosmos.staking.v1beta1.IRedelegationResponse>} redelegation_responses
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsResponse
                 * @instance
                 */
                QueryRedelegationsResponse.prototype.redelegation_responses = $util.emptyArray;

                /**
                 * QueryRedelegationsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsResponse
                 * @instance
                 */
                QueryRedelegationsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryRedelegationsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryRedelegationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryRedelegationsResponse} m QueryRedelegationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRedelegationsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.redelegation_responses != null && m.redelegation_responses.length) {
                        for (var i = 0; i < m.redelegation_responses.length; ++i)
                            $root.cosmos.staking.v1beta1.RedelegationResponse.encode(m.redelegation_responses[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryRedelegationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryRedelegationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryRedelegationsResponse} QueryRedelegationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRedelegationsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryRedelegationsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.redelegation_responses && m.redelegation_responses.length))
                                    m.redelegation_responses = [];
                                m.redelegation_responses.push($root.cosmos.staking.v1beta1.RedelegationResponse.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryRedelegationsResponse;
            })();

            v1beta1.QueryDelegatorValidatorsRequest = (function () {

                /**
                 * Properties of a QueryDelegatorValidatorsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorValidatorsRequest
                 * @property {string|null} [delegator_addr] QueryDelegatorValidatorsRequest delegator_addr
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDelegatorValidatorsRequest pagination
                 */

                /**
                 * Constructs a new QueryDelegatorValidatorsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorValidatorsRequest.
                 * @implements IQueryDelegatorValidatorsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorsRequest=} [p] Properties to set
                 */
                function QueryDelegatorValidatorsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorValidatorsRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
                 * @instance
                 */
                QueryDelegatorValidatorsRequest.prototype.delegator_addr = "";

                /**
                 * QueryDelegatorValidatorsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
                 * @instance
                 */
                QueryDelegatorValidatorsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDelegatorValidatorsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorsRequest} m QueryDelegatorValidatorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorValidatorsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorValidatorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest} QueryDelegatorValidatorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorValidatorsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorValidatorsRequest;
            })();

            v1beta1.QueryDelegatorValidatorsResponse = (function () {

                /**
                 * Properties of a QueryDelegatorValidatorsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorValidatorsResponse
                 * @property {Array.<cosmos.staking.v1beta1.IValidator>|null} [validators] QueryDelegatorValidatorsResponse validators
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDelegatorValidatorsResponse pagination
                 */

                /**
                 * Constructs a new QueryDelegatorValidatorsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorValidatorsResponse.
                 * @implements IQueryDelegatorValidatorsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorsResponse=} [p] Properties to set
                 */
                function QueryDelegatorValidatorsResponse(p) {
                    this.validators = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorValidatorsResponse validators.
                 * @member {Array.<cosmos.staking.v1beta1.IValidator>} validators
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
                 * @instance
                 */
                QueryDelegatorValidatorsResponse.prototype.validators = $util.emptyArray;

                /**
                 * QueryDelegatorValidatorsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
                 * @instance
                 */
                QueryDelegatorValidatorsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryDelegatorValidatorsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorsResponse} m QueryDelegatorValidatorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorValidatorsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            $root.cosmos.staking.v1beta1.Validator.encode(m.validators[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorValidatorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse} QueryDelegatorValidatorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorValidatorsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push($root.cosmos.staking.v1beta1.Validator.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorValidatorsResponse;
            })();

            v1beta1.QueryDelegatorValidatorRequest = (function () {

                /**
                 * Properties of a QueryDelegatorValidatorRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorValidatorRequest
                 * @property {string|null} [delegator_addr] QueryDelegatorValidatorRequest delegator_addr
                 * @property {string|null} [validator_addr] QueryDelegatorValidatorRequest validator_addr
                 */

                /**
                 * Constructs a new QueryDelegatorValidatorRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorValidatorRequest.
                 * @implements IQueryDelegatorValidatorRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorRequest=} [p] Properties to set
                 */
                function QueryDelegatorValidatorRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorValidatorRequest delegator_addr.
                 * @member {string} delegator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
                 * @instance
                 */
                QueryDelegatorValidatorRequest.prototype.delegator_addr = "";

                /**
                 * QueryDelegatorValidatorRequest validator_addr.
                 * @member {string} validator_addr
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
                 * @instance
                 */
                QueryDelegatorValidatorRequest.prototype.validator_addr = "";

                /**
                 * Encodes the specified QueryDelegatorValidatorRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorValidatorRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorRequest} m QueryDelegatorValidatorRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorValidatorRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_addr != null && Object.hasOwnProperty.call(m, "delegator_addr"))
                        w.uint32(10).string(m.delegator_addr);
                    if (m.validator_addr != null && Object.hasOwnProperty.call(m, "validator_addr"))
                        w.uint32(18).string(m.validator_addr);
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorValidatorRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorValidatorRequest} QueryDelegatorValidatorRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorValidatorRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorValidatorRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_addr = r.string();
                                break;
                            case 2:
                                m.validator_addr = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorValidatorRequest;
            })();

            v1beta1.QueryDelegatorValidatorResponse = (function () {

                /**
                 * Properties of a QueryDelegatorValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryDelegatorValidatorResponse
                 * @property {cosmos.staking.v1beta1.IValidator|null} [validator] QueryDelegatorValidatorResponse validator
                 */

                /**
                 * Constructs a new QueryDelegatorValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryDelegatorValidatorResponse.
                 * @implements IQueryDelegatorValidatorResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorResponse=} [p] Properties to set
                 */
                function QueryDelegatorValidatorResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDelegatorValidatorResponse validator.
                 * @member {cosmos.staking.v1beta1.IValidator|null|undefined} validator
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
                 * @instance
                 */
                QueryDelegatorValidatorResponse.prototype.validator = null;

                /**
                 * Encodes the specified QueryDelegatorValidatorResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryDelegatorValidatorResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryDelegatorValidatorResponse} m QueryDelegatorValidatorResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDelegatorValidatorResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                        $root.cosmos.staking.v1beta1.Validator.encode(m.validator, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDelegatorValidatorResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryDelegatorValidatorResponse} QueryDelegatorValidatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDelegatorValidatorResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryDelegatorValidatorResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator = $root.cosmos.staking.v1beta1.Validator.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDelegatorValidatorResponse;
            })();

            v1beta1.QueryHistoricalInfoRequest = (function () {

                /**
                 * Properties of a QueryHistoricalInfoRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryHistoricalInfoRequest
                 * @property {Long|null} [height] QueryHistoricalInfoRequest height
                 */

                /**
                 * Constructs a new QueryHistoricalInfoRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryHistoricalInfoRequest.
                 * @implements IQueryHistoricalInfoRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryHistoricalInfoRequest=} [p] Properties to set
                 */
                function QueryHistoricalInfoRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryHistoricalInfoRequest height.
                 * @member {Long} height
                 * @memberof cosmos.staking.v1beta1.QueryHistoricalInfoRequest
                 * @instance
                 */
                QueryHistoricalInfoRequest.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified QueryHistoricalInfoRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryHistoricalInfoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryHistoricalInfoRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryHistoricalInfoRequest} m QueryHistoricalInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryHistoricalInfoRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                        w.uint32(8).int64(m.height);
                    return w;
                };

                /**
                 * Decodes a QueryHistoricalInfoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryHistoricalInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryHistoricalInfoRequest} QueryHistoricalInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryHistoricalInfoRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryHistoricalInfoRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.height = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryHistoricalInfoRequest;
            })();

            v1beta1.QueryHistoricalInfoResponse = (function () {

                /**
                 * Properties of a QueryHistoricalInfoResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryHistoricalInfoResponse
                 * @property {cosmos.staking.v1beta1.IHistoricalInfo|null} [hist] QueryHistoricalInfoResponse hist
                 */

                /**
                 * Constructs a new QueryHistoricalInfoResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryHistoricalInfoResponse.
                 * @implements IQueryHistoricalInfoResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryHistoricalInfoResponse=} [p] Properties to set
                 */
                function QueryHistoricalInfoResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryHistoricalInfoResponse hist.
                 * @member {cosmos.staking.v1beta1.IHistoricalInfo|null|undefined} hist
                 * @memberof cosmos.staking.v1beta1.QueryHistoricalInfoResponse
                 * @instance
                 */
                QueryHistoricalInfoResponse.prototype.hist = null;

                /**
                 * Encodes the specified QueryHistoricalInfoResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryHistoricalInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryHistoricalInfoResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryHistoricalInfoResponse} m QueryHistoricalInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryHistoricalInfoResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.hist != null && Object.hasOwnProperty.call(m, "hist"))
                        $root.cosmos.staking.v1beta1.HistoricalInfo.encode(m.hist, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryHistoricalInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryHistoricalInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryHistoricalInfoResponse} QueryHistoricalInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryHistoricalInfoResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryHistoricalInfoResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.hist = $root.cosmos.staking.v1beta1.HistoricalInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryHistoricalInfoResponse;
            })();

            v1beta1.QueryPoolRequest = (function () {

                /**
                 * Properties of a QueryPoolRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryPoolRequest
                 */

                /**
                 * Constructs a new QueryPoolRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryPoolRequest.
                 * @implements IQueryPoolRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryPoolRequest=} [p] Properties to set
                 */
                function QueryPoolRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryPoolRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryPoolRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryPoolRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryPoolRequest} m QueryPoolRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryPoolRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryPoolRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryPoolRequest} QueryPoolRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryPoolRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryPoolRequest;
            })();

            v1beta1.QueryPoolResponse = (function () {

                /**
                 * Properties of a QueryPoolResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryPoolResponse
                 * @property {cosmos.staking.v1beta1.IPool|null} [pool] QueryPoolResponse pool
                 */

                /**
                 * Constructs a new QueryPoolResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryPoolResponse.
                 * @implements IQueryPoolResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryPoolResponse=} [p] Properties to set
                 */
                function QueryPoolResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryPoolResponse pool.
                 * @member {cosmos.staking.v1beta1.IPool|null|undefined} pool
                 * @memberof cosmos.staking.v1beta1.QueryPoolResponse
                 * @instance
                 */
                QueryPoolResponse.prototype.pool = null;

                /**
                 * Encodes the specified QueryPoolResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryPoolResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryPoolResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryPoolResponse} m QueryPoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pool != null && Object.hasOwnProperty.call(m, "pool"))
                        $root.cosmos.staking.v1beta1.Pool.encode(m.pool, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryPoolResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryPoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryPoolResponse} QueryPoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryPoolResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.pool = $root.cosmos.staking.v1beta1.Pool.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryPoolResponse;
            })();

            v1beta1.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link cosmos.staking.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryParamsRequest
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {cosmos.staking.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {cosmos.staking.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.staking.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link cosmos.staking.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.QueryParamsResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.staking.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.staking.v1beta1.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            v1beta1.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IGenesisState
                 * @property {cosmos.staking.v1beta1.IParams|null} [params] GenesisState params
                 * @property {Uint8Array|null} [last_total_power] GenesisState last_total_power
                 * @property {Array.<cosmos.staking.v1beta1.ILastValidatorPower>|null} [last_validator_powers] GenesisState last_validator_powers
                 * @property {Array.<cosmos.staking.v1beta1.IValidator>|null} [validators] GenesisState validators
                 * @property {Array.<cosmos.staking.v1beta1.IDelegation>|null} [delegations] GenesisState delegations
                 * @property {Array.<cosmos.staking.v1beta1.IUnbondingDelegation>|null} [unbonding_delegations] GenesisState unbonding_delegations
                 * @property {Array.<cosmos.staking.v1beta1.IRedelegation>|null} [redelegations] GenesisState redelegations
                 * @property {boolean|null} [exported] GenesisState exported
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.last_validator_powers = [];
                    this.validators = [];
                    this.delegations = [];
                    this.unbonding_delegations = [];
                    this.redelegations = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmos.staking.v1beta1.IParams|null|undefined} params
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState last_total_power.
                 * @member {Uint8Array} last_total_power
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.last_total_power = $util.newBuffer([]);

                /**
                 * GenesisState last_validator_powers.
                 * @member {Array.<cosmos.staking.v1beta1.ILastValidatorPower>} last_validator_powers
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.last_validator_powers = $util.emptyArray;

                /**
                 * GenesisState validators.
                 * @member {Array.<cosmos.staking.v1beta1.IValidator>} validators
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.validators = $util.emptyArray;

                /**
                 * GenesisState delegations.
                 * @member {Array.<cosmos.staking.v1beta1.IDelegation>} delegations
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.delegations = $util.emptyArray;

                /**
                 * GenesisState unbonding_delegations.
                 * @member {Array.<cosmos.staking.v1beta1.IUnbondingDelegation>} unbonding_delegations
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.unbonding_delegations = $util.emptyArray;

                /**
                 * GenesisState redelegations.
                 * @member {Array.<cosmos.staking.v1beta1.IRedelegation>} redelegations
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.redelegations = $util.emptyArray;

                /**
                 * GenesisState exported.
                 * @member {boolean} exported
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.exported = false;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmos.staking.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @static
                 * @param {cosmos.staking.v1beta1.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.cosmos.staking.v1beta1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    if (m.last_total_power != null && Object.hasOwnProperty.call(m, "last_total_power"))
                        w.uint32(18).bytes(m.last_total_power);
                    if (m.last_validator_powers != null && m.last_validator_powers.length) {
                        for (var i = 0; i < m.last_validator_powers.length; ++i)
                            $root.cosmos.staking.v1beta1.LastValidatorPower.encode(m.last_validator_powers[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            $root.cosmos.staking.v1beta1.Validator.encode(m.validators[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.delegations != null && m.delegations.length) {
                        for (var i = 0; i < m.delegations.length; ++i)
                            $root.cosmos.staking.v1beta1.Delegation.encode(m.delegations[i], w.uint32(42).fork()).ldelim();
                    }
                    if (m.unbonding_delegations != null && m.unbonding_delegations.length) {
                        for (var i = 0; i < m.unbonding_delegations.length; ++i)
                            $root.cosmos.staking.v1beta1.UnbondingDelegation.encode(m.unbonding_delegations[i], w.uint32(50).fork()).ldelim();
                    }
                    if (m.redelegations != null && m.redelegations.length) {
                        for (var i = 0; i < m.redelegations.length; ++i)
                            $root.cosmos.staking.v1beta1.Redelegation.encode(m.redelegations[i], w.uint32(58).fork()).ldelim();
                    }
                    if (m.exported != null && Object.hasOwnProperty.call(m, "exported"))
                        w.uint32(64).bool(m.exported);
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.cosmos.staking.v1beta1.Params.decode(r, r.uint32());
                                break;
                            case 2:
                                m.last_total_power = r.bytes();
                                break;
                            case 3:
                                if (!(m.last_validator_powers && m.last_validator_powers.length))
                                    m.last_validator_powers = [];
                                m.last_validator_powers.push($root.cosmos.staking.v1beta1.LastValidatorPower.decode(r, r.uint32()));
                                break;
                            case 4:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push($root.cosmos.staking.v1beta1.Validator.decode(r, r.uint32()));
                                break;
                            case 5:
                                if (!(m.delegations && m.delegations.length))
                                    m.delegations = [];
                                m.delegations.push($root.cosmos.staking.v1beta1.Delegation.decode(r, r.uint32()));
                                break;
                            case 6:
                                if (!(m.unbonding_delegations && m.unbonding_delegations.length))
                                    m.unbonding_delegations = [];
                                m.unbonding_delegations.push($root.cosmos.staking.v1beta1.UnbondingDelegation.decode(r, r.uint32()));
                                break;
                            case 7:
                                if (!(m.redelegations && m.redelegations.length))
                                    m.redelegations = [];
                                m.redelegations.push($root.cosmos.staking.v1beta1.Redelegation.decode(r, r.uint32()));
                                break;
                            case 8:
                                m.exported = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            v1beta1.LastValidatorPower = (function () {

                /**
                 * Properties of a LastValidatorPower.
                 * @memberof cosmos.staking.v1beta1
                 * @interface ILastValidatorPower
                 * @property {string|null} [address] LastValidatorPower address
                 * @property {Long|null} [power] LastValidatorPower power
                 */

                /**
                 * Constructs a new LastValidatorPower.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a LastValidatorPower.
                 * @implements ILastValidatorPower
                 * @constructor
                 * @param {cosmos.staking.v1beta1.ILastValidatorPower=} [p] Properties to set
                 */
                function LastValidatorPower(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * LastValidatorPower address.
                 * @member {string} address
                 * @memberof cosmos.staking.v1beta1.LastValidatorPower
                 * @instance
                 */
                LastValidatorPower.prototype.address = "";

                /**
                 * LastValidatorPower power.
                 * @member {Long} power
                 * @memberof cosmos.staking.v1beta1.LastValidatorPower
                 * @instance
                 */
                LastValidatorPower.prototype.power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified LastValidatorPower message. Does not implicitly {@link cosmos.staking.v1beta1.LastValidatorPower.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.LastValidatorPower
                 * @static
                 * @param {cosmos.staking.v1beta1.ILastValidatorPower} m LastValidatorPower message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LastValidatorPower.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).string(m.address);
                    if (m.power != null && Object.hasOwnProperty.call(m, "power"))
                        w.uint32(16).int64(m.power);
                    return w;
                };

                /**
                 * Decodes a LastValidatorPower message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.LastValidatorPower
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.LastValidatorPower} LastValidatorPower
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LastValidatorPower.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.LastValidatorPower();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.string();
                                break;
                            case 2:
                                m.power = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return LastValidatorPower;
            })();

            v1beta1.HistoricalInfo = (function () {

                /**
                 * Properties of a HistoricalInfo.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IHistoricalInfo
                 * @property {tendermint.types.IHeader|null} [header] HistoricalInfo header
                 * @property {Array.<cosmos.staking.v1beta1.IValidator>|null} [valset] HistoricalInfo valset
                 */

                /**
                 * Constructs a new HistoricalInfo.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a HistoricalInfo.
                 * @implements IHistoricalInfo
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IHistoricalInfo=} [p] Properties to set
                 */
                function HistoricalInfo(p) {
                    this.valset = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * HistoricalInfo header.
                 * @member {tendermint.types.IHeader|null|undefined} header
                 * @memberof cosmos.staking.v1beta1.HistoricalInfo
                 * @instance
                 */
                HistoricalInfo.prototype.header = null;

                /**
                 * HistoricalInfo valset.
                 * @member {Array.<cosmos.staking.v1beta1.IValidator>} valset
                 * @memberof cosmos.staking.v1beta1.HistoricalInfo
                 * @instance
                 */
                HistoricalInfo.prototype.valset = $util.emptyArray;

                /**
                 * Encodes the specified HistoricalInfo message. Does not implicitly {@link cosmos.staking.v1beta1.HistoricalInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.HistoricalInfo
                 * @static
                 * @param {cosmos.staking.v1beta1.IHistoricalInfo} m HistoricalInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HistoricalInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                        $root.tendermint.types.Header.encode(m.header, w.uint32(10).fork()).ldelim();
                    if (m.valset != null && m.valset.length) {
                        for (var i = 0; i < m.valset.length; ++i)
                            $root.cosmos.staking.v1beta1.Validator.encode(m.valset[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a HistoricalInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.HistoricalInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.HistoricalInfo} HistoricalInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HistoricalInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.HistoricalInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.header = $root.tendermint.types.Header.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.valset && m.valset.length))
                                    m.valset = [];
                                m.valset.push($root.cosmos.staking.v1beta1.Validator.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return HistoricalInfo;
            })();

            v1beta1.CommissionRates = (function () {

                /**
                 * Properties of a CommissionRates.
                 * @memberof cosmos.staking.v1beta1
                 * @interface ICommissionRates
                 * @property {string|null} [rate] CommissionRates rate
                 * @property {string|null} [max_rate] CommissionRates max_rate
                 * @property {string|null} [max_change_rate] CommissionRates max_change_rate
                 */

                /**
                 * Constructs a new CommissionRates.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a CommissionRates.
                 * @implements ICommissionRates
                 * @constructor
                 * @param {cosmos.staking.v1beta1.ICommissionRates=} [p] Properties to set
                 */
                function CommissionRates(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CommissionRates rate.
                 * @member {string} rate
                 * @memberof cosmos.staking.v1beta1.CommissionRates
                 * @instance
                 */
                CommissionRates.prototype.rate = "";

                /**
                 * CommissionRates max_rate.
                 * @member {string} max_rate
                 * @memberof cosmos.staking.v1beta1.CommissionRates
                 * @instance
                 */
                CommissionRates.prototype.max_rate = "";

                /**
                 * CommissionRates max_change_rate.
                 * @member {string} max_change_rate
                 * @memberof cosmos.staking.v1beta1.CommissionRates
                 * @instance
                 */
                CommissionRates.prototype.max_change_rate = "";

                /**
                 * Encodes the specified CommissionRates message. Does not implicitly {@link cosmos.staking.v1beta1.CommissionRates.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.CommissionRates
                 * @static
                 * @param {cosmos.staking.v1beta1.ICommissionRates} m CommissionRates message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommissionRates.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.rate != null && Object.hasOwnProperty.call(m, "rate"))
                        w.uint32(10).string(m.rate);
                    if (m.max_rate != null && Object.hasOwnProperty.call(m, "max_rate"))
                        w.uint32(18).string(m.max_rate);
                    if (m.max_change_rate != null && Object.hasOwnProperty.call(m, "max_change_rate"))
                        w.uint32(26).string(m.max_change_rate);
                    return w;
                };

                /**
                 * Decodes a CommissionRates message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.CommissionRates
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.CommissionRates} CommissionRates
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommissionRates.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.CommissionRates();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.rate = r.string();
                                break;
                            case 2:
                                m.max_rate = r.string();
                                break;
                            case 3:
                                m.max_change_rate = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CommissionRates;
            })();

            v1beta1.Commission = (function () {

                /**
                 * Properties of a Commission.
                 * @memberof cosmos.staking.v1beta1
                 * @interface ICommission
                 * @property {cosmos.staking.v1beta1.ICommissionRates|null} [commission_rates] Commission commission_rates
                 * @property {google.protobuf.ITimestamp|null} [update_time] Commission update_time
                 */

                /**
                 * Constructs a new Commission.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Commission.
                 * @implements ICommission
                 * @constructor
                 * @param {cosmos.staking.v1beta1.ICommission=} [p] Properties to set
                 */
                function Commission(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Commission commission_rates.
                 * @member {cosmos.staking.v1beta1.ICommissionRates|null|undefined} commission_rates
                 * @memberof cosmos.staking.v1beta1.Commission
                 * @instance
                 */
                Commission.prototype.commission_rates = null;

                /**
                 * Commission update_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} update_time
                 * @memberof cosmos.staking.v1beta1.Commission
                 * @instance
                 */
                Commission.prototype.update_time = null;

                /**
                 * Encodes the specified Commission message. Does not implicitly {@link cosmos.staking.v1beta1.Commission.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Commission
                 * @static
                 * @param {cosmos.staking.v1beta1.ICommission} m Commission message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Commission.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.commission_rates != null && Object.hasOwnProperty.call(m, "commission_rates"))
                        $root.cosmos.staking.v1beta1.CommissionRates.encode(m.commission_rates, w.uint32(10).fork()).ldelim();
                    if (m.update_time != null && Object.hasOwnProperty.call(m, "update_time"))
                        $root.google.protobuf.Timestamp.encode(m.update_time, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a Commission message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Commission
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Commission} Commission
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Commission.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Commission();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.commission_rates = $root.cosmos.staking.v1beta1.CommissionRates.decode(r, r.uint32());
                                break;
                            case 2:
                                m.update_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Commission;
            })();

            v1beta1.Description = (function () {

                /**
                 * Properties of a Description.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDescription
                 * @property {string|null} [moniker] Description moniker
                 * @property {string|null} [identity] Description identity
                 * @property {string|null} [website] Description website
                 * @property {string|null} [security_contact] Description security_contact
                 * @property {string|null} [details] Description details
                 */

                /**
                 * Constructs a new Description.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Description.
                 * @implements IDescription
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDescription=} [p] Properties to set
                 */
                function Description(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Description moniker.
                 * @member {string} moniker
                 * @memberof cosmos.staking.v1beta1.Description
                 * @instance
                 */
                Description.prototype.moniker = "";

                /**
                 * Description identity.
                 * @member {string} identity
                 * @memberof cosmos.staking.v1beta1.Description
                 * @instance
                 */
                Description.prototype.identity = "";

                /**
                 * Description website.
                 * @member {string} website
                 * @memberof cosmos.staking.v1beta1.Description
                 * @instance
                 */
                Description.prototype.website = "";

                /**
                 * Description security_contact.
                 * @member {string} security_contact
                 * @memberof cosmos.staking.v1beta1.Description
                 * @instance
                 */
                Description.prototype.security_contact = "";

                /**
                 * Description details.
                 * @member {string} details
                 * @memberof cosmos.staking.v1beta1.Description
                 * @instance
                 */
                Description.prototype.details = "";

                /**
                 * Encodes the specified Description message. Does not implicitly {@link cosmos.staking.v1beta1.Description.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Description
                 * @static
                 * @param {cosmos.staking.v1beta1.IDescription} m Description message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Description.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.moniker != null && Object.hasOwnProperty.call(m, "moniker"))
                        w.uint32(10).string(m.moniker);
                    if (m.identity != null && Object.hasOwnProperty.call(m, "identity"))
                        w.uint32(18).string(m.identity);
                    if (m.website != null && Object.hasOwnProperty.call(m, "website"))
                        w.uint32(26).string(m.website);
                    if (m.security_contact != null && Object.hasOwnProperty.call(m, "security_contact"))
                        w.uint32(34).string(m.security_contact);
                    if (m.details != null && Object.hasOwnProperty.call(m, "details"))
                        w.uint32(42).string(m.details);
                    return w;
                };

                /**
                 * Decodes a Description message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Description
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Description} Description
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Description.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Description();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.moniker = r.string();
                                break;
                            case 2:
                                m.identity = r.string();
                                break;
                            case 3:
                                m.website = r.string();
                                break;
                            case 4:
                                m.security_contact = r.string();
                                break;
                            case 5:
                                m.details = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Description;
            })();

            v1beta1.Validator = (function () {

                /**
                 * Properties of a Validator.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IValidator
                 * @property {string|null} [operator_address] Validator operator_address
                 * @property {google.protobuf.IAny|null} [consensus_pubkey] Validator consensus_pubkey
                 * @property {boolean|null} [jailed] Validator jailed
                 * @property {cosmos.staking.v1beta1.BondStatus|null} [status] Validator status
                 * @property {string|null} [tokens] Validator tokens
                 * @property {string|null} [delegator_shares] Validator delegator_shares
                 * @property {cosmos.staking.v1beta1.IDescription|null} [description] Validator description
                 * @property {Long|null} [unbonding_height] Validator unbonding_height
                 * @property {google.protobuf.ITimestamp|null} [unbonding_time] Validator unbonding_time
                 * @property {cosmos.staking.v1beta1.ICommission|null} [commission] Validator commission
                 * @property {string|null} [min_self_delegation] Validator min_self_delegation
                 */

                /**
                 * Constructs a new Validator.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Validator.
                 * @implements IValidator
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IValidator=} [p] Properties to set
                 */
                function Validator(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Validator operator_address.
                 * @member {string} operator_address
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.operator_address = "";

                /**
                 * Validator consensus_pubkey.
                 * @member {google.protobuf.IAny|null|undefined} consensus_pubkey
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.consensus_pubkey = null;

                /**
                 * Validator jailed.
                 * @member {boolean} jailed
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.jailed = false;

                /**
                 * Validator status.
                 * @member {cosmos.staking.v1beta1.BondStatus} status
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.status = 0;

                /**
                 * Validator tokens.
                 * @member {string} tokens
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.tokens = "";

                /**
                 * Validator delegator_shares.
                 * @member {string} delegator_shares
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.delegator_shares = "";

                /**
                 * Validator description.
                 * @member {cosmos.staking.v1beta1.IDescription|null|undefined} description
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.description = null;

                /**
                 * Validator unbonding_height.
                 * @member {Long} unbonding_height
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.unbonding_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Validator unbonding_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} unbonding_time
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.unbonding_time = null;

                /**
                 * Validator commission.
                 * @member {cosmos.staking.v1beta1.ICommission|null|undefined} commission
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.commission = null;

                /**
                 * Validator min_self_delegation.
                 * @member {string} min_self_delegation
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @instance
                 */
                Validator.prototype.min_self_delegation = "";

                /**
                 * Encodes the specified Validator message. Does not implicitly {@link cosmos.staking.v1beta1.Validator.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @static
                 * @param {cosmos.staking.v1beta1.IValidator} m Validator message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Validator.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.operator_address != null && Object.hasOwnProperty.call(m, "operator_address"))
                        w.uint32(10).string(m.operator_address);
                    if (m.consensus_pubkey != null && Object.hasOwnProperty.call(m, "consensus_pubkey"))
                        $root.google.protobuf.Any.encode(m.consensus_pubkey, w.uint32(18).fork()).ldelim();
                    if (m.jailed != null && Object.hasOwnProperty.call(m, "jailed"))
                        w.uint32(24).bool(m.jailed);
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(32).int32(m.status);
                    if (m.tokens != null && Object.hasOwnProperty.call(m, "tokens"))
                        w.uint32(42).string(m.tokens);
                    if (m.delegator_shares != null && Object.hasOwnProperty.call(m, "delegator_shares"))
                        w.uint32(50).string(m.delegator_shares);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        $root.cosmos.staking.v1beta1.Description.encode(m.description, w.uint32(58).fork()).ldelim();
                    if (m.unbonding_height != null && Object.hasOwnProperty.call(m, "unbonding_height"))
                        w.uint32(64).int64(m.unbonding_height);
                    if (m.unbonding_time != null && Object.hasOwnProperty.call(m, "unbonding_time"))
                        $root.google.protobuf.Timestamp.encode(m.unbonding_time, w.uint32(74).fork()).ldelim();
                    if (m.commission != null && Object.hasOwnProperty.call(m, "commission"))
                        $root.cosmos.staking.v1beta1.Commission.encode(m.commission, w.uint32(82).fork()).ldelim();
                    if (m.min_self_delegation != null && Object.hasOwnProperty.call(m, "min_self_delegation"))
                        w.uint32(90).string(m.min_self_delegation);
                    return w;
                };

                /**
                 * Decodes a Validator message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Validator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Validator} Validator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Validator.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Validator();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.operator_address = r.string();
                                break;
                            case 2:
                                m.consensus_pubkey = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            case 3:
                                m.jailed = r.bool();
                                break;
                            case 4:
                                m.status = r.int32();
                                break;
                            case 5:
                                m.tokens = r.string();
                                break;
                            case 6:
                                m.delegator_shares = r.string();
                                break;
                            case 7:
                                m.description = $root.cosmos.staking.v1beta1.Description.decode(r, r.uint32());
                                break;
                            case 8:
                                m.unbonding_height = r.int64();
                                break;
                            case 9:
                                m.unbonding_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 10:
                                m.commission = $root.cosmos.staking.v1beta1.Commission.decode(r, r.uint32());
                                break;
                            case 11:
                                m.min_self_delegation = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Validator;
            })();

            /**
             * BondStatus enum.
             * @name cosmos.staking.v1beta1.BondStatus
             * @enum {number}
             * @property {number} BOND_STATUS_UNSPECIFIED=0 BOND_STATUS_UNSPECIFIED value
             * @property {number} BOND_STATUS_UNBONDED=1 BOND_STATUS_UNBONDED value
             * @property {number} BOND_STATUS_UNBONDING=2 BOND_STATUS_UNBONDING value
             * @property {number} BOND_STATUS_BONDED=3 BOND_STATUS_BONDED value
             */
            v1beta1.BondStatus = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BOND_STATUS_UNSPECIFIED"] = 0;
                values[valuesById[1] = "BOND_STATUS_UNBONDED"] = 1;
                values[valuesById[2] = "BOND_STATUS_UNBONDING"] = 2;
                values[valuesById[3] = "BOND_STATUS_BONDED"] = 3;
                return values;
            })();

            v1beta1.ValAddresses = (function () {

                /**
                 * Properties of a ValAddresses.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IValAddresses
                 * @property {Array.<string>|null} [addresses] ValAddresses addresses
                 */

                /**
                 * Constructs a new ValAddresses.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a ValAddresses.
                 * @implements IValAddresses
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IValAddresses=} [p] Properties to set
                 */
                function ValAddresses(p) {
                    this.addresses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValAddresses addresses.
                 * @member {Array.<string>} addresses
                 * @memberof cosmos.staking.v1beta1.ValAddresses
                 * @instance
                 */
                ValAddresses.prototype.addresses = $util.emptyArray;

                /**
                 * Encodes the specified ValAddresses message. Does not implicitly {@link cosmos.staking.v1beta1.ValAddresses.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.ValAddresses
                 * @static
                 * @param {cosmos.staking.v1beta1.IValAddresses} m ValAddresses message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValAddresses.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.addresses != null && m.addresses.length) {
                        for (var i = 0; i < m.addresses.length; ++i)
                            w.uint32(10).string(m.addresses[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a ValAddresses message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.ValAddresses
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.ValAddresses} ValAddresses
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValAddresses.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.ValAddresses();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.addresses && m.addresses.length))
                                    m.addresses = [];
                                m.addresses.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValAddresses;
            })();

            v1beta1.DVPair = (function () {

                /**
                 * Properties of a DVPair.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDVPair
                 * @property {string|null} [delegator_address] DVPair delegator_address
                 * @property {string|null} [validator_address] DVPair validator_address
                 */

                /**
                 * Constructs a new DVPair.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a DVPair.
                 * @implements IDVPair
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDVPair=} [p] Properties to set
                 */
                function DVPair(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DVPair delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.DVPair
                 * @instance
                 */
                DVPair.prototype.delegator_address = "";

                /**
                 * DVPair validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.DVPair
                 * @instance
                 */
                DVPair.prototype.validator_address = "";

                /**
                 * Encodes the specified DVPair message. Does not implicitly {@link cosmos.staking.v1beta1.DVPair.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.DVPair
                 * @static
                 * @param {cosmos.staking.v1beta1.IDVPair} m DVPair message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DVPair.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a DVPair message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.DVPair
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.DVPair} DVPair
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DVPair.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.DVPair();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DVPair;
            })();

            v1beta1.DVPairs = (function () {

                /**
                 * Properties of a DVPairs.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDVPairs
                 * @property {Array.<cosmos.staking.v1beta1.IDVPair>|null} [pairs] DVPairs pairs
                 */

                /**
                 * Constructs a new DVPairs.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a DVPairs.
                 * @implements IDVPairs
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDVPairs=} [p] Properties to set
                 */
                function DVPairs(p) {
                    this.pairs = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DVPairs pairs.
                 * @member {Array.<cosmos.staking.v1beta1.IDVPair>} pairs
                 * @memberof cosmos.staking.v1beta1.DVPairs
                 * @instance
                 */
                DVPairs.prototype.pairs = $util.emptyArray;

                /**
                 * Encodes the specified DVPairs message. Does not implicitly {@link cosmos.staking.v1beta1.DVPairs.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.DVPairs
                 * @static
                 * @param {cosmos.staking.v1beta1.IDVPairs} m DVPairs message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DVPairs.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.pairs != null && m.pairs.length) {
                        for (var i = 0; i < m.pairs.length; ++i)
                            $root.cosmos.staking.v1beta1.DVPair.encode(m.pairs[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a DVPairs message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.DVPairs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.DVPairs} DVPairs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DVPairs.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.DVPairs();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.pairs && m.pairs.length))
                                    m.pairs = [];
                                m.pairs.push($root.cosmos.staking.v1beta1.DVPair.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DVPairs;
            })();

            v1beta1.DVVTriplet = (function () {

                /**
                 * Properties of a DVVTriplet.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDVVTriplet
                 * @property {string|null} [delegator_address] DVVTriplet delegator_address
                 * @property {string|null} [validator_src_address] DVVTriplet validator_src_address
                 * @property {string|null} [validator_dst_address] DVVTriplet validator_dst_address
                 */

                /**
                 * Constructs a new DVVTriplet.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a DVVTriplet.
                 * @implements IDVVTriplet
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDVVTriplet=} [p] Properties to set
                 */
                function DVVTriplet(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DVVTriplet delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.DVVTriplet
                 * @instance
                 */
                DVVTriplet.prototype.delegator_address = "";

                /**
                 * DVVTriplet validator_src_address.
                 * @member {string} validator_src_address
                 * @memberof cosmos.staking.v1beta1.DVVTriplet
                 * @instance
                 */
                DVVTriplet.prototype.validator_src_address = "";

                /**
                 * DVVTriplet validator_dst_address.
                 * @member {string} validator_dst_address
                 * @memberof cosmos.staking.v1beta1.DVVTriplet
                 * @instance
                 */
                DVVTriplet.prototype.validator_dst_address = "";

                /**
                 * Encodes the specified DVVTriplet message. Does not implicitly {@link cosmos.staking.v1beta1.DVVTriplet.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.DVVTriplet
                 * @static
                 * @param {cosmos.staking.v1beta1.IDVVTriplet} m DVVTriplet message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DVVTriplet.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_src_address != null && Object.hasOwnProperty.call(m, "validator_src_address"))
                        w.uint32(18).string(m.validator_src_address);
                    if (m.validator_dst_address != null && Object.hasOwnProperty.call(m, "validator_dst_address"))
                        w.uint32(26).string(m.validator_dst_address);
                    return w;
                };

                /**
                 * Decodes a DVVTriplet message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.DVVTriplet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.DVVTriplet} DVVTriplet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DVVTriplet.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.DVVTriplet();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_src_address = r.string();
                                break;
                            case 3:
                                m.validator_dst_address = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DVVTriplet;
            })();

            v1beta1.DVVTriplets = (function () {

                /**
                 * Properties of a DVVTriplets.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDVVTriplets
                 * @property {Array.<cosmos.staking.v1beta1.IDVVTriplet>|null} [triplets] DVVTriplets triplets
                 */

                /**
                 * Constructs a new DVVTriplets.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a DVVTriplets.
                 * @implements IDVVTriplets
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDVVTriplets=} [p] Properties to set
                 */
                function DVVTriplets(p) {
                    this.triplets = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DVVTriplets triplets.
                 * @member {Array.<cosmos.staking.v1beta1.IDVVTriplet>} triplets
                 * @memberof cosmos.staking.v1beta1.DVVTriplets
                 * @instance
                 */
                DVVTriplets.prototype.triplets = $util.emptyArray;

                /**
                 * Encodes the specified DVVTriplets message. Does not implicitly {@link cosmos.staking.v1beta1.DVVTriplets.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.DVVTriplets
                 * @static
                 * @param {cosmos.staking.v1beta1.IDVVTriplets} m DVVTriplets message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DVVTriplets.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.triplets != null && m.triplets.length) {
                        for (var i = 0; i < m.triplets.length; ++i)
                            $root.cosmos.staking.v1beta1.DVVTriplet.encode(m.triplets[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a DVVTriplets message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.DVVTriplets
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.DVVTriplets} DVVTriplets
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DVVTriplets.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.DVVTriplets();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.triplets && m.triplets.length))
                                    m.triplets = [];
                                m.triplets.push($root.cosmos.staking.v1beta1.DVVTriplet.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DVVTriplets;
            })();

            v1beta1.Delegation = (function () {

                /**
                 * Properties of a Delegation.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDelegation
                 * @property {string|null} [delegator_address] Delegation delegator_address
                 * @property {string|null} [validator_address] Delegation validator_address
                 * @property {string|null} [shares] Delegation shares
                 */

                /**
                 * Constructs a new Delegation.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Delegation.
                 * @implements IDelegation
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDelegation=} [p] Properties to set
                 */
                function Delegation(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Delegation delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.Delegation
                 * @instance
                 */
                Delegation.prototype.delegator_address = "";

                /**
                 * Delegation validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.Delegation
                 * @instance
                 */
                Delegation.prototype.validator_address = "";

                /**
                 * Delegation shares.
                 * @member {string} shares
                 * @memberof cosmos.staking.v1beta1.Delegation
                 * @instance
                 */
                Delegation.prototype.shares = "";

                /**
                 * Encodes the specified Delegation message. Does not implicitly {@link cosmos.staking.v1beta1.Delegation.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Delegation
                 * @static
                 * @param {cosmos.staking.v1beta1.IDelegation} m Delegation message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Delegation.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    if (m.shares != null && Object.hasOwnProperty.call(m, "shares"))
                        w.uint32(26).string(m.shares);
                    return w;
                };

                /**
                 * Decodes a Delegation message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Delegation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Delegation} Delegation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Delegation.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Delegation();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            case 3:
                                m.shares = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Delegation;
            })();

            v1beta1.UnbondingDelegation = (function () {

                /**
                 * Properties of an UnbondingDelegation.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IUnbondingDelegation
                 * @property {string|null} [delegator_address] UnbondingDelegation delegator_address
                 * @property {string|null} [validator_address] UnbondingDelegation validator_address
                 * @property {Array.<cosmos.staking.v1beta1.IUnbondingDelegationEntry>|null} [entries] UnbondingDelegation entries
                 */

                /**
                 * Constructs a new UnbondingDelegation.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents an UnbondingDelegation.
                 * @implements IUnbondingDelegation
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IUnbondingDelegation=} [p] Properties to set
                 */
                function UnbondingDelegation(p) {
                    this.entries = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * UnbondingDelegation delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegation
                 * @instance
                 */
                UnbondingDelegation.prototype.delegator_address = "";

                /**
                 * UnbondingDelegation validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegation
                 * @instance
                 */
                UnbondingDelegation.prototype.validator_address = "";

                /**
                 * UnbondingDelegation entries.
                 * @member {Array.<cosmos.staking.v1beta1.IUnbondingDelegationEntry>} entries
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegation
                 * @instance
                 */
                UnbondingDelegation.prototype.entries = $util.emptyArray;

                /**
                 * Encodes the specified UnbondingDelegation message. Does not implicitly {@link cosmos.staking.v1beta1.UnbondingDelegation.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegation
                 * @static
                 * @param {cosmos.staking.v1beta1.IUnbondingDelegation} m UnbondingDelegation message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UnbondingDelegation.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    if (m.entries != null && m.entries.length) {
                        for (var i = 0; i < m.entries.length; ++i)
                            $root.cosmos.staking.v1beta1.UnbondingDelegationEntry.encode(m.entries[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes an UnbondingDelegation message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.UnbondingDelegation} UnbondingDelegation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UnbondingDelegation.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.UnbondingDelegation();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            case 3:
                                if (!(m.entries && m.entries.length))
                                    m.entries = [];
                                m.entries.push($root.cosmos.staking.v1beta1.UnbondingDelegationEntry.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return UnbondingDelegation;
            })();

            v1beta1.UnbondingDelegationEntry = (function () {

                /**
                 * Properties of an UnbondingDelegationEntry.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IUnbondingDelegationEntry
                 * @property {Long|null} [creation_height] UnbondingDelegationEntry creation_height
                 * @property {google.protobuf.ITimestamp|null} [completion_time] UnbondingDelegationEntry completion_time
                 * @property {string|null} [initial_balance] UnbondingDelegationEntry initial_balance
                 * @property {string|null} [balance] UnbondingDelegationEntry balance
                 */

                /**
                 * Constructs a new UnbondingDelegationEntry.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents an UnbondingDelegationEntry.
                 * @implements IUnbondingDelegationEntry
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IUnbondingDelegationEntry=} [p] Properties to set
                 */
                function UnbondingDelegationEntry(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * UnbondingDelegationEntry creation_height.
                 * @member {Long} creation_height
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegationEntry
                 * @instance
                 */
                UnbondingDelegationEntry.prototype.creation_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * UnbondingDelegationEntry completion_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} completion_time
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegationEntry
                 * @instance
                 */
                UnbondingDelegationEntry.prototype.completion_time = null;

                /**
                 * UnbondingDelegationEntry initial_balance.
                 * @member {string} initial_balance
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegationEntry
                 * @instance
                 */
                UnbondingDelegationEntry.prototype.initial_balance = "";

                /**
                 * UnbondingDelegationEntry balance.
                 * @member {string} balance
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegationEntry
                 * @instance
                 */
                UnbondingDelegationEntry.prototype.balance = "";

                /**
                 * Encodes the specified UnbondingDelegationEntry message. Does not implicitly {@link cosmos.staking.v1beta1.UnbondingDelegationEntry.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegationEntry
                 * @static
                 * @param {cosmos.staking.v1beta1.IUnbondingDelegationEntry} m UnbondingDelegationEntry message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UnbondingDelegationEntry.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.creation_height != null && Object.hasOwnProperty.call(m, "creation_height"))
                        w.uint32(8).int64(m.creation_height);
                    if (m.completion_time != null && Object.hasOwnProperty.call(m, "completion_time"))
                        $root.google.protobuf.Timestamp.encode(m.completion_time, w.uint32(18).fork()).ldelim();
                    if (m.initial_balance != null && Object.hasOwnProperty.call(m, "initial_balance"))
                        w.uint32(26).string(m.initial_balance);
                    if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                        w.uint32(34).string(m.balance);
                    return w;
                };

                /**
                 * Decodes an UnbondingDelegationEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.UnbondingDelegationEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.UnbondingDelegationEntry} UnbondingDelegationEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UnbondingDelegationEntry.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.UnbondingDelegationEntry();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.creation_height = r.int64();
                                break;
                            case 2:
                                m.completion_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 3:
                                m.initial_balance = r.string();
                                break;
                            case 4:
                                m.balance = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return UnbondingDelegationEntry;
            })();

            v1beta1.RedelegationEntry = (function () {

                /**
                 * Properties of a RedelegationEntry.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IRedelegationEntry
                 * @property {Long|null} [creation_height] RedelegationEntry creation_height
                 * @property {google.protobuf.ITimestamp|null} [completion_time] RedelegationEntry completion_time
                 * @property {string|null} [initial_balance] RedelegationEntry initial_balance
                 * @property {string|null} [shares_dst] RedelegationEntry shares_dst
                 */

                /**
                 * Constructs a new RedelegationEntry.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a RedelegationEntry.
                 * @implements IRedelegationEntry
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IRedelegationEntry=} [p] Properties to set
                 */
                function RedelegationEntry(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * RedelegationEntry creation_height.
                 * @member {Long} creation_height
                 * @memberof cosmos.staking.v1beta1.RedelegationEntry
                 * @instance
                 */
                RedelegationEntry.prototype.creation_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * RedelegationEntry completion_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} completion_time
                 * @memberof cosmos.staking.v1beta1.RedelegationEntry
                 * @instance
                 */
                RedelegationEntry.prototype.completion_time = null;

                /**
                 * RedelegationEntry initial_balance.
                 * @member {string} initial_balance
                 * @memberof cosmos.staking.v1beta1.RedelegationEntry
                 * @instance
                 */
                RedelegationEntry.prototype.initial_balance = "";

                /**
                 * RedelegationEntry shares_dst.
                 * @member {string} shares_dst
                 * @memberof cosmos.staking.v1beta1.RedelegationEntry
                 * @instance
                 */
                RedelegationEntry.prototype.shares_dst = "";

                /**
                 * Encodes the specified RedelegationEntry message. Does not implicitly {@link cosmos.staking.v1beta1.RedelegationEntry.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.RedelegationEntry
                 * @static
                 * @param {cosmos.staking.v1beta1.IRedelegationEntry} m RedelegationEntry message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RedelegationEntry.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.creation_height != null && Object.hasOwnProperty.call(m, "creation_height"))
                        w.uint32(8).int64(m.creation_height);
                    if (m.completion_time != null && Object.hasOwnProperty.call(m, "completion_time"))
                        $root.google.protobuf.Timestamp.encode(m.completion_time, w.uint32(18).fork()).ldelim();
                    if (m.initial_balance != null && Object.hasOwnProperty.call(m, "initial_balance"))
                        w.uint32(26).string(m.initial_balance);
                    if (m.shares_dst != null && Object.hasOwnProperty.call(m, "shares_dst"))
                        w.uint32(34).string(m.shares_dst);
                    return w;
                };

                /**
                 * Decodes a RedelegationEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.RedelegationEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.RedelegationEntry} RedelegationEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RedelegationEntry.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.RedelegationEntry();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.creation_height = r.int64();
                                break;
                            case 2:
                                m.completion_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 3:
                                m.initial_balance = r.string();
                                break;
                            case 4:
                                m.shares_dst = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return RedelegationEntry;
            })();

            v1beta1.Redelegation = (function () {

                /**
                 * Properties of a Redelegation.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IRedelegation
                 * @property {string|null} [delegator_address] Redelegation delegator_address
                 * @property {string|null} [validator_src_address] Redelegation validator_src_address
                 * @property {string|null} [validator_dst_address] Redelegation validator_dst_address
                 * @property {Array.<cosmos.staking.v1beta1.IRedelegationEntry>|null} [entries] Redelegation entries
                 */

                /**
                 * Constructs a new Redelegation.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Redelegation.
                 * @implements IRedelegation
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IRedelegation=} [p] Properties to set
                 */
                function Redelegation(p) {
                    this.entries = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Redelegation delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.Redelegation
                 * @instance
                 */
                Redelegation.prototype.delegator_address = "";

                /**
                 * Redelegation validator_src_address.
                 * @member {string} validator_src_address
                 * @memberof cosmos.staking.v1beta1.Redelegation
                 * @instance
                 */
                Redelegation.prototype.validator_src_address = "";

                /**
                 * Redelegation validator_dst_address.
                 * @member {string} validator_dst_address
                 * @memberof cosmos.staking.v1beta1.Redelegation
                 * @instance
                 */
                Redelegation.prototype.validator_dst_address = "";

                /**
                 * Redelegation entries.
                 * @member {Array.<cosmos.staking.v1beta1.IRedelegationEntry>} entries
                 * @memberof cosmos.staking.v1beta1.Redelegation
                 * @instance
                 */
                Redelegation.prototype.entries = $util.emptyArray;

                /**
                 * Encodes the specified Redelegation message. Does not implicitly {@link cosmos.staking.v1beta1.Redelegation.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Redelegation
                 * @static
                 * @param {cosmos.staking.v1beta1.IRedelegation} m Redelegation message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Redelegation.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_src_address != null && Object.hasOwnProperty.call(m, "validator_src_address"))
                        w.uint32(18).string(m.validator_src_address);
                    if (m.validator_dst_address != null && Object.hasOwnProperty.call(m, "validator_dst_address"))
                        w.uint32(26).string(m.validator_dst_address);
                    if (m.entries != null && m.entries.length) {
                        for (var i = 0; i < m.entries.length; ++i)
                            $root.cosmos.staking.v1beta1.RedelegationEntry.encode(m.entries[i], w.uint32(34).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Redelegation message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Redelegation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Redelegation} Redelegation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Redelegation.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Redelegation();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_src_address = r.string();
                                break;
                            case 3:
                                m.validator_dst_address = r.string();
                                break;
                            case 4:
                                if (!(m.entries && m.entries.length))
                                    m.entries = [];
                                m.entries.push($root.cosmos.staking.v1beta1.RedelegationEntry.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Redelegation;
            })();

            v1beta1.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IParams
                 * @property {google.protobuf.IDuration|null} [unbonding_time] Params unbonding_time
                 * @property {number|null} [max_validators] Params max_validators
                 * @property {number|null} [max_entries] Params max_entries
                 * @property {number|null} [historical_entries] Params historical_entries
                 * @property {string|null} [bond_denom] Params bond_denom
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params unbonding_time.
                 * @member {google.protobuf.IDuration|null|undefined} unbonding_time
                 * @memberof cosmos.staking.v1beta1.Params
                 * @instance
                 */
                Params.prototype.unbonding_time = null;

                /**
                 * Params max_validators.
                 * @member {number} max_validators
                 * @memberof cosmos.staking.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_validators = 0;

                /**
                 * Params max_entries.
                 * @member {number} max_entries
                 * @memberof cosmos.staking.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_entries = 0;

                /**
                 * Params historical_entries.
                 * @member {number} historical_entries
                 * @memberof cosmos.staking.v1beta1.Params
                 * @instance
                 */
                Params.prototype.historical_entries = 0;

                /**
                 * Params bond_denom.
                 * @member {string} bond_denom
                 * @memberof cosmos.staking.v1beta1.Params
                 * @instance
                 */
                Params.prototype.bond_denom = "";

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.staking.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Params
                 * @static
                 * @param {cosmos.staking.v1beta1.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.unbonding_time != null && Object.hasOwnProperty.call(m, "unbonding_time"))
                        $root.google.protobuf.Duration.encode(m.unbonding_time, w.uint32(10).fork()).ldelim();
                    if (m.max_validators != null && Object.hasOwnProperty.call(m, "max_validators"))
                        w.uint32(16).uint32(m.max_validators);
                    if (m.max_entries != null && Object.hasOwnProperty.call(m, "max_entries"))
                        w.uint32(24).uint32(m.max_entries);
                    if (m.historical_entries != null && Object.hasOwnProperty.call(m, "historical_entries"))
                        w.uint32(32).uint32(m.historical_entries);
                    if (m.bond_denom != null && Object.hasOwnProperty.call(m, "bond_denom"))
                        w.uint32(42).string(m.bond_denom);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.unbonding_time = $root.google.protobuf.Duration.decode(r, r.uint32());
                                break;
                            case 2:
                                m.max_validators = r.uint32();
                                break;
                            case 3:
                                m.max_entries = r.uint32();
                                break;
                            case 4:
                                m.historical_entries = r.uint32();
                                break;
                            case 5:
                                m.bond_denom = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            v1beta1.DelegationResponse = (function () {

                /**
                 * Properties of a DelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IDelegationResponse
                 * @property {cosmos.staking.v1beta1.IDelegation|null} [delegation] DelegationResponse delegation
                 * @property {cosmos.base.v1beta1.ICoin|null} [balance] DelegationResponse balance
                 */

                /**
                 * Constructs a new DelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a DelegationResponse.
                 * @implements IDelegationResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IDelegationResponse=} [p] Properties to set
                 */
                function DelegationResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DelegationResponse delegation.
                 * @member {cosmos.staking.v1beta1.IDelegation|null|undefined} delegation
                 * @memberof cosmos.staking.v1beta1.DelegationResponse
                 * @instance
                 */
                DelegationResponse.prototype.delegation = null;

                /**
                 * DelegationResponse balance.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} balance
                 * @memberof cosmos.staking.v1beta1.DelegationResponse
                 * @instance
                 */
                DelegationResponse.prototype.balance = null;

                /**
                 * Encodes the specified DelegationResponse message. Does not implicitly {@link cosmos.staking.v1beta1.DelegationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.DelegationResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IDelegationResponse} m DelegationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DelegationResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegation != null && Object.hasOwnProperty.call(m, "delegation"))
                        $root.cosmos.staking.v1beta1.Delegation.encode(m.delegation, w.uint32(10).fork()).ldelim();
                    if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.balance, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a DelegationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.DelegationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.DelegationResponse} DelegationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DelegationResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.DelegationResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegation = $root.cosmos.staking.v1beta1.Delegation.decode(r, r.uint32());
                                break;
                            case 2:
                                m.balance = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DelegationResponse;
            })();

            v1beta1.RedelegationEntryResponse = (function () {

                /**
                 * Properties of a RedelegationEntryResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IRedelegationEntryResponse
                 * @property {cosmos.staking.v1beta1.IRedelegationEntry|null} [redelegation_entry] RedelegationEntryResponse redelegation_entry
                 * @property {string|null} [balance] RedelegationEntryResponse balance
                 */

                /**
                 * Constructs a new RedelegationEntryResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a RedelegationEntryResponse.
                 * @implements IRedelegationEntryResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IRedelegationEntryResponse=} [p] Properties to set
                 */
                function RedelegationEntryResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * RedelegationEntryResponse redelegation_entry.
                 * @member {cosmos.staking.v1beta1.IRedelegationEntry|null|undefined} redelegation_entry
                 * @memberof cosmos.staking.v1beta1.RedelegationEntryResponse
                 * @instance
                 */
                RedelegationEntryResponse.prototype.redelegation_entry = null;

                /**
                 * RedelegationEntryResponse balance.
                 * @member {string} balance
                 * @memberof cosmos.staking.v1beta1.RedelegationEntryResponse
                 * @instance
                 */
                RedelegationEntryResponse.prototype.balance = "";

                /**
                 * Encodes the specified RedelegationEntryResponse message. Does not implicitly {@link cosmos.staking.v1beta1.RedelegationEntryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.RedelegationEntryResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IRedelegationEntryResponse} m RedelegationEntryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RedelegationEntryResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.redelegation_entry != null && Object.hasOwnProperty.call(m, "redelegation_entry"))
                        $root.cosmos.staking.v1beta1.RedelegationEntry.encode(m.redelegation_entry, w.uint32(10).fork()).ldelim();
                    if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                        w.uint32(34).string(m.balance);
                    return w;
                };

                /**
                 * Decodes a RedelegationEntryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.RedelegationEntryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.RedelegationEntryResponse} RedelegationEntryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RedelegationEntryResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.RedelegationEntryResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.redelegation_entry = $root.cosmos.staking.v1beta1.RedelegationEntry.decode(r, r.uint32());
                                break;
                            case 4:
                                m.balance = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return RedelegationEntryResponse;
            })();

            v1beta1.RedelegationResponse = (function () {

                /**
                 * Properties of a RedelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IRedelegationResponse
                 * @property {cosmos.staking.v1beta1.IRedelegation|null} [redelegation] RedelegationResponse redelegation
                 * @property {Array.<cosmos.staking.v1beta1.IRedelegationEntryResponse>|null} [entries] RedelegationResponse entries
                 */

                /**
                 * Constructs a new RedelegationResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a RedelegationResponse.
                 * @implements IRedelegationResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IRedelegationResponse=} [p] Properties to set
                 */
                function RedelegationResponse(p) {
                    this.entries = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * RedelegationResponse redelegation.
                 * @member {cosmos.staking.v1beta1.IRedelegation|null|undefined} redelegation
                 * @memberof cosmos.staking.v1beta1.RedelegationResponse
                 * @instance
                 */
                RedelegationResponse.prototype.redelegation = null;

                /**
                 * RedelegationResponse entries.
                 * @member {Array.<cosmos.staking.v1beta1.IRedelegationEntryResponse>} entries
                 * @memberof cosmos.staking.v1beta1.RedelegationResponse
                 * @instance
                 */
                RedelegationResponse.prototype.entries = $util.emptyArray;

                /**
                 * Encodes the specified RedelegationResponse message. Does not implicitly {@link cosmos.staking.v1beta1.RedelegationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.RedelegationResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IRedelegationResponse} m RedelegationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RedelegationResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.redelegation != null && Object.hasOwnProperty.call(m, "redelegation"))
                        $root.cosmos.staking.v1beta1.Redelegation.encode(m.redelegation, w.uint32(10).fork()).ldelim();
                    if (m.entries != null && m.entries.length) {
                        for (var i = 0; i < m.entries.length; ++i)
                            $root.cosmos.staking.v1beta1.RedelegationEntryResponse.encode(m.entries[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a RedelegationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.RedelegationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.RedelegationResponse} RedelegationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RedelegationResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.RedelegationResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.redelegation = $root.cosmos.staking.v1beta1.Redelegation.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.entries && m.entries.length))
                                    m.entries = [];
                                m.entries.push($root.cosmos.staking.v1beta1.RedelegationEntryResponse.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return RedelegationResponse;
            })();

            v1beta1.Pool = (function () {

                /**
                 * Properties of a Pool.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IPool
                 * @property {string|null} [not_bonded_tokens] Pool not_bonded_tokens
                 * @property {string|null} [bonded_tokens] Pool bonded_tokens
                 */

                /**
                 * Constructs a new Pool.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a Pool.
                 * @implements IPool
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IPool=} [p] Properties to set
                 */
                function Pool(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Pool not_bonded_tokens.
                 * @member {string} not_bonded_tokens
                 * @memberof cosmos.staking.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.not_bonded_tokens = "";

                /**
                 * Pool bonded_tokens.
                 * @member {string} bonded_tokens
                 * @memberof cosmos.staking.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.bonded_tokens = "";

                /**
                 * Encodes the specified Pool message. Does not implicitly {@link cosmos.staking.v1beta1.Pool.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.Pool
                 * @static
                 * @param {cosmos.staking.v1beta1.IPool} m Pool message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Pool.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.not_bonded_tokens != null && Object.hasOwnProperty.call(m, "not_bonded_tokens"))
                        w.uint32(10).string(m.not_bonded_tokens);
                    if (m.bonded_tokens != null && Object.hasOwnProperty.call(m, "bonded_tokens"))
                        w.uint32(18).string(m.bonded_tokens);
                    return w;
                };

                /**
                 * Decodes a Pool message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.Pool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.Pool} Pool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Pool.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.Pool();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.not_bonded_tokens = r.string();
                                break;
                            case 2:
                                m.bonded_tokens = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Pool;
            })();

            v1beta1.MsgCreateValidator = (function () {

                /**
                 * Properties of a MsgCreateValidator.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgCreateValidator
                 * @property {cosmos.staking.v1beta1.IDescription|null} [description] MsgCreateValidator description
                 * @property {cosmos.staking.v1beta1.ICommissionRates|null} [commission] MsgCreateValidator commission
                 * @property {string|null} [min_self_delegation] MsgCreateValidator min_self_delegation
                 * @property {string|null} [delegator_address] MsgCreateValidator delegator_address
                 * @property {string|null} [validator_address] MsgCreateValidator validator_address
                 * @property {google.protobuf.IAny|null} [pubkey] MsgCreateValidator pubkey
                 * @property {cosmos.base.v1beta1.ICoin|null} [value] MsgCreateValidator value
                 */

                /**
                 * Constructs a new MsgCreateValidator.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgCreateValidator.
                 * @implements IMsgCreateValidator
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgCreateValidator=} [p] Properties to set
                 */
                function MsgCreateValidator(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgCreateValidator description.
                 * @member {cosmos.staking.v1beta1.IDescription|null|undefined} description
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.description = null;

                /**
                 * MsgCreateValidator commission.
                 * @member {cosmos.staking.v1beta1.ICommissionRates|null|undefined} commission
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.commission = null;

                /**
                 * MsgCreateValidator min_self_delegation.
                 * @member {string} min_self_delegation
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.min_self_delegation = "";

                /**
                 * MsgCreateValidator delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.delegator_address = "";

                /**
                 * MsgCreateValidator validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.validator_address = "";

                /**
                 * MsgCreateValidator pubkey.
                 * @member {google.protobuf.IAny|null|undefined} pubkey
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.pubkey = null;

                /**
                 * MsgCreateValidator value.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} value
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @instance
                 */
                MsgCreateValidator.prototype.value = null;

                /**
                 * Encodes the specified MsgCreateValidator message. Does not implicitly {@link cosmos.staking.v1beta1.MsgCreateValidator.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgCreateValidator} m MsgCreateValidator message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateValidator.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        $root.cosmos.staking.v1beta1.Description.encode(m.description, w.uint32(10).fork()).ldelim();
                    if (m.commission != null && Object.hasOwnProperty.call(m, "commission"))
                        $root.cosmos.staking.v1beta1.CommissionRates.encode(m.commission, w.uint32(18).fork()).ldelim();
                    if (m.min_self_delegation != null && Object.hasOwnProperty.call(m, "min_self_delegation"))
                        w.uint32(26).string(m.min_self_delegation);
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(34).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(42).string(m.validator_address);
                    if (m.pubkey != null && Object.hasOwnProperty.call(m, "pubkey"))
                        $root.google.protobuf.Any.encode(m.pubkey, w.uint32(50).fork()).ldelim();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.value, w.uint32(58).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgCreateValidator message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgCreateValidator} MsgCreateValidator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateValidator.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgCreateValidator();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.description = $root.cosmos.staking.v1beta1.Description.decode(r, r.uint32());
                                break;
                            case 2:
                                m.commission = $root.cosmos.staking.v1beta1.CommissionRates.decode(r, r.uint32());
                                break;
                            case 3:
                                m.min_self_delegation = r.string();
                                break;
                            case 4:
                                m.delegator_address = r.string();
                                break;
                            case 5:
                                m.validator_address = r.string();
                                break;
                            case 6:
                                m.pubkey = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            case 7:
                                m.value = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateValidator;
            })();

            v1beta1.MsgCreateValidatorResponse = (function () {

                /**
                 * Properties of a MsgCreateValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgCreateValidatorResponse
                 */

                /**
                 * Constructs a new MsgCreateValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgCreateValidatorResponse.
                 * @implements IMsgCreateValidatorResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgCreateValidatorResponse=} [p] Properties to set
                 */
                function MsgCreateValidatorResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgCreateValidatorResponse message. Does not implicitly {@link cosmos.staking.v1beta1.MsgCreateValidatorResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidatorResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgCreateValidatorResponse} m MsgCreateValidatorResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateValidatorResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgCreateValidatorResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgCreateValidatorResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgCreateValidatorResponse} MsgCreateValidatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateValidatorResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgCreateValidatorResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateValidatorResponse;
            })();

            v1beta1.MsgEditValidator = (function () {

                /**
                 * Properties of a MsgEditValidator.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgEditValidator
                 * @property {cosmos.staking.v1beta1.IDescription|null} [description] MsgEditValidator description
                 * @property {string|null} [validator_address] MsgEditValidator validator_address
                 * @property {string|null} [commission_rate] MsgEditValidator commission_rate
                 * @property {string|null} [min_self_delegation] MsgEditValidator min_self_delegation
                 */

                /**
                 * Constructs a new MsgEditValidator.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgEditValidator.
                 * @implements IMsgEditValidator
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgEditValidator=} [p] Properties to set
                 */
                function MsgEditValidator(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgEditValidator description.
                 * @member {cosmos.staking.v1beta1.IDescription|null|undefined} description
                 * @memberof cosmos.staking.v1beta1.MsgEditValidator
                 * @instance
                 */
                MsgEditValidator.prototype.description = null;

                /**
                 * MsgEditValidator validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.MsgEditValidator
                 * @instance
                 */
                MsgEditValidator.prototype.validator_address = "";

                /**
                 * MsgEditValidator commission_rate.
                 * @member {string} commission_rate
                 * @memberof cosmos.staking.v1beta1.MsgEditValidator
                 * @instance
                 */
                MsgEditValidator.prototype.commission_rate = "";

                /**
                 * MsgEditValidator min_self_delegation.
                 * @member {string} min_self_delegation
                 * @memberof cosmos.staking.v1beta1.MsgEditValidator
                 * @instance
                 */
                MsgEditValidator.prototype.min_self_delegation = "";

                /**
                 * Encodes the specified MsgEditValidator message. Does not implicitly {@link cosmos.staking.v1beta1.MsgEditValidator.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgEditValidator
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgEditValidator} m MsgEditValidator message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditValidator.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        $root.cosmos.staking.v1beta1.Description.encode(m.description, w.uint32(10).fork()).ldelim();
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    if (m.commission_rate != null && Object.hasOwnProperty.call(m, "commission_rate"))
                        w.uint32(26).string(m.commission_rate);
                    if (m.min_self_delegation != null && Object.hasOwnProperty.call(m, "min_self_delegation"))
                        w.uint32(34).string(m.min_self_delegation);
                    return w;
                };

                /**
                 * Decodes a MsgEditValidator message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgEditValidator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgEditValidator} MsgEditValidator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditValidator.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgEditValidator();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.description = $root.cosmos.staking.v1beta1.Description.decode(r, r.uint32());
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            case 3:
                                m.commission_rate = r.string();
                                break;
                            case 4:
                                m.min_self_delegation = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgEditValidator;
            })();

            v1beta1.MsgEditValidatorResponse = (function () {

                /**
                 * Properties of a MsgEditValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgEditValidatorResponse
                 */

                /**
                 * Constructs a new MsgEditValidatorResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgEditValidatorResponse.
                 * @implements IMsgEditValidatorResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgEditValidatorResponse=} [p] Properties to set
                 */
                function MsgEditValidatorResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgEditValidatorResponse message. Does not implicitly {@link cosmos.staking.v1beta1.MsgEditValidatorResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgEditValidatorResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgEditValidatorResponse} m MsgEditValidatorResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditValidatorResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgEditValidatorResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgEditValidatorResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgEditValidatorResponse} MsgEditValidatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditValidatorResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgEditValidatorResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgEditValidatorResponse;
            })();

            v1beta1.MsgDelegate = (function () {

                /**
                 * Properties of a MsgDelegate.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgDelegate
                 * @property {string|null} [delegator_address] MsgDelegate delegator_address
                 * @property {string|null} [validator_address] MsgDelegate validator_address
                 * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgDelegate amount
                 */

                /**
                 * Constructs a new MsgDelegate.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgDelegate.
                 * @implements IMsgDelegate
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgDelegate=} [p] Properties to set
                 */
                function MsgDelegate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgDelegate delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.MsgDelegate
                 * @instance
                 */
                MsgDelegate.prototype.delegator_address = "";

                /**
                 * MsgDelegate validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.MsgDelegate
                 * @instance
                 */
                MsgDelegate.prototype.validator_address = "";

                /**
                 * MsgDelegate amount.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                 * @memberof cosmos.staking.v1beta1.MsgDelegate
                 * @instance
                 */
                MsgDelegate.prototype.amount = null;

                /**
                 * Encodes the specified MsgDelegate message. Does not implicitly {@link cosmos.staking.v1beta1.MsgDelegate.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgDelegate
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgDelegate} m MsgDelegate message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDelegate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.amount, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgDelegate message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgDelegate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgDelegate} MsgDelegate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDelegate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgDelegate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            case 3:
                                m.amount = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgDelegate;
            })();

            v1beta1.MsgDelegateResponse = (function () {

                /**
                 * Properties of a MsgDelegateResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgDelegateResponse
                 */

                /**
                 * Constructs a new MsgDelegateResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgDelegateResponse.
                 * @implements IMsgDelegateResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgDelegateResponse=} [p] Properties to set
                 */
                function MsgDelegateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgDelegateResponse message. Does not implicitly {@link cosmos.staking.v1beta1.MsgDelegateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgDelegateResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgDelegateResponse} m MsgDelegateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDelegateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgDelegateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgDelegateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgDelegateResponse} MsgDelegateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDelegateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgDelegateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgDelegateResponse;
            })();

            v1beta1.MsgBeginRedelegate = (function () {

                /**
                 * Properties of a MsgBeginRedelegate.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgBeginRedelegate
                 * @property {string|null} [delegator_address] MsgBeginRedelegate delegator_address
                 * @property {string|null} [validator_src_address] MsgBeginRedelegate validator_src_address
                 * @property {string|null} [validator_dst_address] MsgBeginRedelegate validator_dst_address
                 * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgBeginRedelegate amount
                 */

                /**
                 * Constructs a new MsgBeginRedelegate.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgBeginRedelegate.
                 * @implements IMsgBeginRedelegate
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgBeginRedelegate=} [p] Properties to set
                 */
                function MsgBeginRedelegate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgBeginRedelegate delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegate
                 * @instance
                 */
                MsgBeginRedelegate.prototype.delegator_address = "";

                /**
                 * MsgBeginRedelegate validator_src_address.
                 * @member {string} validator_src_address
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegate
                 * @instance
                 */
                MsgBeginRedelegate.prototype.validator_src_address = "";

                /**
                 * MsgBeginRedelegate validator_dst_address.
                 * @member {string} validator_dst_address
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegate
                 * @instance
                 */
                MsgBeginRedelegate.prototype.validator_dst_address = "";

                /**
                 * MsgBeginRedelegate amount.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegate
                 * @instance
                 */
                MsgBeginRedelegate.prototype.amount = null;

                /**
                 * Encodes the specified MsgBeginRedelegate message. Does not implicitly {@link cosmos.staking.v1beta1.MsgBeginRedelegate.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegate
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgBeginRedelegate} m MsgBeginRedelegate message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgBeginRedelegate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_src_address != null && Object.hasOwnProperty.call(m, "validator_src_address"))
                        w.uint32(18).string(m.validator_src_address);
                    if (m.validator_dst_address != null && Object.hasOwnProperty.call(m, "validator_dst_address"))
                        w.uint32(26).string(m.validator_dst_address);
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.amount, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgBeginRedelegate message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgBeginRedelegate} MsgBeginRedelegate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgBeginRedelegate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgBeginRedelegate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_src_address = r.string();
                                break;
                            case 3:
                                m.validator_dst_address = r.string();
                                break;
                            case 4:
                                m.amount = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgBeginRedelegate;
            })();

            v1beta1.MsgBeginRedelegateResponse = (function () {

                /**
                 * Properties of a MsgBeginRedelegateResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgBeginRedelegateResponse
                 * @property {google.protobuf.ITimestamp|null} [completion_time] MsgBeginRedelegateResponse completion_time
                 */

                /**
                 * Constructs a new MsgBeginRedelegateResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgBeginRedelegateResponse.
                 * @implements IMsgBeginRedelegateResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgBeginRedelegateResponse=} [p] Properties to set
                 */
                function MsgBeginRedelegateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgBeginRedelegateResponse completion_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} completion_time
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegateResponse
                 * @instance
                 */
                MsgBeginRedelegateResponse.prototype.completion_time = null;

                /**
                 * Encodes the specified MsgBeginRedelegateResponse message. Does not implicitly {@link cosmos.staking.v1beta1.MsgBeginRedelegateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegateResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgBeginRedelegateResponse} m MsgBeginRedelegateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgBeginRedelegateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.completion_time != null && Object.hasOwnProperty.call(m, "completion_time"))
                        $root.google.protobuf.Timestamp.encode(m.completion_time, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgBeginRedelegateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgBeginRedelegateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgBeginRedelegateResponse} MsgBeginRedelegateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgBeginRedelegateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgBeginRedelegateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.completion_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgBeginRedelegateResponse;
            })();

            v1beta1.MsgUndelegate = (function () {

                /**
                 * Properties of a MsgUndelegate.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgUndelegate
                 * @property {string|null} [delegator_address] MsgUndelegate delegator_address
                 * @property {string|null} [validator_address] MsgUndelegate validator_address
                 * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgUndelegate amount
                 */

                /**
                 * Constructs a new MsgUndelegate.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgUndelegate.
                 * @implements IMsgUndelegate
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgUndelegate=} [p] Properties to set
                 */
                function MsgUndelegate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgUndelegate delegator_address.
                 * @member {string} delegator_address
                 * @memberof cosmos.staking.v1beta1.MsgUndelegate
                 * @instance
                 */
                MsgUndelegate.prototype.delegator_address = "";

                /**
                 * MsgUndelegate validator_address.
                 * @member {string} validator_address
                 * @memberof cosmos.staking.v1beta1.MsgUndelegate
                 * @instance
                 */
                MsgUndelegate.prototype.validator_address = "";

                /**
                 * MsgUndelegate amount.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                 * @memberof cosmos.staking.v1beta1.MsgUndelegate
                 * @instance
                 */
                MsgUndelegate.prototype.amount = null;

                /**
                 * Encodes the specified MsgUndelegate message. Does not implicitly {@link cosmos.staking.v1beta1.MsgUndelegate.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgUndelegate
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgUndelegate} m MsgUndelegate message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUndelegate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.delegator_address != null && Object.hasOwnProperty.call(m, "delegator_address"))
                        w.uint32(10).string(m.delegator_address);
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(18).string(m.validator_address);
                    if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                        $root.cosmos.base.v1beta1.Coin.encode(m.amount, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgUndelegate message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgUndelegate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgUndelegate} MsgUndelegate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUndelegate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgUndelegate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.delegator_address = r.string();
                                break;
                            case 2:
                                m.validator_address = r.string();
                                break;
                            case 3:
                                m.amount = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgUndelegate;
            })();

            v1beta1.MsgUndelegateResponse = (function () {

                /**
                 * Properties of a MsgUndelegateResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @interface IMsgUndelegateResponse
                 * @property {google.protobuf.ITimestamp|null} [completion_time] MsgUndelegateResponse completion_time
                 */

                /**
                 * Constructs a new MsgUndelegateResponse.
                 * @memberof cosmos.staking.v1beta1
                 * @classdesc Represents a MsgUndelegateResponse.
                 * @implements IMsgUndelegateResponse
                 * @constructor
                 * @param {cosmos.staking.v1beta1.IMsgUndelegateResponse=} [p] Properties to set
                 */
                function MsgUndelegateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgUndelegateResponse completion_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} completion_time
                 * @memberof cosmos.staking.v1beta1.MsgUndelegateResponse
                 * @instance
                 */
                MsgUndelegateResponse.prototype.completion_time = null;

                /**
                 * Encodes the specified MsgUndelegateResponse message. Does not implicitly {@link cosmos.staking.v1beta1.MsgUndelegateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.staking.v1beta1.MsgUndelegateResponse
                 * @static
                 * @param {cosmos.staking.v1beta1.IMsgUndelegateResponse} m MsgUndelegateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUndelegateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.completion_time != null && Object.hasOwnProperty.call(m, "completion_time"))
                        $root.google.protobuf.Timestamp.encode(m.completion_time, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a MsgUndelegateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.staking.v1beta1.MsgUndelegateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.staking.v1beta1.MsgUndelegateResponse} MsgUndelegateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUndelegateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.staking.v1beta1.MsgUndelegateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.completion_time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgUndelegateResponse;
            })();

            return v1beta1;
        })();

        return staking;
    })();

    cosmos.tx = (function () {

        /**
         * Namespace tx.
         * @memberof cosmos
         * @namespace
         */
        const tx = {};

        tx.signing = (function () {

            /**
             * Namespace signing.
             * @memberof cosmos.tx
             * @namespace
             */
            const signing = {};

            signing.v1beta1 = (function () {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.tx.signing
                 * @namespace
                 */
                const v1beta1 = {};

                /**
                 * SignMode enum.
                 * @name cosmos.tx.signing.v1beta1.SignMode
                 * @enum {number}
                 * @property {number} SIGN_MODE_UNSPECIFIED=0 SIGN_MODE_UNSPECIFIED value
                 * @property {number} SIGN_MODE_DIRECT=1 SIGN_MODE_DIRECT value
                 * @property {number} SIGN_MODE_TEXTUAL=2 SIGN_MODE_TEXTUAL value
                 * @property {number} SIGN_MODE_LEGACY_AMINO_JSON=127 SIGN_MODE_LEGACY_AMINO_JSON value
                 */
                v1beta1.SignMode = (function () {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SIGN_MODE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "SIGN_MODE_DIRECT"] = 1;
                    values[valuesById[2] = "SIGN_MODE_TEXTUAL"] = 2;
                    values[valuesById[127] = "SIGN_MODE_LEGACY_AMINO_JSON"] = 127;
                    return values;
                })();

                v1beta1.SignatureDescriptors = (function () {

                    /**
                     * Properties of a SignatureDescriptors.
                     * @memberof cosmos.tx.signing.v1beta1
                     * @interface ISignatureDescriptors
                     * @property {Array.<cosmos.tx.signing.v1beta1.ISignatureDescriptor>|null} [signatures] SignatureDescriptors signatures
                     */

                    /**
                     * Constructs a new SignatureDescriptors.
                     * @memberof cosmos.tx.signing.v1beta1
                     * @classdesc Represents a SignatureDescriptors.
                     * @implements ISignatureDescriptors
                     * @constructor
                     * @param {cosmos.tx.signing.v1beta1.ISignatureDescriptors=} [p] Properties to set
                     */
                    function SignatureDescriptors(p) {
                        this.signatures = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SignatureDescriptors signatures.
                     * @member {Array.<cosmos.tx.signing.v1beta1.ISignatureDescriptor>} signatures
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptors
                     * @instance
                     */
                    SignatureDescriptors.prototype.signatures = $util.emptyArray;

                    /**
                     * Encodes the specified SignatureDescriptors message. Does not implicitly {@link cosmos.tx.signing.v1beta1.SignatureDescriptors.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptors
                     * @static
                     * @param {cosmos.tx.signing.v1beta1.ISignatureDescriptors} m SignatureDescriptors message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureDescriptors.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.signatures != null && m.signatures.length) {
                            for (var i = 0; i < m.signatures.length; ++i)
                                $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.encode(m.signatures[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a SignatureDescriptors message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptors
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.tx.signing.v1beta1.SignatureDescriptors} SignatureDescriptors
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureDescriptors.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.signing.v1beta1.SignatureDescriptors();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.signatures && m.signatures.length))
                                        m.signatures = [];
                                    m.signatures.push($root.cosmos.tx.signing.v1beta1.SignatureDescriptor.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SignatureDescriptors;
                })();

                v1beta1.SignatureDescriptor = (function () {

                    /**
                     * Properties of a SignatureDescriptor.
                     * @memberof cosmos.tx.signing.v1beta1
                     * @interface ISignatureDescriptor
                     * @property {google.protobuf.IAny|null} [public_key] SignatureDescriptor public_key
                     * @property {cosmos.tx.signing.v1beta1.SignatureDescriptor.IData|null} [data] SignatureDescriptor data
                     * @property {Long|null} [sequence] SignatureDescriptor sequence
                     */

                    /**
                     * Constructs a new SignatureDescriptor.
                     * @memberof cosmos.tx.signing.v1beta1
                     * @classdesc Represents a SignatureDescriptor.
                     * @implements ISignatureDescriptor
                     * @constructor
                     * @param {cosmos.tx.signing.v1beta1.ISignatureDescriptor=} [p] Properties to set
                     */
                    function SignatureDescriptor(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SignatureDescriptor public_key.
                     * @member {google.protobuf.IAny|null|undefined} public_key
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                     * @instance
                     */
                    SignatureDescriptor.prototype.public_key = null;

                    /**
                     * SignatureDescriptor data.
                     * @member {cosmos.tx.signing.v1beta1.SignatureDescriptor.IData|null|undefined} data
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                     * @instance
                     */
                    SignatureDescriptor.prototype.data = null;

                    /**
                     * SignatureDescriptor sequence.
                     * @member {Long} sequence
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                     * @instance
                     */
                    SignatureDescriptor.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified SignatureDescriptor message. Does not implicitly {@link cosmos.tx.signing.v1beta1.SignatureDescriptor.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                     * @static
                     * @param {cosmos.tx.signing.v1beta1.ISignatureDescriptor} m SignatureDescriptor message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureDescriptor.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.public_key != null && Object.hasOwnProperty.call(m, "public_key"))
                            $root.google.protobuf.Any.encode(m.public_key, w.uint32(10).fork()).ldelim();
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.encode(m.data, w.uint32(18).fork()).ldelim();
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(24).uint64(m.sequence);
                        return w;
                    };

                    /**
                     * Decodes a SignatureDescriptor message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.tx.signing.v1beta1.SignatureDescriptor} SignatureDescriptor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureDescriptor.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.signing.v1beta1.SignatureDescriptor();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.public_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.data = $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    SignatureDescriptor.Data = (function () {

                        /**
                         * Properties of a Data.
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                         * @interface IData
                         * @property {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.ISingle|null} [single] Data single
                         * @property {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.IMulti|null} [multi] Data multi
                         */

                        /**
                         * Constructs a new Data.
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor
                         * @classdesc Represents a Data.
                         * @implements IData
                         * @constructor
                         * @param {cosmos.tx.signing.v1beta1.SignatureDescriptor.IData=} [p] Properties to set
                         */
                        function Data(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }

                        /**
                         * Data single.
                         * @member {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.ISingle|null|undefined} single
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                         * @instance
                         */
                        Data.prototype.single = null;

                        /**
                         * Data multi.
                         * @member {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.IMulti|null|undefined} multi
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                         * @instance
                         */
                        Data.prototype.multi = null;

                        // OneOf field names bound to virtual getters and setters
                        let $oneOfFields;

                        /**
                         * Data sum.
                         * @member {"single"|"multi"|undefined} sum
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                         * @instance
                         */
                        Object.defineProperty(Data.prototype, "sum", {
                            get: $util.oneOfGetter($oneOfFields = ["single", "multi"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });

                        /**
                         * Encodes the specified Data message. Does not implicitly {@link cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.verify|verify} messages.
                         * @function encode
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                         * @static
                         * @param {cosmos.tx.signing.v1beta1.SignatureDescriptor.IData} m Data message or plain object to encode
                         * @param {$protobuf.Writer} [w] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Data.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.single != null && Object.hasOwnProperty.call(m, "single"))
                                $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.encode(m.single, w.uint32(10).fork()).ldelim();
                            if (m.multi != null && Object.hasOwnProperty.call(m, "multi"))
                                $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.encode(m.multi, w.uint32(18).fork()).ldelim();
                            return w;
                        };

                        /**
                         * Decodes a Data message from the specified reader or buffer.
                         * @function decode
                         * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                         * @param {number} [l] Message length if known beforehand
                         * @returns {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data} Data
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Data.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                    case 1:
                                        m.single = $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.decode(r, r.uint32());
                                        break;
                                    case 2:
                                        m.multi = $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.decode(r, r.uint32());
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                }
                            }
                            return m;
                        };

                        Data.Single = (function () {

                            /**
                             * Properties of a Single.
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                             * @interface ISingle
                             * @property {cosmos.tx.signing.v1beta1.SignMode|null} [mode] Single mode
                             * @property {Uint8Array|null} [signature] Single signature
                             */

                            /**
                             * Constructs a new Single.
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                             * @classdesc Represents a Single.
                             * @implements ISingle
                             * @constructor
                             * @param {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.ISingle=} [p] Properties to set
                             */
                            function Single(p) {
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }

                            /**
                             * Single mode.
                             * @member {cosmos.tx.signing.v1beta1.SignMode} mode
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
                             * @instance
                             */
                            Single.prototype.mode = 0;

                            /**
                             * Single signature.
                             * @member {Uint8Array} signature
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
                             * @instance
                             */
                            Single.prototype.signature = $util.newBuffer([]);

                            /**
                             * Encodes the specified Single message. Does not implicitly {@link cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.verify|verify} messages.
                             * @function encode
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
                             * @static
                             * @param {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.ISingle} m Single message or plain object to encode
                             * @param {$protobuf.Writer} [w] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Single.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.mode != null && Object.hasOwnProperty.call(m, "mode"))
                                    w.uint32(8).int32(m.mode);
                                if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
                                    w.uint32(18).bytes(m.signature);
                                return w;
                            };

                            /**
                             * Decodes a Single message from the specified reader or buffer.
                             * @function decode
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                             * @param {number} [l] Message length if known beforehand
                             * @returns {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single} Single
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Single.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                        case 1:
                                            m.mode = r.int32();
                                            break;
                                        case 2:
                                            m.signature = r.bytes();
                                            break;
                                        default:
                                            r.skipType(t & 7);
                                            break;
                                    }
                                }
                                return m;
                            };

                            return Single;
                        })();

                        Data.Multi = (function () {

                            /**
                             * Properties of a Multi.
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                             * @interface IMulti
                             * @property {cosmos.crypto.multisig.v1beta1.ICompactBitArray|null} [bitarray] Multi bitarray
                             * @property {Array.<cosmos.tx.signing.v1beta1.SignatureDescriptor.IData>|null} [signatures] Multi signatures
                             */

                            /**
                             * Constructs a new Multi.
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
                             * @classdesc Represents a Multi.
                             * @implements IMulti
                             * @constructor
                             * @param {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.IMulti=} [p] Properties to set
                             */
                            function Multi(p) {
                                this.signatures = [];
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }

                            /**
                             * Multi bitarray.
                             * @member {cosmos.crypto.multisig.v1beta1.ICompactBitArray|null|undefined} bitarray
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
                             * @instance
                             */
                            Multi.prototype.bitarray = null;

                            /**
                             * Multi signatures.
                             * @member {Array.<cosmos.tx.signing.v1beta1.SignatureDescriptor.IData>} signatures
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
                             * @instance
                             */
                            Multi.prototype.signatures = $util.emptyArray;

                            /**
                             * Encodes the specified Multi message. Does not implicitly {@link cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.verify|verify} messages.
                             * @function encode
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
                             * @static
                             * @param {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.IMulti} m Multi message or plain object to encode
                             * @param {$protobuf.Writer} [w] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Multi.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.bitarray != null && Object.hasOwnProperty.call(m, "bitarray"))
                                    $root.cosmos.crypto.multisig.v1beta1.CompactBitArray.encode(m.bitarray, w.uint32(10).fork()).ldelim();
                                if (m.signatures != null && m.signatures.length) {
                                    for (var i = 0; i < m.signatures.length; ++i)
                                        $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.encode(m.signatures[i], w.uint32(18).fork()).ldelim();
                                }
                                return w;
                            };

                            /**
                             * Decodes a Multi message from the specified reader or buffer.
                             * @function decode
                             * @memberof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                             * @param {number} [l] Message length if known beforehand
                             * @returns {cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi} Multi
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Multi.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                        case 1:
                                            m.bitarray = $root.cosmos.crypto.multisig.v1beta1.CompactBitArray.decode(r, r.uint32());
                                            break;
                                        case 2:
                                            if (!(m.signatures && m.signatures.length))
                                                m.signatures = [];
                                            m.signatures.push($root.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.decode(r, r.uint32()));
                                            break;
                                        default:
                                            r.skipType(t & 7);
                                            break;
                                    }
                                }
                                return m;
                            };

                            return Multi;
                        })();

                        return Data;
                    })();

                    return SignatureDescriptor;
                })();

                return v1beta1;
            })();

            return signing;
        })();

        tx.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.tx
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Tx = (function () {

                /**
                 * Properties of a Tx.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ITx
                 * @property {cosmos.tx.v1beta1.ITxBody|null} [body] Tx body
                 * @property {cosmos.tx.v1beta1.IAuthInfo|null} [auth_info] Tx auth_info
                 * @property {Array.<Uint8Array>|null} [signatures] Tx signatures
                 */

                /**
                 * Constructs a new Tx.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a Tx.
                 * @implements ITx
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ITx=} [p] Properties to set
                 */
                function Tx(p) {
                    this.signatures = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Tx body.
                 * @member {cosmos.tx.v1beta1.ITxBody|null|undefined} body
                 * @memberof cosmos.tx.v1beta1.Tx
                 * @instance
                 */
                Tx.prototype.body = null;

                /**
                 * Tx auth_info.
                 * @member {cosmos.tx.v1beta1.IAuthInfo|null|undefined} auth_info
                 * @memberof cosmos.tx.v1beta1.Tx
                 * @instance
                 */
                Tx.prototype.auth_info = null;

                /**
                 * Tx signatures.
                 * @member {Array.<Uint8Array>} signatures
                 * @memberof cosmos.tx.v1beta1.Tx
                 * @instance
                 */
                Tx.prototype.signatures = $util.emptyArray;

                /**
                 * Encodes the specified Tx message. Does not implicitly {@link cosmos.tx.v1beta1.Tx.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.Tx
                 * @static
                 * @param {cosmos.tx.v1beta1.ITx} m Tx message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Tx.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.body != null && Object.hasOwnProperty.call(m, "body"))
                        $root.cosmos.tx.v1beta1.TxBody.encode(m.body, w.uint32(10).fork()).ldelim();
                    if (m.auth_info != null && Object.hasOwnProperty.call(m, "auth_info"))
                        $root.cosmos.tx.v1beta1.AuthInfo.encode(m.auth_info, w.uint32(18).fork()).ldelim();
                    if (m.signatures != null && m.signatures.length) {
                        for (var i = 0; i < m.signatures.length; ++i)
                            w.uint32(26).bytes(m.signatures[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a Tx message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.Tx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.Tx} Tx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Tx.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.Tx();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.body = $root.cosmos.tx.v1beta1.TxBody.decode(r, r.uint32());
                                break;
                            case 2:
                                m.auth_info = $root.cosmos.tx.v1beta1.AuthInfo.decode(r, r.uint32());
                                break;
                            case 3:
                                if (!(m.signatures && m.signatures.length))
                                    m.signatures = [];
                                m.signatures.push(r.bytes());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Tx;
            })();

            v1beta1.TxRaw = (function () {

                /**
                 * Properties of a TxRaw.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ITxRaw
                 * @property {Uint8Array|null} [body_bytes] TxRaw body_bytes
                 * @property {Uint8Array|null} [auth_info_bytes] TxRaw auth_info_bytes
                 * @property {Array.<Uint8Array>|null} [signatures] TxRaw signatures
                 */

                /**
                 * Constructs a new TxRaw.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a TxRaw.
                 * @implements ITxRaw
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ITxRaw=} [p] Properties to set
                 */
                function TxRaw(p) {
                    this.signatures = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * TxRaw body_bytes.
                 * @member {Uint8Array} body_bytes
                 * @memberof cosmos.tx.v1beta1.TxRaw
                 * @instance
                 */
                TxRaw.prototype.body_bytes = $util.newBuffer([]);

                /**
                 * TxRaw auth_info_bytes.
                 * @member {Uint8Array} auth_info_bytes
                 * @memberof cosmos.tx.v1beta1.TxRaw
                 * @instance
                 */
                TxRaw.prototype.auth_info_bytes = $util.newBuffer([]);

                /**
                 * TxRaw signatures.
                 * @member {Array.<Uint8Array>} signatures
                 * @memberof cosmos.tx.v1beta1.TxRaw
                 * @instance
                 */
                TxRaw.prototype.signatures = $util.emptyArray;

                /**
                 * Encodes the specified TxRaw message. Does not implicitly {@link cosmos.tx.v1beta1.TxRaw.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.TxRaw
                 * @static
                 * @param {cosmos.tx.v1beta1.ITxRaw} m TxRaw message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxRaw.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.body_bytes != null && Object.hasOwnProperty.call(m, "body_bytes"))
                        w.uint32(10).bytes(m.body_bytes);
                    if (m.auth_info_bytes != null && Object.hasOwnProperty.call(m, "auth_info_bytes"))
                        w.uint32(18).bytes(m.auth_info_bytes);
                    if (m.signatures != null && m.signatures.length) {
                        for (var i = 0; i < m.signatures.length; ++i)
                            w.uint32(26).bytes(m.signatures[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a TxRaw message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.TxRaw
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.TxRaw} TxRaw
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxRaw.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.TxRaw();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.body_bytes = r.bytes();
                                break;
                            case 2:
                                m.auth_info_bytes = r.bytes();
                                break;
                            case 3:
                                if (!(m.signatures && m.signatures.length))
                                    m.signatures = [];
                                m.signatures.push(r.bytes());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return TxRaw;
            })();

            v1beta1.SignDoc = (function () {

                /**
                 * Properties of a SignDoc.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ISignDoc
                 * @property {Uint8Array|null} [body_bytes] SignDoc body_bytes
                 * @property {Uint8Array|null} [auth_info_bytes] SignDoc auth_info_bytes
                 * @property {string|null} [chain_id] SignDoc chain_id
                 * @property {Long|null} [account_number] SignDoc account_number
                 */

                /**
                 * Constructs a new SignDoc.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a SignDoc.
                 * @implements ISignDoc
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ISignDoc=} [p] Properties to set
                 */
                function SignDoc(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SignDoc body_bytes.
                 * @member {Uint8Array} body_bytes
                 * @memberof cosmos.tx.v1beta1.SignDoc
                 * @instance
                 */
                SignDoc.prototype.body_bytes = $util.newBuffer([]);

                /**
                 * SignDoc auth_info_bytes.
                 * @member {Uint8Array} auth_info_bytes
                 * @memberof cosmos.tx.v1beta1.SignDoc
                 * @instance
                 */
                SignDoc.prototype.auth_info_bytes = $util.newBuffer([]);

                /**
                 * SignDoc chain_id.
                 * @member {string} chain_id
                 * @memberof cosmos.tx.v1beta1.SignDoc
                 * @instance
                 */
                SignDoc.prototype.chain_id = "";

                /**
                 * SignDoc account_number.
                 * @member {Long} account_number
                 * @memberof cosmos.tx.v1beta1.SignDoc
                 * @instance
                 */
                SignDoc.prototype.account_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified SignDoc message. Does not implicitly {@link cosmos.tx.v1beta1.SignDoc.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.SignDoc
                 * @static
                 * @param {cosmos.tx.v1beta1.ISignDoc} m SignDoc message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SignDoc.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.body_bytes != null && Object.hasOwnProperty.call(m, "body_bytes"))
                        w.uint32(10).bytes(m.body_bytes);
                    if (m.auth_info_bytes != null && Object.hasOwnProperty.call(m, "auth_info_bytes"))
                        w.uint32(18).bytes(m.auth_info_bytes);
                    if (m.chain_id != null && Object.hasOwnProperty.call(m, "chain_id"))
                        w.uint32(26).string(m.chain_id);
                    if (m.account_number != null && Object.hasOwnProperty.call(m, "account_number"))
                        w.uint32(32).uint64(m.account_number);
                    return w;
                };

                /**
                 * Decodes a SignDoc message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.SignDoc
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.SignDoc} SignDoc
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SignDoc.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.SignDoc();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.body_bytes = r.bytes();
                                break;
                            case 2:
                                m.auth_info_bytes = r.bytes();
                                break;
                            case 3:
                                m.chain_id = r.string();
                                break;
                            case 4:
                                m.account_number = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SignDoc;
            })();

            v1beta1.TxBody = (function () {

                /**
                 * Properties of a TxBody.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ITxBody
                 * @property {Array.<google.protobuf.IAny>|null} [messages] TxBody messages
                 * @property {string|null} [memo] TxBody memo
                 * @property {Long|null} [timeout_height] TxBody timeout_height
                 * @property {Array.<google.protobuf.IAny>|null} [extension_options] TxBody extension_options
                 * @property {Array.<google.protobuf.IAny>|null} [non_critical_extension_options] TxBody non_critical_extension_options
                 */

                /**
                 * Constructs a new TxBody.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a TxBody.
                 * @implements ITxBody
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ITxBody=} [p] Properties to set
                 */
                function TxBody(p) {
                    this.messages = [];
                    this.extension_options = [];
                    this.non_critical_extension_options = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * TxBody messages.
                 * @member {Array.<google.protobuf.IAny>} messages
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @instance
                 */
                TxBody.prototype.messages = $util.emptyArray;

                /**
                 * TxBody memo.
                 * @member {string} memo
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @instance
                 */
                TxBody.prototype.memo = "";

                /**
                 * TxBody timeout_height.
                 * @member {Long} timeout_height
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @instance
                 */
                TxBody.prototype.timeout_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * TxBody extension_options.
                 * @member {Array.<google.protobuf.IAny>} extension_options
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @instance
                 */
                TxBody.prototype.extension_options = $util.emptyArray;

                /**
                 * TxBody non_critical_extension_options.
                 * @member {Array.<google.protobuf.IAny>} non_critical_extension_options
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @instance
                 */
                TxBody.prototype.non_critical_extension_options = $util.emptyArray;

                /**
                 * Encodes the specified TxBody message. Does not implicitly {@link cosmos.tx.v1beta1.TxBody.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @static
                 * @param {cosmos.tx.v1beta1.ITxBody} m TxBody message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxBody.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.messages != null && m.messages.length) {
                        for (var i = 0; i < m.messages.length; ++i)
                            $root.google.protobuf.Any.encode(m.messages[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                        w.uint32(18).string(m.memo);
                    if (m.timeout_height != null && Object.hasOwnProperty.call(m, "timeout_height"))
                        w.uint32(24).uint64(m.timeout_height);
                    if (m.extension_options != null && m.extension_options.length) {
                        for (var i = 0; i < m.extension_options.length; ++i)
                            $root.google.protobuf.Any.encode(m.extension_options[i], w.uint32(8186).fork()).ldelim();
                    }
                    if (m.non_critical_extension_options != null && m.non_critical_extension_options.length) {
                        for (var i = 0; i < m.non_critical_extension_options.length; ++i)
                            $root.google.protobuf.Any.encode(m.non_critical_extension_options[i], w.uint32(16378).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a TxBody message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.TxBody
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.TxBody} TxBody
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxBody.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.TxBody();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.messages && m.messages.length))
                                    m.messages = [];
                                m.messages.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.memo = r.string();
                                break;
                            case 3:
                                m.timeout_height = r.uint64();
                                break;
                            case 1023:
                                if (!(m.extension_options && m.extension_options.length))
                                    m.extension_options = [];
                                m.extension_options.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            case 2047:
                                if (!(m.non_critical_extension_options && m.non_critical_extension_options.length))
                                    m.non_critical_extension_options = [];
                                m.non_critical_extension_options.push($root.google.protobuf.Any.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return TxBody;
            })();

            v1beta1.AuthInfo = (function () {

                /**
                 * Properties of an AuthInfo.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IAuthInfo
                 * @property {Array.<cosmos.tx.v1beta1.ISignerInfo>|null} [signer_infos] AuthInfo signer_infos
                 * @property {cosmos.tx.v1beta1.IFee|null} [fee] AuthInfo fee
                 */

                /**
                 * Constructs a new AuthInfo.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents an AuthInfo.
                 * @implements IAuthInfo
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IAuthInfo=} [p] Properties to set
                 */
                function AuthInfo(p) {
                    this.signer_infos = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AuthInfo signer_infos.
                 * @member {Array.<cosmos.tx.v1beta1.ISignerInfo>} signer_infos
                 * @memberof cosmos.tx.v1beta1.AuthInfo
                 * @instance
                 */
                AuthInfo.prototype.signer_infos = $util.emptyArray;

                /**
                 * AuthInfo fee.
                 * @member {cosmos.tx.v1beta1.IFee|null|undefined} fee
                 * @memberof cosmos.tx.v1beta1.AuthInfo
                 * @instance
                 */
                AuthInfo.prototype.fee = null;

                /**
                 * Encodes the specified AuthInfo message. Does not implicitly {@link cosmos.tx.v1beta1.AuthInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.AuthInfo
                 * @static
                 * @param {cosmos.tx.v1beta1.IAuthInfo} m AuthInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuthInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.signer_infos != null && m.signer_infos.length) {
                        for (var i = 0; i < m.signer_infos.length; ++i)
                            $root.cosmos.tx.v1beta1.SignerInfo.encode(m.signer_infos[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.fee != null && Object.hasOwnProperty.call(m, "fee"))
                        $root.cosmos.tx.v1beta1.Fee.encode(m.fee, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes an AuthInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.AuthInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.AuthInfo} AuthInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuthInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.AuthInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.signer_infos && m.signer_infos.length))
                                    m.signer_infos = [];
                                m.signer_infos.push($root.cosmos.tx.v1beta1.SignerInfo.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.fee = $root.cosmos.tx.v1beta1.Fee.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return AuthInfo;
            })();

            v1beta1.SignerInfo = (function () {

                /**
                 * Properties of a SignerInfo.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ISignerInfo
                 * @property {google.protobuf.IAny|null} [public_key] SignerInfo public_key
                 * @property {cosmos.tx.v1beta1.IModeInfo|null} [mode_info] SignerInfo mode_info
                 * @property {Long|null} [sequence] SignerInfo sequence
                 */

                /**
                 * Constructs a new SignerInfo.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a SignerInfo.
                 * @implements ISignerInfo
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ISignerInfo=} [p] Properties to set
                 */
                function SignerInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SignerInfo public_key.
                 * @member {google.protobuf.IAny|null|undefined} public_key
                 * @memberof cosmos.tx.v1beta1.SignerInfo
                 * @instance
                 */
                SignerInfo.prototype.public_key = null;

                /**
                 * SignerInfo mode_info.
                 * @member {cosmos.tx.v1beta1.IModeInfo|null|undefined} mode_info
                 * @memberof cosmos.tx.v1beta1.SignerInfo
                 * @instance
                 */
                SignerInfo.prototype.mode_info = null;

                /**
                 * SignerInfo sequence.
                 * @member {Long} sequence
                 * @memberof cosmos.tx.v1beta1.SignerInfo
                 * @instance
                 */
                SignerInfo.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified SignerInfo message. Does not implicitly {@link cosmos.tx.v1beta1.SignerInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.SignerInfo
                 * @static
                 * @param {cosmos.tx.v1beta1.ISignerInfo} m SignerInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SignerInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.public_key != null && Object.hasOwnProperty.call(m, "public_key"))
                        $root.google.protobuf.Any.encode(m.public_key, w.uint32(10).fork()).ldelim();
                    if (m.mode_info != null && Object.hasOwnProperty.call(m, "mode_info"))
                        $root.cosmos.tx.v1beta1.ModeInfo.encode(m.mode_info, w.uint32(18).fork()).ldelim();
                    if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                        w.uint32(24).uint64(m.sequence);
                    return w;
                };

                /**
                 * Decodes a SignerInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.SignerInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.SignerInfo} SignerInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SignerInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.SignerInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.public_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            case 2:
                                m.mode_info = $root.cosmos.tx.v1beta1.ModeInfo.decode(r, r.uint32());
                                break;
                            case 3:
                                m.sequence = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SignerInfo;
            })();

            v1beta1.ModeInfo = (function () {

                /**
                 * Properties of a ModeInfo.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IModeInfo
                 * @property {cosmos.tx.v1beta1.ModeInfo.ISingle|null} [single] ModeInfo single
                 * @property {cosmos.tx.v1beta1.ModeInfo.IMulti|null} [multi] ModeInfo multi
                 */

                /**
                 * Constructs a new ModeInfo.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a ModeInfo.
                 * @implements IModeInfo
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IModeInfo=} [p] Properties to set
                 */
                function ModeInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ModeInfo single.
                 * @member {cosmos.tx.v1beta1.ModeInfo.ISingle|null|undefined} single
                 * @memberof cosmos.tx.v1beta1.ModeInfo
                 * @instance
                 */
                ModeInfo.prototype.single = null;

                /**
                 * ModeInfo multi.
                 * @member {cosmos.tx.v1beta1.ModeInfo.IMulti|null|undefined} multi
                 * @memberof cosmos.tx.v1beta1.ModeInfo
                 * @instance
                 */
                ModeInfo.prototype.multi = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ModeInfo sum.
                 * @member {"single"|"multi"|undefined} sum
                 * @memberof cosmos.tx.v1beta1.ModeInfo
                 * @instance
                 */
                Object.defineProperty(ModeInfo.prototype, "sum", {
                    get: $util.oneOfGetter($oneOfFields = ["single", "multi"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Encodes the specified ModeInfo message. Does not implicitly {@link cosmos.tx.v1beta1.ModeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.ModeInfo
                 * @static
                 * @param {cosmos.tx.v1beta1.IModeInfo} m ModeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ModeInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.single != null && Object.hasOwnProperty.call(m, "single"))
                        $root.cosmos.tx.v1beta1.ModeInfo.Single.encode(m.single, w.uint32(10).fork()).ldelim();
                    if (m.multi != null && Object.hasOwnProperty.call(m, "multi"))
                        $root.cosmos.tx.v1beta1.ModeInfo.Multi.encode(m.multi, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a ModeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.ModeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.ModeInfo} ModeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ModeInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.ModeInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.single = $root.cosmos.tx.v1beta1.ModeInfo.Single.decode(r, r.uint32());
                                break;
                            case 2:
                                m.multi = $root.cosmos.tx.v1beta1.ModeInfo.Multi.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                ModeInfo.Single = (function () {

                    /**
                     * Properties of a Single.
                     * @memberof cosmos.tx.v1beta1.ModeInfo
                     * @interface ISingle
                     * @property {cosmos.tx.signing.v1beta1.SignMode|null} [mode] Single mode
                     */

                    /**
                     * Constructs a new Single.
                     * @memberof cosmos.tx.v1beta1.ModeInfo
                     * @classdesc Represents a Single.
                     * @implements ISingle
                     * @constructor
                     * @param {cosmos.tx.v1beta1.ModeInfo.ISingle=} [p] Properties to set
                     */
                    function Single(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Single mode.
                     * @member {cosmos.tx.signing.v1beta1.SignMode} mode
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Single
                     * @instance
                     */
                    Single.prototype.mode = 0;

                    /**
                     * Encodes the specified Single message. Does not implicitly {@link cosmos.tx.v1beta1.ModeInfo.Single.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Single
                     * @static
                     * @param {cosmos.tx.v1beta1.ModeInfo.ISingle} m Single message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Single.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.mode != null && Object.hasOwnProperty.call(m, "mode"))
                            w.uint32(8).int32(m.mode);
                        return w;
                    };

                    /**
                     * Decodes a Single message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Single
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.tx.v1beta1.ModeInfo.Single} Single
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Single.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.ModeInfo.Single();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.mode = r.int32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Single;
                })();

                ModeInfo.Multi = (function () {

                    /**
                     * Properties of a Multi.
                     * @memberof cosmos.tx.v1beta1.ModeInfo
                     * @interface IMulti
                     * @property {cosmos.crypto.multisig.v1beta1.ICompactBitArray|null} [bitarray] Multi bitarray
                     * @property {Array.<cosmos.tx.v1beta1.IModeInfo>|null} [mode_infos] Multi mode_infos
                     */

                    /**
                     * Constructs a new Multi.
                     * @memberof cosmos.tx.v1beta1.ModeInfo
                     * @classdesc Represents a Multi.
                     * @implements IMulti
                     * @constructor
                     * @param {cosmos.tx.v1beta1.ModeInfo.IMulti=} [p] Properties to set
                     */
                    function Multi(p) {
                        this.mode_infos = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Multi bitarray.
                     * @member {cosmos.crypto.multisig.v1beta1.ICompactBitArray|null|undefined} bitarray
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Multi
                     * @instance
                     */
                    Multi.prototype.bitarray = null;

                    /**
                     * Multi mode_infos.
                     * @member {Array.<cosmos.tx.v1beta1.IModeInfo>} mode_infos
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Multi
                     * @instance
                     */
                    Multi.prototype.mode_infos = $util.emptyArray;

                    /**
                     * Encodes the specified Multi message. Does not implicitly {@link cosmos.tx.v1beta1.ModeInfo.Multi.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Multi
                     * @static
                     * @param {cosmos.tx.v1beta1.ModeInfo.IMulti} m Multi message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Multi.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.bitarray != null && Object.hasOwnProperty.call(m, "bitarray"))
                            $root.cosmos.crypto.multisig.v1beta1.CompactBitArray.encode(m.bitarray, w.uint32(10).fork()).ldelim();
                        if (m.mode_infos != null && m.mode_infos.length) {
                            for (var i = 0; i < m.mode_infos.length; ++i)
                                $root.cosmos.tx.v1beta1.ModeInfo.encode(m.mode_infos[i], w.uint32(18).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a Multi message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.tx.v1beta1.ModeInfo.Multi
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {cosmos.tx.v1beta1.ModeInfo.Multi} Multi
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Multi.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.ModeInfo.Multi();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.bitarray = $root.cosmos.crypto.multisig.v1beta1.CompactBitArray.decode(r, r.uint32());
                                    break;
                                case 2:
                                    if (!(m.mode_infos && m.mode_infos.length))
                                        m.mode_infos = [];
                                    m.mode_infos.push($root.cosmos.tx.v1beta1.ModeInfo.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Multi;
                })();

                return ModeInfo;
            })();

            v1beta1.Fee = (function () {

                /**
                 * Properties of a Fee.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IFee
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] Fee amount
                 * @property {Long|null} [gas_limit] Fee gas_limit
                 * @property {string|null} [payer] Fee payer
                 * @property {string|null} [granter] Fee granter
                 */

                /**
                 * Constructs a new Fee.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a Fee.
                 * @implements IFee
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IFee=} [p] Properties to set
                 */
                function Fee(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Fee amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.tx.v1beta1.Fee
                 * @instance
                 */
                Fee.prototype.amount = $util.emptyArray;

                /**
                 * Fee gas_limit.
                 * @member {Long} gas_limit
                 * @memberof cosmos.tx.v1beta1.Fee
                 * @instance
                 */
                Fee.prototype.gas_limit = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Fee payer.
                 * @member {string} payer
                 * @memberof cosmos.tx.v1beta1.Fee
                 * @instance
                 */
                Fee.prototype.payer = "";

                /**
                 * Fee granter.
                 * @member {string} granter
                 * @memberof cosmos.tx.v1beta1.Fee
                 * @instance
                 */
                Fee.prototype.granter = "";

                /**
                 * Encodes the specified Fee message. Does not implicitly {@link cosmos.tx.v1beta1.Fee.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.Fee
                 * @static
                 * @param {cosmos.tx.v1beta1.IFee} m Fee message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fee.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.gas_limit != null && Object.hasOwnProperty.call(m, "gas_limit"))
                        w.uint32(16).uint64(m.gas_limit);
                    if (m.payer != null && Object.hasOwnProperty.call(m, "payer"))
                        w.uint32(26).string(m.payer);
                    if (m.granter != null && Object.hasOwnProperty.call(m, "granter"))
                        w.uint32(34).string(m.granter);
                    return w;
                };

                /**
                 * Decodes a Fee message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.Fee
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.Fee} Fee
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fee.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.Fee();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.gas_limit = r.uint64();
                                break;
                            case 3:
                                m.payer = r.string();
                                break;
                            case 4:
                                m.granter = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Fee;
            })();

            v1beta1.GetTxsEventRequest = (function () {

                /**
                 * Properties of a GetTxsEventRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IGetTxsEventRequest
                 * @property {Array.<string>|null} [events] GetTxsEventRequest events
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] GetTxsEventRequest pagination
                 * @property {cosmos.tx.v1beta1.OrderBy|null} [order_by] GetTxsEventRequest order_by
                 */

                /**
                 * Constructs a new GetTxsEventRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a GetTxsEventRequest.
                 * @implements IGetTxsEventRequest
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IGetTxsEventRequest=} [p] Properties to set
                 */
                function GetTxsEventRequest(p) {
                    this.events = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GetTxsEventRequest events.
                 * @member {Array.<string>} events
                 * @memberof cosmos.tx.v1beta1.GetTxsEventRequest
                 * @instance
                 */
                GetTxsEventRequest.prototype.events = $util.emptyArray;

                /**
                 * GetTxsEventRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmos.tx.v1beta1.GetTxsEventRequest
                 * @instance
                 */
                GetTxsEventRequest.prototype.pagination = null;

                /**
                 * GetTxsEventRequest order_by.
                 * @member {cosmos.tx.v1beta1.OrderBy} order_by
                 * @memberof cosmos.tx.v1beta1.GetTxsEventRequest
                 * @instance
                 */
                GetTxsEventRequest.prototype.order_by = 0;

                /**
                 * Encodes the specified GetTxsEventRequest message. Does not implicitly {@link cosmos.tx.v1beta1.GetTxsEventRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.GetTxsEventRequest
                 * @static
                 * @param {cosmos.tx.v1beta1.IGetTxsEventRequest} m GetTxsEventRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetTxsEventRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.events != null && m.events.length) {
                        for (var i = 0; i < m.events.length; ++i)
                            w.uint32(10).string(m.events[i]);
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                    if (m.order_by != null && Object.hasOwnProperty.call(m, "order_by"))
                        w.uint32(24).int32(m.order_by);
                    return w;
                };

                /**
                 * Decodes a GetTxsEventRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.GetTxsEventRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.GetTxsEventRequest} GetTxsEventRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetTxsEventRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.GetTxsEventRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.events && m.events.length))
                                    m.events = [];
                                m.events.push(r.string());
                                break;
                            case 2:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                break;
                            case 3:
                                m.order_by = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GetTxsEventRequest;
            })();

            /**
             * OrderBy enum.
             * @name cosmos.tx.v1beta1.OrderBy
             * @enum {number}
             * @property {number} ORDER_BY_UNSPECIFIED=0 ORDER_BY_UNSPECIFIED value
             * @property {number} ORDER_BY_ASC=1 ORDER_BY_ASC value
             * @property {number} ORDER_BY_DESC=2 ORDER_BY_DESC value
             */
            v1beta1.OrderBy = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ORDER_BY_UNSPECIFIED"] = 0;
                values[valuesById[1] = "ORDER_BY_ASC"] = 1;
                values[valuesById[2] = "ORDER_BY_DESC"] = 2;
                return values;
            })();

            v1beta1.GetTxsEventResponse = (function () {

                /**
                 * Properties of a GetTxsEventResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IGetTxsEventResponse
                 * @property {Array.<cosmos.tx.v1beta1.ITx>|null} [txs] GetTxsEventResponse txs
                 * @property {Array.<cosmos.base.abci.v1beta1.ITxResponse>|null} [tx_responses] GetTxsEventResponse tx_responses
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] GetTxsEventResponse pagination
                 */

                /**
                 * Constructs a new GetTxsEventResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a GetTxsEventResponse.
                 * @implements IGetTxsEventResponse
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IGetTxsEventResponse=} [p] Properties to set
                 */
                function GetTxsEventResponse(p) {
                    this.txs = [];
                    this.tx_responses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GetTxsEventResponse txs.
                 * @member {Array.<cosmos.tx.v1beta1.ITx>} txs
                 * @memberof cosmos.tx.v1beta1.GetTxsEventResponse
                 * @instance
                 */
                GetTxsEventResponse.prototype.txs = $util.emptyArray;

                /**
                 * GetTxsEventResponse tx_responses.
                 * @member {Array.<cosmos.base.abci.v1beta1.ITxResponse>} tx_responses
                 * @memberof cosmos.tx.v1beta1.GetTxsEventResponse
                 * @instance
                 */
                GetTxsEventResponse.prototype.tx_responses = $util.emptyArray;

                /**
                 * GetTxsEventResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmos.tx.v1beta1.GetTxsEventResponse
                 * @instance
                 */
                GetTxsEventResponse.prototype.pagination = null;

                /**
                 * Encodes the specified GetTxsEventResponse message. Does not implicitly {@link cosmos.tx.v1beta1.GetTxsEventResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.GetTxsEventResponse
                 * @static
                 * @param {cosmos.tx.v1beta1.IGetTxsEventResponse} m GetTxsEventResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetTxsEventResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.txs != null && m.txs.length) {
                        for (var i = 0; i < m.txs.length; ++i)
                            $root.cosmos.tx.v1beta1.Tx.encode(m.txs[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.tx_responses != null && m.tx_responses.length) {
                        for (var i = 0; i < m.tx_responses.length; ++i)
                            $root.cosmos.base.abci.v1beta1.TxResponse.encode(m.tx_responses[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GetTxsEventResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.GetTxsEventResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.GetTxsEventResponse} GetTxsEventResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetTxsEventResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.GetTxsEventResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.txs && m.txs.length))
                                    m.txs = [];
                                m.txs.push($root.cosmos.tx.v1beta1.Tx.decode(r, r.uint32()));
                                break;
                            case 2:
                                if (!(m.tx_responses && m.tx_responses.length))
                                    m.tx_responses = [];
                                m.tx_responses.push($root.cosmos.base.abci.v1beta1.TxResponse.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GetTxsEventResponse;
            })();

            v1beta1.BroadcastTxRequest = (function () {

                /**
                 * Properties of a BroadcastTxRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IBroadcastTxRequest
                 * @property {Uint8Array|null} [tx_bytes] BroadcastTxRequest tx_bytes
                 * @property {cosmos.tx.v1beta1.BroadcastMode|null} [mode] BroadcastTxRequest mode
                 */

                /**
                 * Constructs a new BroadcastTxRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a BroadcastTxRequest.
                 * @implements IBroadcastTxRequest
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IBroadcastTxRequest=} [p] Properties to set
                 */
                function BroadcastTxRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BroadcastTxRequest tx_bytes.
                 * @member {Uint8Array} tx_bytes
                 * @memberof cosmos.tx.v1beta1.BroadcastTxRequest
                 * @instance
                 */
                BroadcastTxRequest.prototype.tx_bytes = $util.newBuffer([]);

                /**
                 * BroadcastTxRequest mode.
                 * @member {cosmos.tx.v1beta1.BroadcastMode} mode
                 * @memberof cosmos.tx.v1beta1.BroadcastTxRequest
                 * @instance
                 */
                BroadcastTxRequest.prototype.mode = 0;

                /**
                 * Encodes the specified BroadcastTxRequest message. Does not implicitly {@link cosmos.tx.v1beta1.BroadcastTxRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.BroadcastTxRequest
                 * @static
                 * @param {cosmos.tx.v1beta1.IBroadcastTxRequest} m BroadcastTxRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BroadcastTxRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.tx_bytes != null && Object.hasOwnProperty.call(m, "tx_bytes"))
                        w.uint32(10).bytes(m.tx_bytes);
                    if (m.mode != null && Object.hasOwnProperty.call(m, "mode"))
                        w.uint32(16).int32(m.mode);
                    return w;
                };

                /**
                 * Decodes a BroadcastTxRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.BroadcastTxRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.BroadcastTxRequest} BroadcastTxRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BroadcastTxRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.BroadcastTxRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.tx_bytes = r.bytes();
                                break;
                            case 2:
                                m.mode = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BroadcastTxRequest;
            })();

            /**
             * BroadcastMode enum.
             * @name cosmos.tx.v1beta1.BroadcastMode
             * @enum {number}
             * @property {number} BROADCAST_MODE_UNSPECIFIED=0 BROADCAST_MODE_UNSPECIFIED value
             * @property {number} BROADCAST_MODE_BLOCK=1 BROADCAST_MODE_BLOCK value
             * @property {number} BROADCAST_MODE_SYNC=2 BROADCAST_MODE_SYNC value
             * @property {number} BROADCAST_MODE_ASYNC=3 BROADCAST_MODE_ASYNC value
             */
            v1beta1.BroadcastMode = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BROADCAST_MODE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "BROADCAST_MODE_BLOCK"] = 1;
                values[valuesById[2] = "BROADCAST_MODE_SYNC"] = 2;
                values[valuesById[3] = "BROADCAST_MODE_ASYNC"] = 3;
                return values;
            })();

            v1beta1.BroadcastTxResponse = (function () {

                /**
                 * Properties of a BroadcastTxResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IBroadcastTxResponse
                 * @property {cosmos.base.abci.v1beta1.ITxResponse|null} [tx_response] BroadcastTxResponse tx_response
                 */

                /**
                 * Constructs a new BroadcastTxResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a BroadcastTxResponse.
                 * @implements IBroadcastTxResponse
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IBroadcastTxResponse=} [p] Properties to set
                 */
                function BroadcastTxResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BroadcastTxResponse tx_response.
                 * @member {cosmos.base.abci.v1beta1.ITxResponse|null|undefined} tx_response
                 * @memberof cosmos.tx.v1beta1.BroadcastTxResponse
                 * @instance
                 */
                BroadcastTxResponse.prototype.tx_response = null;

                /**
                 * Encodes the specified BroadcastTxResponse message. Does not implicitly {@link cosmos.tx.v1beta1.BroadcastTxResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.BroadcastTxResponse
                 * @static
                 * @param {cosmos.tx.v1beta1.IBroadcastTxResponse} m BroadcastTxResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BroadcastTxResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.tx_response != null && Object.hasOwnProperty.call(m, "tx_response"))
                        $root.cosmos.base.abci.v1beta1.TxResponse.encode(m.tx_response, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a BroadcastTxResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.BroadcastTxResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.BroadcastTxResponse} BroadcastTxResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BroadcastTxResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.BroadcastTxResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.tx_response = $root.cosmos.base.abci.v1beta1.TxResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BroadcastTxResponse;
            })();

            v1beta1.SimulateRequest = (function () {

                /**
                 * Properties of a SimulateRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ISimulateRequest
                 * @property {cosmos.tx.v1beta1.ITx|null} [tx] SimulateRequest tx
                 */

                /**
                 * Constructs a new SimulateRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a SimulateRequest.
                 * @implements ISimulateRequest
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ISimulateRequest=} [p] Properties to set
                 */
                function SimulateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SimulateRequest tx.
                 * @member {cosmos.tx.v1beta1.ITx|null|undefined} tx
                 * @memberof cosmos.tx.v1beta1.SimulateRequest
                 * @instance
                 */
                SimulateRequest.prototype.tx = null;

                /**
                 * Encodes the specified SimulateRequest message. Does not implicitly {@link cosmos.tx.v1beta1.SimulateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.SimulateRequest
                 * @static
                 * @param {cosmos.tx.v1beta1.ISimulateRequest} m SimulateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SimulateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.tx != null && Object.hasOwnProperty.call(m, "tx"))
                        $root.cosmos.tx.v1beta1.Tx.encode(m.tx, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a SimulateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.SimulateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.SimulateRequest} SimulateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SimulateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.SimulateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.tx = $root.cosmos.tx.v1beta1.Tx.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SimulateRequest;
            })();

            v1beta1.SimulateResponse = (function () {

                /**
                 * Properties of a SimulateResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @interface ISimulateResponse
                 * @property {cosmos.base.abci.v1beta1.IGasInfo|null} [gas_info] SimulateResponse gas_info
                 * @property {cosmos.base.abci.v1beta1.IResult|null} [result] SimulateResponse result
                 */

                /**
                 * Constructs a new SimulateResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a SimulateResponse.
                 * @implements ISimulateResponse
                 * @constructor
                 * @param {cosmos.tx.v1beta1.ISimulateResponse=} [p] Properties to set
                 */
                function SimulateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SimulateResponse gas_info.
                 * @member {cosmos.base.abci.v1beta1.IGasInfo|null|undefined} gas_info
                 * @memberof cosmos.tx.v1beta1.SimulateResponse
                 * @instance
                 */
                SimulateResponse.prototype.gas_info = null;

                /**
                 * SimulateResponse result.
                 * @member {cosmos.base.abci.v1beta1.IResult|null|undefined} result
                 * @memberof cosmos.tx.v1beta1.SimulateResponse
                 * @instance
                 */
                SimulateResponse.prototype.result = null;

                /**
                 * Encodes the specified SimulateResponse message. Does not implicitly {@link cosmos.tx.v1beta1.SimulateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.SimulateResponse
                 * @static
                 * @param {cosmos.tx.v1beta1.ISimulateResponse} m SimulateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SimulateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.gas_info != null && Object.hasOwnProperty.call(m, "gas_info"))
                        $root.cosmos.base.abci.v1beta1.GasInfo.encode(m.gas_info, w.uint32(10).fork()).ldelim();
                    if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                        $root.cosmos.base.abci.v1beta1.Result.encode(m.result, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a SimulateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.SimulateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.SimulateResponse} SimulateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SimulateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.SimulateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.gas_info = $root.cosmos.base.abci.v1beta1.GasInfo.decode(r, r.uint32());
                                break;
                            case 2:
                                m.result = $root.cosmos.base.abci.v1beta1.Result.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SimulateResponse;
            })();

            v1beta1.GetTxRequest = (function () {

                /**
                 * Properties of a GetTxRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IGetTxRequest
                 * @property {string|null} [hash] GetTxRequest hash
                 */

                /**
                 * Constructs a new GetTxRequest.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a GetTxRequest.
                 * @implements IGetTxRequest
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IGetTxRequest=} [p] Properties to set
                 */
                function GetTxRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GetTxRequest hash.
                 * @member {string} hash
                 * @memberof cosmos.tx.v1beta1.GetTxRequest
                 * @instance
                 */
                GetTxRequest.prototype.hash = "";

                /**
                 * Encodes the specified GetTxRequest message. Does not implicitly {@link cosmos.tx.v1beta1.GetTxRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.GetTxRequest
                 * @static
                 * @param {cosmos.tx.v1beta1.IGetTxRequest} m GetTxRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetTxRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                        w.uint32(10).string(m.hash);
                    return w;
                };

                /**
                 * Decodes a GetTxRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.GetTxRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.GetTxRequest} GetTxRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetTxRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.GetTxRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.hash = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GetTxRequest;
            })();

            v1beta1.GetTxResponse = (function () {

                /**
                 * Properties of a GetTxResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @interface IGetTxResponse
                 * @property {cosmos.tx.v1beta1.ITx|null} [tx] GetTxResponse tx
                 * @property {cosmos.base.abci.v1beta1.ITxResponse|null} [tx_response] GetTxResponse tx_response
                 */

                /**
                 * Constructs a new GetTxResponse.
                 * @memberof cosmos.tx.v1beta1
                 * @classdesc Represents a GetTxResponse.
                 * @implements IGetTxResponse
                 * @constructor
                 * @param {cosmos.tx.v1beta1.IGetTxResponse=} [p] Properties to set
                 */
                function GetTxResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GetTxResponse tx.
                 * @member {cosmos.tx.v1beta1.ITx|null|undefined} tx
                 * @memberof cosmos.tx.v1beta1.GetTxResponse
                 * @instance
                 */
                GetTxResponse.prototype.tx = null;

                /**
                 * GetTxResponse tx_response.
                 * @member {cosmos.base.abci.v1beta1.ITxResponse|null|undefined} tx_response
                 * @memberof cosmos.tx.v1beta1.GetTxResponse
                 * @instance
                 */
                GetTxResponse.prototype.tx_response = null;

                /**
                 * Encodes the specified GetTxResponse message. Does not implicitly {@link cosmos.tx.v1beta1.GetTxResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.tx.v1beta1.GetTxResponse
                 * @static
                 * @param {cosmos.tx.v1beta1.IGetTxResponse} m GetTxResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetTxResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.tx != null && Object.hasOwnProperty.call(m, "tx"))
                        $root.cosmos.tx.v1beta1.Tx.encode(m.tx, w.uint32(10).fork()).ldelim();
                    if (m.tx_response != null && Object.hasOwnProperty.call(m, "tx_response"))
                        $root.cosmos.base.abci.v1beta1.TxResponse.encode(m.tx_response, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GetTxResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.tx.v1beta1.GetTxResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.tx.v1beta1.GetTxResponse} GetTxResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetTxResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.tx.v1beta1.GetTxResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.tx = $root.cosmos.tx.v1beta1.Tx.decode(r, r.uint32());
                                break;
                            case 2:
                                m.tx_response = $root.cosmos.base.abci.v1beta1.TxResponse.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GetTxResponse;
            })();

            return v1beta1;
        })();

        return tx;
    })();

    cosmos.upgrade = (function () {

        /**
         * Namespace upgrade.
         * @memberof cosmos
         * @namespace
         */
        const upgrade = {};

        upgrade.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.upgrade
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Plan = (function () {

                /**
                 * Properties of a Plan.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IPlan
                 * @property {string|null} [name] Plan name
                 * @property {google.protobuf.ITimestamp|null} [time] Plan time
                 * @property {Long|null} [height] Plan height
                 * @property {string|null} [info] Plan info
                 * @property {google.protobuf.IAny|null} [upgraded_client_state] Plan upgraded_client_state
                 */

                /**
                 * Constructs a new Plan.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a Plan.
                 * @implements IPlan
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IPlan=} [p] Properties to set
                 */
                function Plan(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Plan name.
                 * @member {string} name
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.name = "";

                /**
                 * Plan time.
                 * @member {google.protobuf.ITimestamp|null|undefined} time
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.time = null;

                /**
                 * Plan height.
                 * @member {Long} height
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Plan info.
                 * @member {string} info
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.info = "";

                /**
                 * Plan upgraded_client_state.
                 * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.upgraded_client_state = null;

                /**
                 * Encodes the specified Plan message. Does not implicitly {@link cosmos.upgrade.v1beta1.Plan.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IPlan} m Plan message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Plan.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                        w.uint32(10).string(m.name);
                    if (m.time != null && Object.hasOwnProperty.call(m, "time"))
                        $root.google.protobuf.Timestamp.encode(m.time, w.uint32(18).fork()).ldelim();
                    if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                        w.uint32(24).int64(m.height);
                    if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                        w.uint32(34).string(m.info);
                    if (m.upgraded_client_state != null && Object.hasOwnProperty.call(m, "upgraded_client_state"))
                        $root.google.protobuf.Any.encode(m.upgraded_client_state, w.uint32(42).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a Plan message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Plan.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.Plan();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.name = r.string();
                                break;
                            case 2:
                                m.time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                break;
                            case 3:
                                m.height = r.int64();
                                break;
                            case 4:
                                m.info = r.string();
                                break;
                            case 5:
                                m.upgraded_client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Plan;
            })();

            v1beta1.SoftwareUpgradeProposal = (function () {

                /**
                 * Properties of a SoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface ISoftwareUpgradeProposal
                 * @property {string|null} [title] SoftwareUpgradeProposal title
                 * @property {string|null} [description] SoftwareUpgradeProposal description
                 * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] SoftwareUpgradeProposal plan
                 */

                /**
                 * Constructs a new SoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a SoftwareUpgradeProposal.
                 * @implements ISoftwareUpgradeProposal
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal=} [p] Properties to set
                 */
                function SoftwareUpgradeProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * SoftwareUpgradeProposal title.
                 * @member {string} title
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 */
                SoftwareUpgradeProposal.prototype.title = "";

                /**
                 * SoftwareUpgradeProposal description.
                 * @member {string} description
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 */
                SoftwareUpgradeProposal.prototype.description = "";

                /**
                 * SoftwareUpgradeProposal plan.
                 * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 */
                SoftwareUpgradeProposal.prototype.plan = null;

                /**
                 * Encodes the specified SoftwareUpgradeProposal message. Does not implicitly {@link cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal} m SoftwareUpgradeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SoftwareUpgradeProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    if (m.plan != null && Object.hasOwnProperty.call(m, "plan"))
                        $root.cosmos.upgrade.v1beta1.Plan.encode(m.plan, w.uint32(26).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a SoftwareUpgradeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SoftwareUpgradeProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            case 3:
                                m.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return SoftwareUpgradeProposal;
            })();

            v1beta1.CancelSoftwareUpgradeProposal = (function () {

                /**
                 * Properties of a CancelSoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface ICancelSoftwareUpgradeProposal
                 * @property {string|null} [title] CancelSoftwareUpgradeProposal title
                 * @property {string|null} [description] CancelSoftwareUpgradeProposal description
                 */

                /**
                 * Constructs a new CancelSoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a CancelSoftwareUpgradeProposal.
                 * @implements ICancelSoftwareUpgradeProposal
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal=} [p] Properties to set
                 */
                function CancelSoftwareUpgradeProposal(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * CancelSoftwareUpgradeProposal title.
                 * @member {string} title
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @instance
                 */
                CancelSoftwareUpgradeProposal.prototype.title = "";

                /**
                 * CancelSoftwareUpgradeProposal description.
                 * @member {string} description
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @instance
                 */
                CancelSoftwareUpgradeProposal.prototype.description = "";

                /**
                 * Encodes the specified CancelSoftwareUpgradeProposal message. Does not implicitly {@link cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal} m CancelSoftwareUpgradeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelSoftwareUpgradeProposal.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                        w.uint32(10).string(m.title);
                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                        w.uint32(18).string(m.description);
                    return w;
                };

                /**
                 * Decodes a CancelSoftwareUpgradeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelSoftwareUpgradeProposal.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.title = r.string();
                                break;
                            case 2:
                                m.description = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return CancelSoftwareUpgradeProposal;
            })();

            v1beta1.QueryCurrentPlanRequest = (function () {

                /**
                 * Properties of a QueryCurrentPlanRequest.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IQueryCurrentPlanRequest
                 */

                /**
                 * Constructs a new QueryCurrentPlanRequest.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a QueryCurrentPlanRequest.
                 * @implements IQueryCurrentPlanRequest
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IQueryCurrentPlanRequest=} [p] Properties to set
                 */
                function QueryCurrentPlanRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryCurrentPlanRequest message. Does not implicitly {@link cosmos.upgrade.v1beta1.QueryCurrentPlanRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.QueryCurrentPlanRequest
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IQueryCurrentPlanRequest} m QueryCurrentPlanRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCurrentPlanRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryCurrentPlanRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.QueryCurrentPlanRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.QueryCurrentPlanRequest} QueryCurrentPlanRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCurrentPlanRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.QueryCurrentPlanRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCurrentPlanRequest;
            })();

            v1beta1.QueryCurrentPlanResponse = (function () {

                /**
                 * Properties of a QueryCurrentPlanResponse.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IQueryCurrentPlanResponse
                 * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] QueryCurrentPlanResponse plan
                 */

                /**
                 * Constructs a new QueryCurrentPlanResponse.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a QueryCurrentPlanResponse.
                 * @implements IQueryCurrentPlanResponse
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IQueryCurrentPlanResponse=} [p] Properties to set
                 */
                function QueryCurrentPlanResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryCurrentPlanResponse plan.
                 * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                 * @memberof cosmos.upgrade.v1beta1.QueryCurrentPlanResponse
                 * @instance
                 */
                QueryCurrentPlanResponse.prototype.plan = null;

                /**
                 * Encodes the specified QueryCurrentPlanResponse message. Does not implicitly {@link cosmos.upgrade.v1beta1.QueryCurrentPlanResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.QueryCurrentPlanResponse
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IQueryCurrentPlanResponse} m QueryCurrentPlanResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCurrentPlanResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.plan != null && Object.hasOwnProperty.call(m, "plan"))
                        $root.cosmos.upgrade.v1beta1.Plan.encode(m.plan, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryCurrentPlanResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.QueryCurrentPlanResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.QueryCurrentPlanResponse} QueryCurrentPlanResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCurrentPlanResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.QueryCurrentPlanResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryCurrentPlanResponse;
            })();

            v1beta1.QueryAppliedPlanRequest = (function () {

                /**
                 * Properties of a QueryAppliedPlanRequest.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IQueryAppliedPlanRequest
                 * @property {string|null} [name] QueryAppliedPlanRequest name
                 */

                /**
                 * Constructs a new QueryAppliedPlanRequest.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a QueryAppliedPlanRequest.
                 * @implements IQueryAppliedPlanRequest
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IQueryAppliedPlanRequest=} [p] Properties to set
                 */
                function QueryAppliedPlanRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAppliedPlanRequest name.
                 * @member {string} name
                 * @memberof cosmos.upgrade.v1beta1.QueryAppliedPlanRequest
                 * @instance
                 */
                QueryAppliedPlanRequest.prototype.name = "";

                /**
                 * Encodes the specified QueryAppliedPlanRequest message. Does not implicitly {@link cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.QueryAppliedPlanRequest
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IQueryAppliedPlanRequest} m QueryAppliedPlanRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAppliedPlanRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                        w.uint32(10).string(m.name);
                    return w;
                };

                /**
                 * Decodes a QueryAppliedPlanRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.QueryAppliedPlanRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.QueryAppliedPlanRequest} QueryAppliedPlanRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAppliedPlanRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.QueryAppliedPlanRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.name = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAppliedPlanRequest;
            })();

            v1beta1.QueryAppliedPlanResponse = (function () {

                /**
                 * Properties of a QueryAppliedPlanResponse.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IQueryAppliedPlanResponse
                 * @property {Long|null} [height] QueryAppliedPlanResponse height
                 */

                /**
                 * Constructs a new QueryAppliedPlanResponse.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a QueryAppliedPlanResponse.
                 * @implements IQueryAppliedPlanResponse
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IQueryAppliedPlanResponse=} [p] Properties to set
                 */
                function QueryAppliedPlanResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAppliedPlanResponse height.
                 * @member {Long} height
                 * @memberof cosmos.upgrade.v1beta1.QueryAppliedPlanResponse
                 * @instance
                 */
                QueryAppliedPlanResponse.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified QueryAppliedPlanResponse message. Does not implicitly {@link cosmos.upgrade.v1beta1.QueryAppliedPlanResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.QueryAppliedPlanResponse
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IQueryAppliedPlanResponse} m QueryAppliedPlanResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAppliedPlanResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                        w.uint32(8).int64(m.height);
                    return w;
                };

                /**
                 * Decodes a QueryAppliedPlanResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.QueryAppliedPlanResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.QueryAppliedPlanResponse} QueryAppliedPlanResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAppliedPlanResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.QueryAppliedPlanResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.height = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAppliedPlanResponse;
            })();

            v1beta1.QueryUpgradedConsensusStateRequest = (function () {

                /**
                 * Properties of a QueryUpgradedConsensusStateRequest.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IQueryUpgradedConsensusStateRequest
                 * @property {Long|null} [last_height] QueryUpgradedConsensusStateRequest last_height
                 */

                /**
                 * Constructs a new QueryUpgradedConsensusStateRequest.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a QueryUpgradedConsensusStateRequest.
                 * @implements IQueryUpgradedConsensusStateRequest
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IQueryUpgradedConsensusStateRequest=} [p] Properties to set
                 */
                function QueryUpgradedConsensusStateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryUpgradedConsensusStateRequest last_height.
                 * @member {Long} last_height
                 * @memberof cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest
                 * @instance
                 */
                QueryUpgradedConsensusStateRequest.prototype.last_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified QueryUpgradedConsensusStateRequest message. Does not implicitly {@link cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IQueryUpgradedConsensusStateRequest} m QueryUpgradedConsensusStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUpgradedConsensusStateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.last_height != null && Object.hasOwnProperty.call(m, "last_height"))
                        w.uint32(8).int64(m.last_height);
                    return w;
                };

                /**
                 * Decodes a QueryUpgradedConsensusStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUpgradedConsensusStateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.last_height = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryUpgradedConsensusStateRequest;
            })();

            v1beta1.QueryUpgradedConsensusStateResponse = (function () {

                /**
                 * Properties of a QueryUpgradedConsensusStateResponse.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IQueryUpgradedConsensusStateResponse
                 * @property {google.protobuf.IAny|null} [upgraded_consensus_state] QueryUpgradedConsensusStateResponse upgraded_consensus_state
                 */

                /**
                 * Constructs a new QueryUpgradedConsensusStateResponse.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a QueryUpgradedConsensusStateResponse.
                 * @implements IQueryUpgradedConsensusStateResponse
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IQueryUpgradedConsensusStateResponse=} [p] Properties to set
                 */
                function QueryUpgradedConsensusStateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryUpgradedConsensusStateResponse upgraded_consensus_state.
                 * @member {google.protobuf.IAny|null|undefined} upgraded_consensus_state
                 * @memberof cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse
                 * @instance
                 */
                QueryUpgradedConsensusStateResponse.prototype.upgraded_consensus_state = null;

                /**
                 * Encodes the specified QueryUpgradedConsensusStateResponse message. Does not implicitly {@link cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IQueryUpgradedConsensusStateResponse} m QueryUpgradedConsensusStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUpgradedConsensusStateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.upgraded_consensus_state != null && Object.hasOwnProperty.call(m, "upgraded_consensus_state"))
                        $root.google.protobuf.Any.encode(m.upgraded_consensus_state, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryUpgradedConsensusStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUpgradedConsensusStateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.upgraded_consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryUpgradedConsensusStateResponse;
            })();

            return v1beta1;
        })();

        return upgrade;
    })();

    cosmos.vesting = (function () {

        /**
         * Namespace vesting.
         * @memberof cosmos
         * @namespace
         */
        const vesting = {};

        vesting.v1beta1 = (function () {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.vesting
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.BaseVestingAccount = (function () {

                /**
                 * Properties of a BaseVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IBaseVestingAccount
                 * @property {cosmos.auth.v1beta1.IBaseAccount|null} [base_account] BaseVestingAccount base_account
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [original_vesting] BaseVestingAccount original_vesting
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [delegated_free] BaseVestingAccount delegated_free
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [delegated_vesting] BaseVestingAccount delegated_vesting
                 * @property {Long|null} [end_time] BaseVestingAccount end_time
                 */

                /**
                 * Constructs a new BaseVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a BaseVestingAccount.
                 * @implements IBaseVestingAccount
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IBaseVestingAccount=} [p] Properties to set
                 */
                function BaseVestingAccount(p) {
                    this.original_vesting = [];
                    this.delegated_free = [];
                    this.delegated_vesting = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BaseVestingAccount base_account.
                 * @member {cosmos.auth.v1beta1.IBaseAccount|null|undefined} base_account
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @instance
                 */
                BaseVestingAccount.prototype.base_account = null;

                /**
                 * BaseVestingAccount original_vesting.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} original_vesting
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @instance
                 */
                BaseVestingAccount.prototype.original_vesting = $util.emptyArray;

                /**
                 * BaseVestingAccount delegated_free.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} delegated_free
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @instance
                 */
                BaseVestingAccount.prototype.delegated_free = $util.emptyArray;

                /**
                 * BaseVestingAccount delegated_vesting.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} delegated_vesting
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @instance
                 */
                BaseVestingAccount.prototype.delegated_vesting = $util.emptyArray;

                /**
                 * BaseVestingAccount end_time.
                 * @member {Long} end_time
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @instance
                 */
                BaseVestingAccount.prototype.end_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified BaseVestingAccount message. Does not implicitly {@link cosmos.vesting.v1beta1.BaseVestingAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @static
                 * @param {cosmos.vesting.v1beta1.IBaseVestingAccount} m BaseVestingAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BaseVestingAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_account != null && Object.hasOwnProperty.call(m, "base_account"))
                        $root.cosmos.auth.v1beta1.BaseAccount.encode(m.base_account, w.uint32(10).fork()).ldelim();
                    if (m.original_vesting != null && m.original_vesting.length) {
                        for (var i = 0; i < m.original_vesting.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.original_vesting[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.delegated_free != null && m.delegated_free.length) {
                        for (var i = 0; i < m.delegated_free.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.delegated_free[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.delegated_vesting != null && m.delegated_vesting.length) {
                        for (var i = 0; i < m.delegated_vesting.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.delegated_vesting[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.end_time != null && Object.hasOwnProperty.call(m, "end_time"))
                        w.uint32(40).int64(m.end_time);
                    return w;
                };

                /**
                 * Decodes a BaseVestingAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.BaseVestingAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.BaseVestingAccount} BaseVestingAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BaseVestingAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.BaseVestingAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_account = $root.cosmos.auth.v1beta1.BaseAccount.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.original_vesting && m.original_vesting.length))
                                    m.original_vesting = [];
                                m.original_vesting.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.delegated_free && m.delegated_free.length))
                                    m.delegated_free = [];
                                m.delegated_free.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 4:
                                if (!(m.delegated_vesting && m.delegated_vesting.length))
                                    m.delegated_vesting = [];
                                m.delegated_vesting.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 5:
                                m.end_time = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BaseVestingAccount;
            })();

            v1beta1.ContinuousVestingAccount = (function () {

                /**
                 * Properties of a ContinuousVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IContinuousVestingAccount
                 * @property {cosmos.vesting.v1beta1.IBaseVestingAccount|null} [base_vesting_account] ContinuousVestingAccount base_vesting_account
                 * @property {Long|null} [start_time] ContinuousVestingAccount start_time
                 */

                /**
                 * Constructs a new ContinuousVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a ContinuousVestingAccount.
                 * @implements IContinuousVestingAccount
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IContinuousVestingAccount=} [p] Properties to set
                 */
                function ContinuousVestingAccount(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ContinuousVestingAccount base_vesting_account.
                 * @member {cosmos.vesting.v1beta1.IBaseVestingAccount|null|undefined} base_vesting_account
                 * @memberof cosmos.vesting.v1beta1.ContinuousVestingAccount
                 * @instance
                 */
                ContinuousVestingAccount.prototype.base_vesting_account = null;

                /**
                 * ContinuousVestingAccount start_time.
                 * @member {Long} start_time
                 * @memberof cosmos.vesting.v1beta1.ContinuousVestingAccount
                 * @instance
                 */
                ContinuousVestingAccount.prototype.start_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified ContinuousVestingAccount message. Does not implicitly {@link cosmos.vesting.v1beta1.ContinuousVestingAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.ContinuousVestingAccount
                 * @static
                 * @param {cosmos.vesting.v1beta1.IContinuousVestingAccount} m ContinuousVestingAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContinuousVestingAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_vesting_account != null && Object.hasOwnProperty.call(m, "base_vesting_account"))
                        $root.cosmos.vesting.v1beta1.BaseVestingAccount.encode(m.base_vesting_account, w.uint32(10).fork()).ldelim();
                    if (m.start_time != null && Object.hasOwnProperty.call(m, "start_time"))
                        w.uint32(16).int64(m.start_time);
                    return w;
                };

                /**
                 * Decodes a ContinuousVestingAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.ContinuousVestingAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.ContinuousVestingAccount} ContinuousVestingAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContinuousVestingAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.ContinuousVestingAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_vesting_account = $root.cosmos.vesting.v1beta1.BaseVestingAccount.decode(r, r.uint32());
                                break;
                            case 2:
                                m.start_time = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ContinuousVestingAccount;
            })();

            v1beta1.DelayedVestingAccount = (function () {

                /**
                 * Properties of a DelayedVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IDelayedVestingAccount
                 * @property {cosmos.vesting.v1beta1.IBaseVestingAccount|null} [base_vesting_account] DelayedVestingAccount base_vesting_account
                 */

                /**
                 * Constructs a new DelayedVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a DelayedVestingAccount.
                 * @implements IDelayedVestingAccount
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IDelayedVestingAccount=} [p] Properties to set
                 */
                function DelayedVestingAccount(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DelayedVestingAccount base_vesting_account.
                 * @member {cosmos.vesting.v1beta1.IBaseVestingAccount|null|undefined} base_vesting_account
                 * @memberof cosmos.vesting.v1beta1.DelayedVestingAccount
                 * @instance
                 */
                DelayedVestingAccount.prototype.base_vesting_account = null;

                /**
                 * Encodes the specified DelayedVestingAccount message. Does not implicitly {@link cosmos.vesting.v1beta1.DelayedVestingAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.DelayedVestingAccount
                 * @static
                 * @param {cosmos.vesting.v1beta1.IDelayedVestingAccount} m DelayedVestingAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DelayedVestingAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_vesting_account != null && Object.hasOwnProperty.call(m, "base_vesting_account"))
                        $root.cosmos.vesting.v1beta1.BaseVestingAccount.encode(m.base_vesting_account, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a DelayedVestingAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.DelayedVestingAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.DelayedVestingAccount} DelayedVestingAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DelayedVestingAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.DelayedVestingAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_vesting_account = $root.cosmos.vesting.v1beta1.BaseVestingAccount.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return DelayedVestingAccount;
            })();

            v1beta1.Period = (function () {

                /**
                 * Properties of a Period.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IPeriod
                 * @property {Long|null} [length] Period length
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] Period amount
                 */

                /**
                 * Constructs a new Period.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a Period.
                 * @implements IPeriod
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IPeriod=} [p] Properties to set
                 */
                function Period(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Period length.
                 * @member {Long} length
                 * @memberof cosmos.vesting.v1beta1.Period
                 * @instance
                 */
                Period.prototype.length = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Period amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.vesting.v1beta1.Period
                 * @instance
                 */
                Period.prototype.amount = $util.emptyArray;

                /**
                 * Encodes the specified Period message. Does not implicitly {@link cosmos.vesting.v1beta1.Period.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.Period
                 * @static
                 * @param {cosmos.vesting.v1beta1.IPeriod} m Period message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Period.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.length != null && Object.hasOwnProperty.call(m, "length"))
                        w.uint32(8).int64(m.length);
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Period message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.Period
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.Period} Period
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Period.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.Period();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.length = r.int64();
                                break;
                            case 2:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Period;
            })();

            v1beta1.PeriodicVestingAccount = (function () {

                /**
                 * Properties of a PeriodicVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IPeriodicVestingAccount
                 * @property {cosmos.vesting.v1beta1.IBaseVestingAccount|null} [base_vesting_account] PeriodicVestingAccount base_vesting_account
                 * @property {Long|null} [start_time] PeriodicVestingAccount start_time
                 * @property {Array.<cosmos.vesting.v1beta1.IPeriod>|null} [vesting_periods] PeriodicVestingAccount vesting_periods
                 */

                /**
                 * Constructs a new PeriodicVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a PeriodicVestingAccount.
                 * @implements IPeriodicVestingAccount
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IPeriodicVestingAccount=} [p] Properties to set
                 */
                function PeriodicVestingAccount(p) {
                    this.vesting_periods = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * PeriodicVestingAccount base_vesting_account.
                 * @member {cosmos.vesting.v1beta1.IBaseVestingAccount|null|undefined} base_vesting_account
                 * @memberof cosmos.vesting.v1beta1.PeriodicVestingAccount
                 * @instance
                 */
                PeriodicVestingAccount.prototype.base_vesting_account = null;

                /**
                 * PeriodicVestingAccount start_time.
                 * @member {Long} start_time
                 * @memberof cosmos.vesting.v1beta1.PeriodicVestingAccount
                 * @instance
                 */
                PeriodicVestingAccount.prototype.start_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * PeriodicVestingAccount vesting_periods.
                 * @member {Array.<cosmos.vesting.v1beta1.IPeriod>} vesting_periods
                 * @memberof cosmos.vesting.v1beta1.PeriodicVestingAccount
                 * @instance
                 */
                PeriodicVestingAccount.prototype.vesting_periods = $util.emptyArray;

                /**
                 * Encodes the specified PeriodicVestingAccount message. Does not implicitly {@link cosmos.vesting.v1beta1.PeriodicVestingAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.PeriodicVestingAccount
                 * @static
                 * @param {cosmos.vesting.v1beta1.IPeriodicVestingAccount} m PeriodicVestingAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PeriodicVestingAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_vesting_account != null && Object.hasOwnProperty.call(m, "base_vesting_account"))
                        $root.cosmos.vesting.v1beta1.BaseVestingAccount.encode(m.base_vesting_account, w.uint32(10).fork()).ldelim();
                    if (m.start_time != null && Object.hasOwnProperty.call(m, "start_time"))
                        w.uint32(16).int64(m.start_time);
                    if (m.vesting_periods != null && m.vesting_periods.length) {
                        for (var i = 0; i < m.vesting_periods.length; ++i)
                            $root.cosmos.vesting.v1beta1.Period.encode(m.vesting_periods[i], w.uint32(26).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a PeriodicVestingAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.PeriodicVestingAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.PeriodicVestingAccount} PeriodicVestingAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PeriodicVestingAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.PeriodicVestingAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_vesting_account = $root.cosmos.vesting.v1beta1.BaseVestingAccount.decode(r, r.uint32());
                                break;
                            case 2:
                                m.start_time = r.int64();
                                break;
                            case 3:
                                if (!(m.vesting_periods && m.vesting_periods.length))
                                    m.vesting_periods = [];
                                m.vesting_periods.push($root.cosmos.vesting.v1beta1.Period.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return PeriodicVestingAccount;
            })();

            v1beta1.MsgCreateVestingAccount = (function () {

                /**
                 * Properties of a MsgCreateVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IMsgCreateVestingAccount
                 * @property {string|null} [from_address] MsgCreateVestingAccount from_address
                 * @property {string|null} [to_address] MsgCreateVestingAccount to_address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] MsgCreateVestingAccount amount
                 * @property {Long|null} [end_time] MsgCreateVestingAccount end_time
                 * @property {boolean|null} [delayed] MsgCreateVestingAccount delayed
                 */

                /**
                 * Constructs a new MsgCreateVestingAccount.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a MsgCreateVestingAccount.
                 * @implements IMsgCreateVestingAccount
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IMsgCreateVestingAccount=} [p] Properties to set
                 */
                function MsgCreateVestingAccount(p) {
                    this.amount = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgCreateVestingAccount from_address.
                 * @member {string} from_address
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @instance
                 */
                MsgCreateVestingAccount.prototype.from_address = "";

                /**
                 * MsgCreateVestingAccount to_address.
                 * @member {string} to_address
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @instance
                 */
                MsgCreateVestingAccount.prototype.to_address = "";

                /**
                 * MsgCreateVestingAccount amount.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} amount
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @instance
                 */
                MsgCreateVestingAccount.prototype.amount = $util.emptyArray;

                /**
                 * MsgCreateVestingAccount end_time.
                 * @member {Long} end_time
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @instance
                 */
                MsgCreateVestingAccount.prototype.end_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * MsgCreateVestingAccount delayed.
                 * @member {boolean} delayed
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @instance
                 */
                MsgCreateVestingAccount.prototype.delayed = false;

                /**
                 * Encodes the specified MsgCreateVestingAccount message. Does not implicitly {@link cosmos.vesting.v1beta1.MsgCreateVestingAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @static
                 * @param {cosmos.vesting.v1beta1.IMsgCreateVestingAccount} m MsgCreateVestingAccount message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateVestingAccount.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.from_address != null && Object.hasOwnProperty.call(m, "from_address"))
                        w.uint32(10).string(m.from_address);
                    if (m.to_address != null && Object.hasOwnProperty.call(m, "to_address"))
                        w.uint32(18).string(m.to_address);
                    if (m.amount != null && m.amount.length) {
                        for (var i = 0; i < m.amount.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.amount[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.end_time != null && Object.hasOwnProperty.call(m, "end_time"))
                        w.uint32(32).int64(m.end_time);
                    if (m.delayed != null && Object.hasOwnProperty.call(m, "delayed"))
                        w.uint32(40).bool(m.delayed);
                    return w;
                };

                /**
                 * Decodes a MsgCreateVestingAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.MsgCreateVestingAccount} MsgCreateVestingAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateVestingAccount.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.MsgCreateVestingAccount();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.from_address = r.string();
                                break;
                            case 2:
                                m.to_address = r.string();
                                break;
                            case 3:
                                if (!(m.amount && m.amount.length))
                                    m.amount = [];
                                m.amount.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 4:
                                m.end_time = r.int64();
                                break;
                            case 5:
                                m.delayed = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateVestingAccount;
            })();

            v1beta1.MsgCreateVestingAccountResponse = (function () {

                /**
                 * Properties of a MsgCreateVestingAccountResponse.
                 * @memberof cosmos.vesting.v1beta1
                 * @interface IMsgCreateVestingAccountResponse
                 */

                /**
                 * Constructs a new MsgCreateVestingAccountResponse.
                 * @memberof cosmos.vesting.v1beta1
                 * @classdesc Represents a MsgCreateVestingAccountResponse.
                 * @implements IMsgCreateVestingAccountResponse
                 * @constructor
                 * @param {cosmos.vesting.v1beta1.IMsgCreateVestingAccountResponse=} [p] Properties to set
                 */
                function MsgCreateVestingAccountResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MsgCreateVestingAccountResponse message. Does not implicitly {@link cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse
                 * @static
                 * @param {cosmos.vesting.v1beta1.IMsgCreateVestingAccountResponse} m MsgCreateVestingAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateVestingAccountResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MsgCreateVestingAccountResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse} MsgCreateVestingAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateVestingAccountResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateVestingAccountResponse;
            })();

            return v1beta1;
        })();

        return vesting;
    })();

    return cosmos;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function () {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.Any = (function () {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [p] Properties to set
             */
            function Any(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} m Any message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.type_url != null && Object.hasOwnProperty.call(m, "type_url"))
                    w.uint32(10).string(m.type_url);
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(18).bytes(m.value);
                return w;
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Any();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.type_url = r.string();
                            break;
                        case 2:
                            m.value = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Any;
        })();

        protobuf.FileDescriptorSet = (function () {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [p] Properties to set
             */
            function FileDescriptorSet(p) {
                this.file = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} m FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.file != null && m.file.length) {
                    for (var i = 0; i < m.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(m.file[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FileDescriptorSet();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.file && m.file.length))
                                m.file = [];
                            m.file.push($root.google.protobuf.FileDescriptorProto.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function () {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [p] Properties to set
             */
            function FileDescriptorProto(p) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} m FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m["package"] != null && Object.hasOwnProperty.call(m, "package"))
                    w.uint32(18).string(m["package"]);
                if (m.dependency != null && m.dependency.length) {
                    for (var i = 0; i < m.dependency.length; ++i)
                        w.uint32(26).string(m.dependency[i]);
                }
                if (m.message_type != null && m.message_type.length) {
                    for (var i = 0; i < m.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(m.message_type[i], w.uint32(34).fork()).ldelim();
                }
                if (m.enum_type != null && m.enum_type.length) {
                    for (var i = 0; i < m.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(m.enum_type[i], w.uint32(42).fork()).ldelim();
                }
                if (m.service != null && m.service.length) {
                    for (var i = 0; i < m.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(m.service[i], w.uint32(50).fork()).ldelim();
                }
                if (m.extension != null && m.extension.length) {
                    for (var i = 0; i < m.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(m.extension[i], w.uint32(58).fork()).ldelim();
                }
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.FileOptions.encode(m.options, w.uint32(66).fork()).ldelim();
                if (m.source_code_info != null && Object.hasOwnProperty.call(m, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(m.source_code_info, w.uint32(74).fork()).ldelim();
                if (m.public_dependency != null && m.public_dependency.length) {
                    for (var i = 0; i < m.public_dependency.length; ++i)
                        w.uint32(80).int32(m.public_dependency[i]);
                }
                if (m.weak_dependency != null && m.weak_dependency.length) {
                    for (var i = 0; i < m.weak_dependency.length; ++i)
                        w.uint32(88).int32(m.weak_dependency[i]);
                }
                if (m.syntax != null && Object.hasOwnProperty.call(m, "syntax"))
                    w.uint32(98).string(m.syntax);
                return w;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FileDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m["package"] = r.string();
                            break;
                        case 3:
                            if (!(m.dependency && m.dependency.length))
                                m.dependency = [];
                            m.dependency.push(r.string());
                            break;
                        case 10:
                            if (!(m.public_dependency && m.public_dependency.length))
                                m.public_dependency = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2)
                                    m.public_dependency.push(r.int32());
                            } else
                                m.public_dependency.push(r.int32());
                            break;
                        case 11:
                            if (!(m.weak_dependency && m.weak_dependency.length))
                                m.weak_dependency = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2)
                                    m.weak_dependency.push(r.int32());
                            } else
                                m.weak_dependency.push(r.int32());
                            break;
                        case 4:
                            if (!(m.message_type && m.message_type.length))
                                m.message_type = [];
                            m.message_type.push($root.google.protobuf.DescriptorProto.decode(r, r.uint32()));
                            break;
                        case 5:
                            if (!(m.enum_type && m.enum_type.length))
                                m.enum_type = [];
                            m.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 6:
                            if (!(m.service && m.service.length))
                                m.service = [];
                            m.service.push($root.google.protobuf.ServiceDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 7:
                            if (!(m.extension && m.extension.length))
                                m.extension = [];
                            m.extension.push($root.google.protobuf.FieldDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 8:
                            m.options = $root.google.protobuf.FileOptions.decode(r, r.uint32());
                            break;
                        case 9:
                            m.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(r, r.uint32());
                            break;
                        case 12:
                            m.syntax = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function () {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [p] Properties to set
             */
            function DescriptorProto(p) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} m DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.field != null && m.field.length) {
                    for (var i = 0; i < m.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(m.field[i], w.uint32(18).fork()).ldelim();
                }
                if (m.nested_type != null && m.nested_type.length) {
                    for (var i = 0; i < m.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(m.nested_type[i], w.uint32(26).fork()).ldelim();
                }
                if (m.enum_type != null && m.enum_type.length) {
                    for (var i = 0; i < m.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(m.enum_type[i], w.uint32(34).fork()).ldelim();
                }
                if (m.extension_range != null && m.extension_range.length) {
                    for (var i = 0; i < m.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(m.extension_range[i], w.uint32(42).fork()).ldelim();
                }
                if (m.extension != null && m.extension.length) {
                    for (var i = 0; i < m.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(m.extension[i], w.uint32(50).fork()).ldelim();
                }
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.MessageOptions.encode(m.options, w.uint32(58).fork()).ldelim();
                if (m.oneof_decl != null && m.oneof_decl.length) {
                    for (var i = 0; i < m.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(m.oneof_decl[i], w.uint32(66).fork()).ldelim();
                }
                if (m.reserved_range != null && m.reserved_range.length) {
                    for (var i = 0; i < m.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(m.reserved_range[i], w.uint32(74).fork()).ldelim();
                }
                if (m.reserved_name != null && m.reserved_name.length) {
                    for (var i = 0; i < m.reserved_name.length; ++i)
                        w.uint32(82).string(m.reserved_name[i]);
                }
                return w;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            if (!(m.field && m.field.length))
                                m.field = [];
                            m.field.push($root.google.protobuf.FieldDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 6:
                            if (!(m.extension && m.extension.length))
                                m.extension = [];
                            m.extension.push($root.google.protobuf.FieldDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 3:
                            if (!(m.nested_type && m.nested_type.length))
                                m.nested_type = [];
                            m.nested_type.push($root.google.protobuf.DescriptorProto.decode(r, r.uint32()));
                            break;
                        case 4:
                            if (!(m.enum_type && m.enum_type.length))
                                m.enum_type = [];
                            m.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 5:
                            if (!(m.extension_range && m.extension_range.length))
                                m.extension_range = [];
                            m.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(r, r.uint32()));
                            break;
                        case 8:
                            if (!(m.oneof_decl && m.oneof_decl.length))
                                m.oneof_decl = [];
                            m.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 7:
                            m.options = $root.google.protobuf.MessageOptions.decode(r, r.uint32());
                            break;
                        case 9:
                            if (!(m.reserved_range && m.reserved_range.length))
                                m.reserved_range = [];
                            m.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(r, r.uint32()));
                            break;
                        case 10:
                            if (!(m.reserved_name && m.reserved_name.length))
                                m.reserved_name = [];
                            m.reserved_name.push(r.string());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            DescriptorProto.ExtensionRange = (function () {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [p] Properties to set
                 */
                function ExtensionRange(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} m ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.start != null && Object.hasOwnProperty.call(m, "start"))
                        w.uint32(8).int32(m.start);
                    if (m.end != null && Object.hasOwnProperty.call(m, "end"))
                        w.uint32(16).int32(m.end);
                    return w;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.start = r.int32();
                                break;
                            case 2:
                                m.end = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function () {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [p] Properties to set
                 */
                function ReservedRange(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} m ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.start != null && Object.hasOwnProperty.call(m, "start"))
                        w.uint32(8).int32(m.start);
                    if (m.end != null && Object.hasOwnProperty.call(m, "end"))
                        w.uint32(16).int32(m.end);
                    return w;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.start = r.int32();
                                break;
                            case 2:
                                m.end = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function () {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [p] Properties to set
             */
            function FieldDescriptorProto(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} m FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.extendee != null && Object.hasOwnProperty.call(m, "extendee"))
                    w.uint32(18).string(m.extendee);
                if (m.number != null && Object.hasOwnProperty.call(m, "number"))
                    w.uint32(24).int32(m.number);
                if (m.label != null && Object.hasOwnProperty.call(m, "label"))
                    w.uint32(32).int32(m.label);
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(40).int32(m.type);
                if (m.type_name != null && Object.hasOwnProperty.call(m, "type_name"))
                    w.uint32(50).string(m.type_name);
                if (m.default_value != null && Object.hasOwnProperty.call(m, "default_value"))
                    w.uint32(58).string(m.default_value);
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.FieldOptions.encode(m.options, w.uint32(66).fork()).ldelim();
                if (m.oneof_index != null && Object.hasOwnProperty.call(m, "oneof_index"))
                    w.uint32(72).int32(m.oneof_index);
                if (m.json_name != null && Object.hasOwnProperty.call(m, "json_name"))
                    w.uint32(82).string(m.json_name);
                return w;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FieldDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 3:
                            m.number = r.int32();
                            break;
                        case 4:
                            m.label = r.int32();
                            break;
                        case 5:
                            m.type = r.int32();
                            break;
                        case 6:
                            m.type_name = r.string();
                            break;
                        case 2:
                            m.extendee = r.string();
                            break;
                        case 7:
                            m.default_value = r.string();
                            break;
                        case 9:
                            m.oneof_index = r.int32();
                            break;
                        case 10:
                            m.json_name = r.string();
                            break;
                        case 8:
                            m.options = $root.google.protobuf.FieldOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function () {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [p] Properties to set
             */
            function OneofDescriptorProto(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} m OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.OneofOptions.encode(m.options, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.OneofDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.options = $root.google.protobuf.OneofOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function () {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [p] Properties to set
             */
            function EnumDescriptorProto(p) {
                this.value = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} m EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.value != null && m.value.length) {
                    for (var i = 0; i < m.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(m.value[i], w.uint32(18).fork()).ldelim();
                }
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.EnumOptions.encode(m.options, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            if (!(m.value && m.value.length))
                                m.value = [];
                            m.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.options = $root.google.protobuf.EnumOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function () {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [p] Properties to set
             */
            function EnumValueDescriptorProto(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} m EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.number != null && Object.hasOwnProperty.call(m, "number"))
                    w.uint32(16).int32(m.number);
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(m.options, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumValueDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.number = r.int32();
                            break;
                        case 3:
                            m.options = $root.google.protobuf.EnumValueOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function () {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [p] Properties to set
             */
            function ServiceDescriptorProto(p) {
                this.method = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} m ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.method != null && m.method.length) {
                    for (var i = 0; i < m.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(m.method[i], w.uint32(18).fork()).ldelim();
                }
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.ServiceOptions.encode(m.options, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.ServiceDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            if (!(m.method && m.method.length))
                                m.method = [];
                            m.method.push($root.google.protobuf.MethodDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.options = $root.google.protobuf.ServiceOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function () {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [p] Properties to set
             */
            function MethodDescriptorProto(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} m MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.input_type != null && Object.hasOwnProperty.call(m, "input_type"))
                    w.uint32(18).string(m.input_type);
                if (m.output_type != null && Object.hasOwnProperty.call(m, "output_type"))
                    w.uint32(26).string(m.output_type);
                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                    $root.google.protobuf.MethodOptions.encode(m.options, w.uint32(34).fork()).ldelim();
                if (m.client_streaming != null && Object.hasOwnProperty.call(m, "client_streaming"))
                    w.uint32(40).bool(m.client_streaming);
                if (m.server_streaming != null && Object.hasOwnProperty.call(m, "server_streaming"))
                    w.uint32(48).bool(m.server_streaming);
                return w;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.MethodDescriptorProto();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.input_type = r.string();
                            break;
                        case 3:
                            m.output_type = r.string();
                            break;
                        case 4:
                            m.options = $root.google.protobuf.MethodOptions.decode(r, r.uint32());
                            break;
                        case 5:
                            m.client_streaming = r.bool();
                            break;
                        case 6:
                            m.server_streaming = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function () {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
             * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
             * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
             * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
             * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
             * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
             * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
             * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
             * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
             * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
             * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
             * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
             * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
             * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
             * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
             * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
             * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
             * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
             * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
             * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
             * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
             * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
             * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
             * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
             * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
             * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
             * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
             * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
             * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [p] Properties to set
             */
            function FileOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = false;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FileOptions .gogoproto.goproto_getters_all.
             * @member {boolean} .gogoproto.goproto_getters_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_prefix_all.
             * @member {boolean} .gogoproto.goproto_enum_prefix_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_stringer_all.
             * @member {boolean} .gogoproto.goproto_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.verbose_equal_all.
             * @member {boolean} .gogoproto.verbose_equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;

            /**
             * FileOptions .gogoproto.face_all.
             * @member {boolean} .gogoproto.face_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.face_all"] = false;

            /**
             * FileOptions .gogoproto.gostring_all.
             * @member {boolean} .gogoproto.gostring_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gostring_all"] = false;

            /**
             * FileOptions .gogoproto.populate_all.
             * @member {boolean} .gogoproto.populate_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.populate_all"] = false;

            /**
             * FileOptions .gogoproto.stringer_all.
             * @member {boolean} .gogoproto.stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stringer_all"] = false;

            /**
             * FileOptions .gogoproto.onlyone_all.
             * @member {boolean} .gogoproto.onlyone_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.onlyone_all"] = false;

            /**
             * FileOptions .gogoproto.equal_all.
             * @member {boolean} .gogoproto.equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.equal_all"] = false;

            /**
             * FileOptions .gogoproto.description_all.
             * @member {boolean} .gogoproto.description_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.description_all"] = false;

            /**
             * FileOptions .gogoproto.testgen_all.
             * @member {boolean} .gogoproto.testgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.testgen_all"] = false;

            /**
             * FileOptions .gogoproto.benchgen_all.
             * @member {boolean} .gogoproto.benchgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.benchgen_all"] = false;

            /**
             * FileOptions .gogoproto.marshaler_all.
             * @member {boolean} .gogoproto.marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unmarshaler_all.
             * @member {boolean} .gogoproto.unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.stable_marshaler_all.
             * @member {boolean} .gogoproto.stable_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.sizer_all.
             * @member {boolean} .gogoproto.sizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.sizer_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_stringer_all.
             * @member {boolean} .gogoproto.goproto_enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.enum_stringer_all.
             * @member {boolean} .gogoproto.enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_marshaler_all.
             * @member {boolean} .gogoproto.unsafe_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_unmarshaler_all.
             * @member {boolean} .gogoproto.unsafe_unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_extensions_map_all.
             * @member {boolean} .gogoproto.goproto_extensions_map_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unrecognized_all.
             * @member {boolean} .gogoproto.goproto_unrecognized_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;

            /**
             * FileOptions .gogoproto.gogoproto_import.
             * @member {boolean} .gogoproto.gogoproto_import
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gogoproto_import"] = false;

            /**
             * FileOptions .gogoproto.protosizer_all.
             * @member {boolean} .gogoproto.protosizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.protosizer_all"] = false;

            /**
             * FileOptions .gogoproto.compare_all.
             * @member {boolean} .gogoproto.compare_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.compare_all"] = false;

            /**
             * FileOptions .gogoproto.typedecl_all.
             * @member {boolean} .gogoproto.typedecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.typedecl_all"] = false;

            /**
             * FileOptions .gogoproto.enumdecl_all.
             * @member {boolean} .gogoproto.enumdecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enumdecl_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_registration.
             * @member {boolean} .gogoproto.goproto_registration
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_registration"] = false;

            /**
             * FileOptions .gogoproto.messagename_all.
             * @member {boolean} .gogoproto.messagename_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.messagename_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_sizecache_all.
             * @member {boolean} .gogoproto.goproto_sizecache_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unkeyed_all.
             * @member {boolean} .gogoproto.goproto_unkeyed_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} m FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.java_package != null && Object.hasOwnProperty.call(m, "java_package"))
                    w.uint32(10).string(m.java_package);
                if (m.java_outer_classname != null && Object.hasOwnProperty.call(m, "java_outer_classname"))
                    w.uint32(66).string(m.java_outer_classname);
                if (m.optimize_for != null && Object.hasOwnProperty.call(m, "optimize_for"))
                    w.uint32(72).int32(m.optimize_for);
                if (m.java_multiple_files != null && Object.hasOwnProperty.call(m, "java_multiple_files"))
                    w.uint32(80).bool(m.java_multiple_files);
                if (m.go_package != null && Object.hasOwnProperty.call(m, "go_package"))
                    w.uint32(90).string(m.go_package);
                if (m.cc_generic_services != null && Object.hasOwnProperty.call(m, "cc_generic_services"))
                    w.uint32(128).bool(m.cc_generic_services);
                if (m.java_generic_services != null && Object.hasOwnProperty.call(m, "java_generic_services"))
                    w.uint32(136).bool(m.java_generic_services);
                if (m.py_generic_services != null && Object.hasOwnProperty.call(m, "py_generic_services"))
                    w.uint32(144).bool(m.py_generic_services);
                if (m.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(m, "java_generate_equals_and_hash"))
                    w.uint32(160).bool(m.java_generate_equals_and_hash);
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(184).bool(m.deprecated);
                if (m.java_string_check_utf8 != null && Object.hasOwnProperty.call(m, "java_string_check_utf8"))
                    w.uint32(216).bool(m.java_string_check_utf8);
                if (m.cc_enable_arenas != null && Object.hasOwnProperty.call(m, "cc_enable_arenas"))
                    w.uint32(248).bool(m.cc_enable_arenas);
                if (m.objc_class_prefix != null && Object.hasOwnProperty.call(m, "objc_class_prefix"))
                    w.uint32(290).string(m.objc_class_prefix);
                if (m.csharp_namespace != null && Object.hasOwnProperty.call(m, "csharp_namespace"))
                    w.uint32(298).string(m.csharp_namespace);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                if (m[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_getters_all"))
                    w.uint32(504008).bool(m[".gogoproto.goproto_getters_all"]);
                if (m[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_enum_prefix_all"))
                    w.uint32(504016).bool(m[".gogoproto.goproto_enum_prefix_all"]);
                if (m[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_stringer_all"))
                    w.uint32(504024).bool(m[".gogoproto.goproto_stringer_all"]);
                if (m[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.verbose_equal_all"))
                    w.uint32(504032).bool(m[".gogoproto.verbose_equal_all"]);
                if (m[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.face_all"))
                    w.uint32(504040).bool(m[".gogoproto.face_all"]);
                if (m[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.gostring_all"))
                    w.uint32(504048).bool(m[".gogoproto.gostring_all"]);
                if (m[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.populate_all"))
                    w.uint32(504056).bool(m[".gogoproto.populate_all"]);
                if (m[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.stringer_all"))
                    w.uint32(504064).bool(m[".gogoproto.stringer_all"]);
                if (m[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.onlyone_all"))
                    w.uint32(504072).bool(m[".gogoproto.onlyone_all"]);
                if (m[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.equal_all"))
                    w.uint32(504104).bool(m[".gogoproto.equal_all"]);
                if (m[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.description_all"))
                    w.uint32(504112).bool(m[".gogoproto.description_all"]);
                if (m[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.testgen_all"))
                    w.uint32(504120).bool(m[".gogoproto.testgen_all"]);
                if (m[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.benchgen_all"))
                    w.uint32(504128).bool(m[".gogoproto.benchgen_all"]);
                if (m[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.marshaler_all"))
                    w.uint32(504136).bool(m[".gogoproto.marshaler_all"]);
                if (m[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.unmarshaler_all"))
                    w.uint32(504144).bool(m[".gogoproto.unmarshaler_all"]);
                if (m[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.stable_marshaler_all"))
                    w.uint32(504152).bool(m[".gogoproto.stable_marshaler_all"]);
                if (m[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.sizer_all"))
                    w.uint32(504160).bool(m[".gogoproto.sizer_all"]);
                if (m[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_enum_stringer_all"))
                    w.uint32(504168).bool(m[".gogoproto.goproto_enum_stringer_all"]);
                if (m[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.enum_stringer_all"))
                    w.uint32(504176).bool(m[".gogoproto.enum_stringer_all"]);
                if (m[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.unsafe_marshaler_all"))
                    w.uint32(504184).bool(m[".gogoproto.unsafe_marshaler_all"]);
                if (m[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.unsafe_unmarshaler_all"))
                    w.uint32(504192).bool(m[".gogoproto.unsafe_unmarshaler_all"]);
                if (m[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_extensions_map_all"))
                    w.uint32(504200).bool(m[".gogoproto.goproto_extensions_map_all"]);
                if (m[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_unrecognized_all"))
                    w.uint32(504208).bool(m[".gogoproto.goproto_unrecognized_all"]);
                if (m[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(m, ".gogoproto.gogoproto_import"))
                    w.uint32(504216).bool(m[".gogoproto.gogoproto_import"]);
                if (m[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.protosizer_all"))
                    w.uint32(504224).bool(m[".gogoproto.protosizer_all"]);
                if (m[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.compare_all"))
                    w.uint32(504232).bool(m[".gogoproto.compare_all"]);
                if (m[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.typedecl_all"))
                    w.uint32(504240).bool(m[".gogoproto.typedecl_all"]);
                if (m[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.enumdecl_all"))
                    w.uint32(504248).bool(m[".gogoproto.enumdecl_all"]);
                if (m[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_registration"))
                    w.uint32(504256).bool(m[".gogoproto.goproto_registration"]);
                if (m[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.messagename_all"))
                    w.uint32(504264).bool(m[".gogoproto.messagename_all"]);
                if (m[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_sizecache_all"))
                    w.uint32(504272).bool(m[".gogoproto.goproto_sizecache_all"]);
                if (m[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_unkeyed_all"))
                    w.uint32(504280).bool(m[".gogoproto.goproto_unkeyed_all"]);
                return w;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FileOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.java_package = r.string();
                            break;
                        case 8:
                            m.java_outer_classname = r.string();
                            break;
                        case 10:
                            m.java_multiple_files = r.bool();
                            break;
                        case 20:
                            m.java_generate_equals_and_hash = r.bool();
                            break;
                        case 27:
                            m.java_string_check_utf8 = r.bool();
                            break;
                        case 9:
                            m.optimize_for = r.int32();
                            break;
                        case 11:
                            m.go_package = r.string();
                            break;
                        case 16:
                            m.cc_generic_services = r.bool();
                            break;
                        case 17:
                            m.java_generic_services = r.bool();
                            break;
                        case 18:
                            m.py_generic_services = r.bool();
                            break;
                        case 23:
                            m.deprecated = r.bool();
                            break;
                        case 31:
                            m.cc_enable_arenas = r.bool();
                            break;
                        case 36:
                            m.objc_class_prefix = r.string();
                            break;
                        case 37:
                            m.csharp_namespace = r.string();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 63001:
                            m[".gogoproto.goproto_getters_all"] = r.bool();
                            break;
                        case 63002:
                            m[".gogoproto.goproto_enum_prefix_all"] = r.bool();
                            break;
                        case 63003:
                            m[".gogoproto.goproto_stringer_all"] = r.bool();
                            break;
                        case 63004:
                            m[".gogoproto.verbose_equal_all"] = r.bool();
                            break;
                        case 63005:
                            m[".gogoproto.face_all"] = r.bool();
                            break;
                        case 63006:
                            m[".gogoproto.gostring_all"] = r.bool();
                            break;
                        case 63007:
                            m[".gogoproto.populate_all"] = r.bool();
                            break;
                        case 63008:
                            m[".gogoproto.stringer_all"] = r.bool();
                            break;
                        case 63009:
                            m[".gogoproto.onlyone_all"] = r.bool();
                            break;
                        case 63013:
                            m[".gogoproto.equal_all"] = r.bool();
                            break;
                        case 63014:
                            m[".gogoproto.description_all"] = r.bool();
                            break;
                        case 63015:
                            m[".gogoproto.testgen_all"] = r.bool();
                            break;
                        case 63016:
                            m[".gogoproto.benchgen_all"] = r.bool();
                            break;
                        case 63017:
                            m[".gogoproto.marshaler_all"] = r.bool();
                            break;
                        case 63018:
                            m[".gogoproto.unmarshaler_all"] = r.bool();
                            break;
                        case 63019:
                            m[".gogoproto.stable_marshaler_all"] = r.bool();
                            break;
                        case 63020:
                            m[".gogoproto.sizer_all"] = r.bool();
                            break;
                        case 63021:
                            m[".gogoproto.goproto_enum_stringer_all"] = r.bool();
                            break;
                        case 63022:
                            m[".gogoproto.enum_stringer_all"] = r.bool();
                            break;
                        case 63023:
                            m[".gogoproto.unsafe_marshaler_all"] = r.bool();
                            break;
                        case 63024:
                            m[".gogoproto.unsafe_unmarshaler_all"] = r.bool();
                            break;
                        case 63025:
                            m[".gogoproto.goproto_extensions_map_all"] = r.bool();
                            break;
                        case 63026:
                            m[".gogoproto.goproto_unrecognized_all"] = r.bool();
                            break;
                        case 63027:
                            m[".gogoproto.gogoproto_import"] = r.bool();
                            break;
                        case 63028:
                            m[".gogoproto.protosizer_all"] = r.bool();
                            break;
                        case 63029:
                            m[".gogoproto.compare_all"] = r.bool();
                            break;
                        case 63030:
                            m[".gogoproto.typedecl_all"] = r.bool();
                            break;
                        case 63031:
                            m[".gogoproto.enumdecl_all"] = r.bool();
                            break;
                        case 63032:
                            m[".gogoproto.goproto_registration"] = r.bool();
                            break;
                        case 63033:
                            m[".gogoproto.messagename_all"] = r.bool();
                            break;
                        case 63034:
                            m[".gogoproto.goproto_sizecache_all"] = r.bool();
                            break;
                        case 63035:
                            m[".gogoproto.goproto_unkeyed_all"] = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function () {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {string|null} [".cosmos_proto.interface_type"] MessageOptions .cosmos_proto.interface_type
             * @property {string|null} [".cosmos_proto.implements_interface"] MessageOptions .cosmos_proto.implements_interface
             * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
             * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
             * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
             * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
             * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
             * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
             * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
             * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
             * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
             * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
             * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
             * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
             * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
             * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
             * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
             * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
             * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
             * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
             * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
             * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
             * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
             * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
             * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
             * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
             * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [p] Properties to set
             */
            function MessageOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .cosmos_proto.interface_type.
             * @member {string} .cosmos_proto.interface_type
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos_proto.interface_type"] = "";

            /**
             * MessageOptions .cosmos_proto.implements_interface.
             * @member {string} .cosmos_proto.implements_interface
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos_proto.implements_interface"] = "";

            /**
             * MessageOptions .gogoproto.goproto_getters.
             * @member {boolean} .gogoproto.goproto_getters
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_getters"] = false;

            /**
             * MessageOptions .gogoproto.goproto_stringer.
             * @member {boolean} .gogoproto.goproto_stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;

            /**
             * MessageOptions .gogoproto.verbose_equal.
             * @member {boolean} .gogoproto.verbose_equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.verbose_equal"] = false;

            /**
             * MessageOptions .gogoproto.face.
             * @member {boolean} .gogoproto.face
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.face"] = false;

            /**
             * MessageOptions .gogoproto.gostring.
             * @member {boolean} .gogoproto.gostring
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.gostring"] = false;

            /**
             * MessageOptions .gogoproto.populate.
             * @member {boolean} .gogoproto.populate
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.populate"] = false;

            /**
             * MessageOptions .gogoproto.stringer.
             * @member {boolean} .gogoproto.stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stringer"] = false;

            /**
             * MessageOptions .gogoproto.onlyone.
             * @member {boolean} .gogoproto.onlyone
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.onlyone"] = false;

            /**
             * MessageOptions .gogoproto.equal.
             * @member {boolean} .gogoproto.equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.equal"] = false;

            /**
             * MessageOptions .gogoproto.description.
             * @member {boolean} .gogoproto.description
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.description"] = false;

            /**
             * MessageOptions .gogoproto.testgen.
             * @member {boolean} .gogoproto.testgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.testgen"] = false;

            /**
             * MessageOptions .gogoproto.benchgen.
             * @member {boolean} .gogoproto.benchgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.benchgen"] = false;

            /**
             * MessageOptions .gogoproto.marshaler.
             * @member {boolean} .gogoproto.marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unmarshaler.
             * @member {boolean} .gogoproto.unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.stable_marshaler.
             * @member {boolean} .gogoproto.stable_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.sizer.
             * @member {boolean} .gogoproto.sizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.sizer"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_marshaler.
             * @member {boolean} .gogoproto.unsafe_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_unmarshaler.
             * @member {boolean} .gogoproto.unsafe_unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.goproto_extensions_map.
             * @member {boolean} .gogoproto.goproto_extensions_map
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unrecognized.
             * @member {boolean} .gogoproto.goproto_unrecognized
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;

            /**
             * MessageOptions .gogoproto.protosizer.
             * @member {boolean} .gogoproto.protosizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.protosizer"] = false;

            /**
             * MessageOptions .gogoproto.compare.
             * @member {boolean} .gogoproto.compare
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.compare"] = false;

            /**
             * MessageOptions .gogoproto.typedecl.
             * @member {boolean} .gogoproto.typedecl
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.typedecl"] = false;

            /**
             * MessageOptions .gogoproto.messagename.
             * @member {boolean} .gogoproto.messagename
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.messagename"] = false;

            /**
             * MessageOptions .gogoproto.goproto_sizecache.
             * @member {boolean} .gogoproto.goproto_sizecache
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unkeyed.
             * @member {boolean} .gogoproto.goproto_unkeyed
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} m MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.message_set_wire_format != null && Object.hasOwnProperty.call(m, "message_set_wire_format"))
                    w.uint32(8).bool(m.message_set_wire_format);
                if (m.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(m, "no_standard_descriptor_accessor"))
                    w.uint32(16).bool(m.no_standard_descriptor_accessor);
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(24).bool(m.deprecated);
                if (m.map_entry != null && Object.hasOwnProperty.call(m, "map_entry"))
                    w.uint32(56).bool(m.map_entry);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                if (m[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_getters"))
                    w.uint32(512008).bool(m[".gogoproto.goproto_getters"]);
                if (m[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_stringer"))
                    w.uint32(512024).bool(m[".gogoproto.goproto_stringer"]);
                if (m[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(m, ".gogoproto.verbose_equal"))
                    w.uint32(512032).bool(m[".gogoproto.verbose_equal"]);
                if (m[".gogoproto.face"] != null && Object.hasOwnProperty.call(m, ".gogoproto.face"))
                    w.uint32(512040).bool(m[".gogoproto.face"]);
                if (m[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(m, ".gogoproto.gostring"))
                    w.uint32(512048).bool(m[".gogoproto.gostring"]);
                if (m[".gogoproto.populate"] != null && Object.hasOwnProperty.call(m, ".gogoproto.populate"))
                    w.uint32(512056).bool(m[".gogoproto.populate"]);
                if (m[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(m, ".gogoproto.onlyone"))
                    w.uint32(512072).bool(m[".gogoproto.onlyone"]);
                if (m[".gogoproto.equal"] != null && Object.hasOwnProperty.call(m, ".gogoproto.equal"))
                    w.uint32(512104).bool(m[".gogoproto.equal"]);
                if (m[".gogoproto.description"] != null && Object.hasOwnProperty.call(m, ".gogoproto.description"))
                    w.uint32(512112).bool(m[".gogoproto.description"]);
                if (m[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(m, ".gogoproto.testgen"))
                    w.uint32(512120).bool(m[".gogoproto.testgen"]);
                if (m[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(m, ".gogoproto.benchgen"))
                    w.uint32(512128).bool(m[".gogoproto.benchgen"]);
                if (m[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(m, ".gogoproto.marshaler"))
                    w.uint32(512136).bool(m[".gogoproto.marshaler"]);
                if (m[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(m, ".gogoproto.unmarshaler"))
                    w.uint32(512144).bool(m[".gogoproto.unmarshaler"]);
                if (m[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(m, ".gogoproto.stable_marshaler"))
                    w.uint32(512152).bool(m[".gogoproto.stable_marshaler"]);
                if (m[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.sizer"))
                    w.uint32(512160).bool(m[".gogoproto.sizer"]);
                if (m[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(m, ".gogoproto.unsafe_marshaler"))
                    w.uint32(512184).bool(m[".gogoproto.unsafe_marshaler"]);
                if (m[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(m, ".gogoproto.unsafe_unmarshaler"))
                    w.uint32(512192).bool(m[".gogoproto.unsafe_unmarshaler"]);
                if (m[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_extensions_map"))
                    w.uint32(512200).bool(m[".gogoproto.goproto_extensions_map"]);
                if (m[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_unrecognized"))
                    w.uint32(512208).bool(m[".gogoproto.goproto_unrecognized"]);
                if (m[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.protosizer"))
                    w.uint32(512224).bool(m[".gogoproto.protosizer"]);
                if (m[".gogoproto.compare"] != null && Object.hasOwnProperty.call(m, ".gogoproto.compare"))
                    w.uint32(512232).bool(m[".gogoproto.compare"]);
                if (m[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(m, ".gogoproto.typedecl"))
                    w.uint32(512240).bool(m[".gogoproto.typedecl"]);
                if (m[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(m, ".gogoproto.messagename"))
                    w.uint32(512264).bool(m[".gogoproto.messagename"]);
                if (m[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_sizecache"))
                    w.uint32(512272).bool(m[".gogoproto.goproto_sizecache"]);
                if (m[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_unkeyed"))
                    w.uint32(512280).bool(m[".gogoproto.goproto_unkeyed"]);
                if (m[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.stringer"))
                    w.uint32(536064).bool(m[".gogoproto.stringer"]);
                if (m[".cosmos_proto.interface_type"] != null && Object.hasOwnProperty.call(m, ".cosmos_proto.interface_type"))
                    w.uint32(744010).string(m[".cosmos_proto.interface_type"]);
                if (m[".cosmos_proto.implements_interface"] != null && Object.hasOwnProperty.call(m, ".cosmos_proto.implements_interface"))
                    w.uint32(744018).string(m[".cosmos_proto.implements_interface"]);
                return w;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.MessageOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.message_set_wire_format = r.bool();
                            break;
                        case 2:
                            m.no_standard_descriptor_accessor = r.bool();
                            break;
                        case 3:
                            m.deprecated = r.bool();
                            break;
                        case 7:
                            m.map_entry = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 93001:
                            m[".cosmos_proto.interface_type"] = r.string();
                            break;
                        case 93002:
                            m[".cosmos_proto.implements_interface"] = r.string();
                            break;
                        case 64001:
                            m[".gogoproto.goproto_getters"] = r.bool();
                            break;
                        case 64003:
                            m[".gogoproto.goproto_stringer"] = r.bool();
                            break;
                        case 64004:
                            m[".gogoproto.verbose_equal"] = r.bool();
                            break;
                        case 64005:
                            m[".gogoproto.face"] = r.bool();
                            break;
                        case 64006:
                            m[".gogoproto.gostring"] = r.bool();
                            break;
                        case 64007:
                            m[".gogoproto.populate"] = r.bool();
                            break;
                        case 67008:
                            m[".gogoproto.stringer"] = r.bool();
                            break;
                        case 64009:
                            m[".gogoproto.onlyone"] = r.bool();
                            break;
                        case 64013:
                            m[".gogoproto.equal"] = r.bool();
                            break;
                        case 64014:
                            m[".gogoproto.description"] = r.bool();
                            break;
                        case 64015:
                            m[".gogoproto.testgen"] = r.bool();
                            break;
                        case 64016:
                            m[".gogoproto.benchgen"] = r.bool();
                            break;
                        case 64017:
                            m[".gogoproto.marshaler"] = r.bool();
                            break;
                        case 64018:
                            m[".gogoproto.unmarshaler"] = r.bool();
                            break;
                        case 64019:
                            m[".gogoproto.stable_marshaler"] = r.bool();
                            break;
                        case 64020:
                            m[".gogoproto.sizer"] = r.bool();
                            break;
                        case 64023:
                            m[".gogoproto.unsafe_marshaler"] = r.bool();
                            break;
                        case 64024:
                            m[".gogoproto.unsafe_unmarshaler"] = r.bool();
                            break;
                        case 64025:
                            m[".gogoproto.goproto_extensions_map"] = r.bool();
                            break;
                        case 64026:
                            m[".gogoproto.goproto_unrecognized"] = r.bool();
                            break;
                        case 64028:
                            m[".gogoproto.protosizer"] = r.bool();
                            break;
                        case 64029:
                            m[".gogoproto.compare"] = r.bool();
                            break;
                        case 64030:
                            m[".gogoproto.typedecl"] = r.bool();
                            break;
                        case 64033:
                            m[".gogoproto.messagename"] = r.bool();
                            break;
                        case 64034:
                            m[".gogoproto.goproto_sizecache"] = r.bool();
                            break;
                        case 64035:
                            m[".gogoproto.goproto_unkeyed"] = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function () {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             * @property {string|null} [".cosmos_proto.accepts_interface"] FieldOptions .cosmos_proto.accepts_interface
             * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
             * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
             * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
             * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
             * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
             * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
             * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
             * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
             * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
             * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
             * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
             * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
             * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [p] Properties to set
             */
            function FieldOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FieldOptions .cosmos_proto.accepts_interface.
             * @member {string} .cosmos_proto.accepts_interface
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".cosmos_proto.accepts_interface"] = "";

            /**
             * FieldOptions .gogoproto.nullable.
             * @member {boolean} .gogoproto.nullable
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.nullable"] = false;

            /**
             * FieldOptions .gogoproto.embed.
             * @member {boolean} .gogoproto.embed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.embed"] = false;

            /**
             * FieldOptions .gogoproto.customtype.
             * @member {string} .gogoproto.customtype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customtype"] = "";

            /**
             * FieldOptions .gogoproto.customname.
             * @member {string} .gogoproto.customname
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customname"] = "";

            /**
             * FieldOptions .gogoproto.jsontag.
             * @member {string} .gogoproto.jsontag
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.jsontag"] = "";

            /**
             * FieldOptions .gogoproto.moretags.
             * @member {string} .gogoproto.moretags
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.moretags"] = "";

            /**
             * FieldOptions .gogoproto.casttype.
             * @member {string} .gogoproto.casttype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.casttype"] = "";

            /**
             * FieldOptions .gogoproto.castkey.
             * @member {string} .gogoproto.castkey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castkey"] = "";

            /**
             * FieldOptions .gogoproto.castvalue.
             * @member {string} .gogoproto.castvalue
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castvalue"] = "";

            /**
             * FieldOptions .gogoproto.stdtime.
             * @member {boolean} .gogoproto.stdtime
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdtime"] = false;

            /**
             * FieldOptions .gogoproto.stdduration.
             * @member {boolean} .gogoproto.stdduration
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdduration"] = false;

            /**
             * FieldOptions .gogoproto.wktpointer.
             * @member {boolean} .gogoproto.wktpointer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.wktpointer"] = false;

            /**
             * FieldOptions .gogoproto.castrepeated.
             * @member {string} .gogoproto.castrepeated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castrepeated"] = "";

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} m FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.ctype != null && Object.hasOwnProperty.call(m, "ctype"))
                    w.uint32(8).int32(m.ctype);
                if (m.packed != null && Object.hasOwnProperty.call(m, "packed"))
                    w.uint32(16).bool(m.packed);
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(24).bool(m.deprecated);
                if (m.lazy != null && Object.hasOwnProperty.call(m, "lazy"))
                    w.uint32(40).bool(m.lazy);
                if (m.jstype != null && Object.hasOwnProperty.call(m, "jstype"))
                    w.uint32(48).int32(m.jstype);
                if (m.weak != null && Object.hasOwnProperty.call(m, "weak"))
                    w.uint32(80).bool(m.weak);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                if (m[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(m, ".gogoproto.nullable"))
                    w.uint32(520008).bool(m[".gogoproto.nullable"]);
                if (m[".gogoproto.embed"] != null && Object.hasOwnProperty.call(m, ".gogoproto.embed"))
                    w.uint32(520016).bool(m[".gogoproto.embed"]);
                if (m[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(m, ".gogoproto.customtype"))
                    w.uint32(520026).string(m[".gogoproto.customtype"]);
                if (m[".gogoproto.customname"] != null && Object.hasOwnProperty.call(m, ".gogoproto.customname"))
                    w.uint32(520034).string(m[".gogoproto.customname"]);
                if (m[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(m, ".gogoproto.jsontag"))
                    w.uint32(520042).string(m[".gogoproto.jsontag"]);
                if (m[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(m, ".gogoproto.moretags"))
                    w.uint32(520050).string(m[".gogoproto.moretags"]);
                if (m[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(m, ".gogoproto.casttype"))
                    w.uint32(520058).string(m[".gogoproto.casttype"]);
                if (m[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(m, ".gogoproto.castkey"))
                    w.uint32(520066).string(m[".gogoproto.castkey"]);
                if (m[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(m, ".gogoproto.castvalue"))
                    w.uint32(520074).string(m[".gogoproto.castvalue"]);
                if (m[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(m, ".gogoproto.stdtime"))
                    w.uint32(520080).bool(m[".gogoproto.stdtime"]);
                if (m[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(m, ".gogoproto.stdduration"))
                    w.uint32(520088).bool(m[".gogoproto.stdduration"]);
                if (m[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.wktpointer"))
                    w.uint32(520096).bool(m[".gogoproto.wktpointer"]);
                if (m[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(m, ".gogoproto.castrepeated"))
                    w.uint32(520106).string(m[".gogoproto.castrepeated"]);
                if (m[".cosmos_proto.accepts_interface"] != null && Object.hasOwnProperty.call(m, ".cosmos_proto.accepts_interface"))
                    w.uint32(744010).string(m[".cosmos_proto.accepts_interface"]);
                return w;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FieldOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.ctype = r.int32();
                            break;
                        case 2:
                            m.packed = r.bool();
                            break;
                        case 6:
                            m.jstype = r.int32();
                            break;
                        case 5:
                            m.lazy = r.bool();
                            break;
                        case 3:
                            m.deprecated = r.bool();
                            break;
                        case 10:
                            m.weak = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 93001:
                            m[".cosmos_proto.accepts_interface"] = r.string();
                            break;
                        case 65001:
                            m[".gogoproto.nullable"] = r.bool();
                            break;
                        case 65002:
                            m[".gogoproto.embed"] = r.bool();
                            break;
                        case 65003:
                            m[".gogoproto.customtype"] = r.string();
                            break;
                        case 65004:
                            m[".gogoproto.customname"] = r.string();
                            break;
                        case 65005:
                            m[".gogoproto.jsontag"] = r.string();
                            break;
                        case 65006:
                            m[".gogoproto.moretags"] = r.string();
                            break;
                        case 65007:
                            m[".gogoproto.casttype"] = r.string();
                            break;
                        case 65008:
                            m[".gogoproto.castkey"] = r.string();
                            break;
                        case 65009:
                            m[".gogoproto.castvalue"] = r.string();
                            break;
                        case 65010:
                            m[".gogoproto.stdtime"] = r.bool();
                            break;
                        case 65011:
                            m[".gogoproto.stdduration"] = r.bool();
                            break;
                        case 65012:
                            m[".gogoproto.wktpointer"] = r.bool();
                            break;
                        case 65013:
                            m[".gogoproto.castrepeated"] = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function () {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [p] Properties to set
             */
            function OneofOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} m OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.OneofOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function () {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
             * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
             * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
             * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [p] Properties to set
             */
            function EnumOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumOptions .gogoproto.goproto_enum_prefix.
             * @member {boolean} .gogoproto.goproto_enum_prefix
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;

            /**
             * EnumOptions .gogoproto.goproto_enum_stringer.
             * @member {boolean} .gogoproto.goproto_enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_stringer.
             * @member {boolean} .gogoproto.enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_customname.
             * @member {string} .gogoproto.enum_customname
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_customname"] = "";

            /**
             * EnumOptions .gogoproto.enumdecl.
             * @member {boolean} .gogoproto.enumdecl
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enumdecl"] = false;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} m EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.allow_alias != null && Object.hasOwnProperty.call(m, "allow_alias"))
                    w.uint32(16).bool(m.allow_alias);
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(24).bool(m.deprecated);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                if (m[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_enum_prefix"))
                    w.uint32(496008).bool(m[".gogoproto.goproto_enum_prefix"]);
                if (m[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.goproto_enum_stringer"))
                    w.uint32(496168).bool(m[".gogoproto.goproto_enum_stringer"]);
                if (m[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(m, ".gogoproto.enum_stringer"))
                    w.uint32(496176).bool(m[".gogoproto.enum_stringer"]);
                if (m[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(m, ".gogoproto.enum_customname"))
                    w.uint32(496186).string(m[".gogoproto.enum_customname"]);
                if (m[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(m, ".gogoproto.enumdecl"))
                    w.uint32(496192).bool(m[".gogoproto.enumdecl"]);
                return w;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 2:
                            m.allow_alias = r.bool();
                            break;
                        case 3:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 62001:
                            m[".gogoproto.goproto_enum_prefix"] = r.bool();
                            break;
                        case 62021:
                            m[".gogoproto.goproto_enum_stringer"] = r.bool();
                            break;
                        case 62022:
                            m[".gogoproto.enum_stringer"] = r.bool();
                            break;
                        case 62023:
                            m[".gogoproto.enum_customname"] = r.string();
                            break;
                        case 62024:
                            m[".gogoproto.enumdecl"] = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function () {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [p] Properties to set
             */
            function EnumValueOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumValueOptions .gogoproto.enumvalue_customname.
             * @member {string} .gogoproto.enumvalue_customname
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} m EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(8).bool(m.deprecated);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                if (m[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(m, ".gogoproto.enumvalue_customname"))
                    w.uint32(528010).string(m[".gogoproto.enumvalue_customname"]);
                return w;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumValueOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 66001:
                            m[".gogoproto.enumvalue_customname"] = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function () {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [p] Properties to set
             */
            function ServiceOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} m ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(264).bool(m.deprecated);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.ServiceOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 33:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function () {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [p] Properties to set
             */
            function MethodOptions(p) {
                this.uninterpreted_option = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} m MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.deprecated != null && Object.hasOwnProperty.call(m, "deprecated"))
                    w.uint32(264).bool(m.deprecated);
                if (m.uninterpreted_option != null && m.uninterpreted_option.length) {
                    for (var i = 0; i < m.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(m.uninterpreted_option[i], w.uint32(7994).fork()).ldelim();
                }
                if (m[".google.api.http"] != null && Object.hasOwnProperty.call(m, ".google.api.http"))
                    $root.google.api.HttpRule.encode(m[".google.api.http"], w.uint32(578365826).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.MethodOptions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 33:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpreted_option && m.uninterpreted_option.length))
                                m.uninterpreted_option = [];
                            m.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 72295728:
                            m[".google.api.http"] = $root.google.api.HttpRule.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function () {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {Long|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {Long|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [p] Properties to set
             */
            function UninterpretedOption(p) {
                this.name = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {Long} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {Long} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} m UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && m.name.length) {
                    for (var i = 0; i < m.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(m.name[i], w.uint32(18).fork()).ldelim();
                }
                if (m.identifier_value != null && Object.hasOwnProperty.call(m, "identifier_value"))
                    w.uint32(26).string(m.identifier_value);
                if (m.positive_int_value != null && Object.hasOwnProperty.call(m, "positive_int_value"))
                    w.uint32(32).uint64(m.positive_int_value);
                if (m.negative_int_value != null && Object.hasOwnProperty.call(m, "negative_int_value"))
                    w.uint32(40).int64(m.negative_int_value);
                if (m.double_value != null && Object.hasOwnProperty.call(m, "double_value"))
                    w.uint32(49).double(m.double_value);
                if (m.string_value != null && Object.hasOwnProperty.call(m, "string_value"))
                    w.uint32(58).bytes(m.string_value);
                if (m.aggregate_value != null && Object.hasOwnProperty.call(m, "aggregate_value"))
                    w.uint32(66).string(m.aggregate_value);
                return w;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UninterpretedOption();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 2:
                            if (!(m.name && m.name.length))
                                m.name = [];
                            m.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.identifier_value = r.string();
                            break;
                        case 4:
                            m.positive_int_value = r.uint64();
                            break;
                        case 5:
                            m.negative_int_value = r.int64();
                            break;
                        case 6:
                            m.double_value = r.double();
                            break;
                        case 7:
                            m.string_value = r.bytes();
                            break;
                        case 8:
                            m.aggregate_value = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            UninterpretedOption.NamePart = (function () {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [p] Properties to set
                 */
                function NamePart(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} m NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    w.uint32(10).string(m.name_part);
                    w.uint32(16).bool(m.is_extension);
                    return w;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.name_part = r.string();
                                break;
                            case 2:
                                m.is_extension = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    if (!m.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: m });
                    if (!m.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: m });
                    return m;
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function () {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [p] Properties to set
             */
            function SourceCodeInfo(p) {
                this.location = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} m SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.location != null && m.location.length) {
                    for (var i = 0; i < m.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(m.location[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.SourceCodeInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.location && m.location.length))
                                m.location = [];
                            m.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            SourceCodeInfo.Location = (function () {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [p] Properties to set
                 */
                function Location(p) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} m Location message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.path != null && m.path.length) {
                        w.uint32(10).fork();
                        for (var i = 0; i < m.path.length; ++i)
                            w.int32(m.path[i]);
                        w.ldelim();
                    }
                    if (m.span != null && m.span.length) {
                        w.uint32(18).fork();
                        for (var i = 0; i < m.span.length; ++i)
                            w.int32(m.span[i]);
                        w.ldelim();
                    }
                    if (m.leading_comments != null && Object.hasOwnProperty.call(m, "leading_comments"))
                        w.uint32(26).string(m.leading_comments);
                    if (m.trailing_comments != null && Object.hasOwnProperty.call(m, "trailing_comments"))
                        w.uint32(34).string(m.trailing_comments);
                    if (m.leading_detached_comments != null && m.leading_detached_comments.length) {
                        for (var i = 0; i < m.leading_detached_comments.length; ++i)
                            w.uint32(50).string(m.leading_detached_comments[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.path && m.path.length))
                                    m.path = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.path.push(r.int32());
                                } else
                                    m.path.push(r.int32());
                                break;
                            case 2:
                                if (!(m.span && m.span.length))
                                    m.span = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.span.push(r.int32());
                                } else
                                    m.span.push(r.int32());
                                break;
                            case 3:
                                m.leading_comments = r.string();
                                break;
                            case 4:
                                m.trailing_comments = r.string();
                                break;
                            case 6:
                                if (!(m.leading_detached_comments && m.leading_detached_comments.length))
                                    m.leading_detached_comments = [];
                                m.leading_detached_comments.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function () {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [p] Properties to set
             */
            function GeneratedCodeInfo(p) {
                this.annotation = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} m GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.annotation != null && m.annotation.length) {
                    for (var i = 0; i < m.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(m.annotation[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.GeneratedCodeInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.annotation && m.annotation.length))
                                m.annotation = [];
                            m.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            GeneratedCodeInfo.Annotation = (function () {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [p] Properties to set
                 */
                function Annotation(p) {
                    this.path = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} m Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.path != null && m.path.length) {
                        w.uint32(10).fork();
                        for (var i = 0; i < m.path.length; ++i)
                            w.int32(m.path[i]);
                        w.ldelim();
                    }
                    if (m.source_file != null && Object.hasOwnProperty.call(m, "source_file"))
                        w.uint32(18).string(m.source_file);
                    if (m.begin != null && Object.hasOwnProperty.call(m, "begin"))
                        w.uint32(24).int32(m.begin);
                    if (m.end != null && Object.hasOwnProperty.call(m, "end"))
                        w.uint32(32).int32(m.end);
                    return w;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.path && m.path.length))
                                    m.path = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.path.push(r.int32());
                                } else
                                    m.path.push(r.int32());
                                break;
                            case 2:
                                m.source_file = r.string();
                                break;
                            case 3:
                                m.begin = r.int32();
                                break;
                            case 4:
                                m.end = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Timestamp = (function () {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [p] Properties to set
             */
            function Timestamp(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Timestamp seconds.
             * @member {Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} m Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.seconds != null && Object.hasOwnProperty.call(m, "seconds"))
                    w.uint32(8).int64(m.seconds);
                if (m.nanos != null && Object.hasOwnProperty.call(m, "nanos"))
                    w.uint32(16).int32(m.nanos);
                return w;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Timestamp();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.seconds = r.int64();
                            break;
                        case 2:
                            m.nanos = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Timestamp;
        })();

        protobuf.Duration = (function () {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {Long|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [p] Properties to set
             */
            function Duration(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Duration seconds.
             * @member {Long} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} m Duration message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.seconds != null && Object.hasOwnProperty.call(m, "seconds"))
                    w.uint32(8).int64(m.seconds);
                if (m.nanos != null && Object.hasOwnProperty.call(m, "nanos"))
                    w.uint32(16).int32(m.nanos);
                return w;
            };

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Duration();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.seconds = r.int64();
                            break;
                        case 2:
                            m.nanos = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Duration;
        })();

        return protobuf;
    })();

    google.api = (function () {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function () {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [p] Properties to set
             */
            function Http(p) {
                this.rules = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} m Http message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.rules != null && m.rules.length) {
                    for (var i = 0; i < m.rules.length; ++i)
                        $root.google.api.HttpRule.encode(m.rules[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.api.Http();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.rules && m.rules.length))
                                m.rules = [];
                            m.rules.push($root.google.api.HttpRule.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Http;
        })();

        api.HttpRule = (function () {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [body] HttpRule body
             * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [p] Properties to set
             */
            function HttpRule(p) {
                this.additional_bindings = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule additional_bindings.
             * @member {Array.<google.api.IHttpRule>} additional_bindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additional_bindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} m HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.selector != null && Object.hasOwnProperty.call(m, "selector"))
                    w.uint32(10).string(m.selector);
                if (m.get != null && Object.hasOwnProperty.call(m, "get"))
                    w.uint32(18).string(m.get);
                if (m.put != null && Object.hasOwnProperty.call(m, "put"))
                    w.uint32(26).string(m.put);
                if (m.post != null && Object.hasOwnProperty.call(m, "post"))
                    w.uint32(34).string(m.post);
                if (m["delete"] != null && Object.hasOwnProperty.call(m, "delete"))
                    w.uint32(42).string(m["delete"]);
                if (m.patch != null && Object.hasOwnProperty.call(m, "patch"))
                    w.uint32(50).string(m.patch);
                if (m.body != null && Object.hasOwnProperty.call(m, "body"))
                    w.uint32(58).string(m.body);
                if (m.custom != null && Object.hasOwnProperty.call(m, "custom"))
                    $root.google.api.CustomHttpPattern.encode(m.custom, w.uint32(66).fork()).ldelim();
                if (m.additional_bindings != null && m.additional_bindings.length) {
                    for (var i = 0; i < m.additional_bindings.length; ++i)
                        $root.google.api.HttpRule.encode(m.additional_bindings[i], w.uint32(90).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.api.HttpRule();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 2:
                            m.get = r.string();
                            break;
                        case 3:
                            m.put = r.string();
                            break;
                        case 4:
                            m.post = r.string();
                            break;
                        case 5:
                            m["delete"] = r.string();
                            break;
                        case 6:
                            m.patch = r.string();
                            break;
                        case 8:
                            m.custom = $root.google.api.CustomHttpPattern.decode(r, r.uint32());
                            break;
                        case 1:
                            m.selector = r.string();
                            break;
                        case 7:
                            m.body = r.string();
                            break;
                        case 11:
                            if (!(m.additional_bindings && m.additional_bindings.length))
                                m.additional_bindings = [];
                            m.additional_bindings.push($root.google.api.HttpRule.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function () {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [p] Properties to set
             */
            function CustomHttpPattern(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} m CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.kind != null && Object.hasOwnProperty.call(m, "kind"))
                    w.uint32(10).string(m.kind);
                if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                    w.uint32(18).string(m.path);
                return w;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.api.CustomHttpPattern();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.kind = r.string();
                            break;
                        case 2:
                            m.path = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return CustomHttpPattern;
        })();

        api.HttpBody = (function () {

            /**
             * Properties of a HttpBody.
             * @memberof google.api
             * @interface IHttpBody
             * @property {string|null} [content_type] HttpBody content_type
             * @property {Uint8Array|null} [data] HttpBody data
             * @property {Array.<google.protobuf.IAny>|null} [extensions] HttpBody extensions
             */

            /**
             * Constructs a new HttpBody.
             * @memberof google.api
             * @classdesc Represents a HttpBody.
             * @implements IHttpBody
             * @constructor
             * @param {google.api.IHttpBody=} [p] Properties to set
             */
            function HttpBody(p) {
                this.extensions = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * HttpBody content_type.
             * @member {string} content_type
             * @memberof google.api.HttpBody
             * @instance
             */
            HttpBody.prototype.content_type = "";

            /**
             * HttpBody data.
             * @member {Uint8Array} data
             * @memberof google.api.HttpBody
             * @instance
             */
            HttpBody.prototype.data = $util.newBuffer([]);

            /**
             * HttpBody extensions.
             * @member {Array.<google.protobuf.IAny>} extensions
             * @memberof google.api.HttpBody
             * @instance
             */
            HttpBody.prototype.extensions = $util.emptyArray;

            /**
             * Encodes the specified HttpBody message. Does not implicitly {@link google.api.HttpBody.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpBody
             * @static
             * @param {google.api.IHttpBody} m HttpBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.content_type != null && Object.hasOwnProperty.call(m, "content_type"))
                    w.uint32(10).string(m.content_type);
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(18).bytes(m.data);
                if (m.extensions != null && m.extensions.length) {
                    for (var i = 0; i < m.extensions.length; ++i)
                        $root.google.protobuf.Any.encode(m.extensions[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a HttpBody message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {google.api.HttpBody} HttpBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.api.HttpBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.content_type = r.string();
                            break;
                        case 2:
                            m.data = r.bytes();
                            break;
                        case 3:
                            if (!(m.extensions && m.extensions.length))
                                m.extensions = [];
                            m.extensions.push($root.google.protobuf.Any.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return HttpBody;
        })();

        return api;
    })();

    return google;
})();

export const ibc = $root.ibc = (() => {

    /**
     * Namespace ibc.
     * @exports ibc
     * @namespace
     */
    const ibc = {};

    ibc.applications = (function () {

        /**
         * Namespace applications.
         * @memberof ibc
         * @namespace
         */
        const applications = {};

        applications.transfer = (function () {

            /**
             * Namespace transfer.
             * @memberof ibc.applications
             * @namespace
             */
            const transfer = {};

            transfer.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.applications.transfer
                 * @namespace
                 */
                const v1 = {};

                v1.QueryDenomTraceRequest = (function () {

                    /**
                     * Properties of a QueryDenomTraceRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTraceRequest
                     * @property {string|null} [hash] QueryDenomTraceRequest hash
                     */

                    /**
                     * Constructs a new QueryDenomTraceRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTraceRequest.
                     * @implements IQueryDenomTraceRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest=} [p] Properties to set
                     */
                    function QueryDenomTraceRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryDenomTraceRequest hash.
                     * @member {string} hash
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @instance
                     */
                    QueryDenomTraceRequest.prototype.hash = "";

                    /**
                     * Encodes the specified QueryDenomTraceRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} m QueryDenomTraceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                            w.uint32(10).string(m.hash);
                        return w;
                    };

                    /**
                     * Decodes a QueryDenomTraceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.hash = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryDenomTraceRequest;
                })();

                v1.QueryDenomTraceResponse = (function () {

                    /**
                     * Properties of a QueryDenomTraceResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTraceResponse
                     * @property {ibc.applications.transfer.v1.IDenomTrace|null} [denom_trace] QueryDenomTraceResponse denom_trace
                     */

                    /**
                     * Constructs a new QueryDenomTraceResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTraceResponse.
                     * @implements IQueryDenomTraceResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse=} [p] Properties to set
                     */
                    function QueryDenomTraceResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryDenomTraceResponse denom_trace.
                     * @member {ibc.applications.transfer.v1.IDenomTrace|null|undefined} denom_trace
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @instance
                     */
                    QueryDenomTraceResponse.prototype.denom_trace = null;

                    /**
                     * Encodes the specified QueryDenomTraceResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} m QueryDenomTraceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.denom_trace != null && Object.hasOwnProperty.call(m, "denom_trace"))
                            $root.ibc.applications.transfer.v1.DenomTrace.encode(m.denom_trace, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryDenomTraceResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryDenomTraceResponse;
                })();

                v1.QueryDenomTracesRequest = (function () {

                    /**
                     * Properties of a QueryDenomTracesRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTracesRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDenomTracesRequest pagination
                     */

                    /**
                     * Constructs a new QueryDenomTracesRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTracesRequest.
                     * @implements IQueryDenomTracesRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest=} [p] Properties to set
                     */
                    function QueryDenomTracesRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryDenomTracesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @instance
                     */
                    QueryDenomTracesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryDenomTracesRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} m QueryDenomTracesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryDenomTracesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryDenomTracesRequest;
                })();

                v1.QueryDenomTracesResponse = (function () {

                    /**
                     * Properties of a QueryDenomTracesResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTracesResponse
                     * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] QueryDenomTracesResponse denom_traces
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDenomTracesResponse pagination
                     */

                    /**
                     * Constructs a new QueryDenomTracesResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTracesResponse.
                     * @implements IQueryDenomTracesResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse=} [p] Properties to set
                     */
                    function QueryDenomTracesResponse(p) {
                        this.denom_traces = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryDenomTracesResponse denom_traces.
                     * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     */
                    QueryDenomTracesResponse.prototype.denom_traces = $util.emptyArray;

                    /**
                     * QueryDenomTracesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     */
                    QueryDenomTracesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryDenomTracesResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} m QueryDenomTracesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.denom_traces != null && m.denom_traces.length) {
                            for (var i = 0; i < m.denom_traces.length; ++i)
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(m.denom_traces[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryDenomTracesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.denom_traces && m.denom_traces.length))
                                        m.denom_traces = [];
                                    m.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryDenomTracesResponse;
                })();

                v1.QueryParamsRequest = (function () {

                    /**
                     * Properties of a QueryParamsRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryParamsRequest
                     */

                    /**
                     * Constructs a new QueryParamsRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryParamsRequest.
                     * @implements IQueryParamsRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest=} [p] Properties to set
                     */
                    function QueryParamsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified QueryParamsRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryParamsRequest;
                })();

                v1.QueryParamsResponse = (function () {

                    /**
                     * Properties of a QueryParamsResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryParamsResponse
                     * @property {ibc.applications.transfer.v1.IParams|null} [params] QueryParamsResponse params
                     */

                    /**
                     * Constructs a new QueryParamsResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryParamsResponse.
                     * @implements IQueryParamsResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse=} [p] Properties to set
                     */
                    function QueryParamsResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryParamsResponse params.
                     * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @instance
                     */
                    QueryParamsResponse.prototype.params = null;

                    /**
                     * Encodes the specified QueryParamsResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                            $root.ibc.applications.transfer.v1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.params = $root.ibc.applications.transfer.v1.Params.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryParamsResponse;
                })();

                v1.GenesisState = (function () {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IGenesisState
                     * @property {string|null} [port_id] GenesisState port_id
                     * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] GenesisState denom_traces
                     * @property {ibc.applications.transfer.v1.IParams|null} [params] GenesisState params
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IGenesisState=} [p] Properties to set
                     */
                    function GenesisState(p) {
                        this.denom_traces = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenesisState port_id.
                     * @member {string} port_id
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.port_id = "";

                    /**
                     * GenesisState denom_traces.
                     * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.denom_traces = $util.emptyArray;

                    /**
                     * GenesisState params.
                     * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.applications.transfer.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.IGenesisState} m GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.denom_traces != null && m.denom_traces.length) {
                            for (var i = 0; i < m.denom_traces.length; ++i)
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(m.denom_traces[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                            $root.ibc.applications.transfer.v1.Params.encode(m.params, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.GenesisState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    if (!(m.denom_traces && m.denom_traces.length))
                                        m.denom_traces = [];
                                    m.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    m.params = $root.ibc.applications.transfer.v1.Params.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenesisState;
                })();

                v1.FungibleTokenPacketData = (function () {

                    /**
                     * Properties of a FungibleTokenPacketData.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IFungibleTokenPacketData
                     * @property {string|null} [denom] FungibleTokenPacketData denom
                     * @property {Long|null} [amount] FungibleTokenPacketData amount
                     * @property {string|null} [sender] FungibleTokenPacketData sender
                     * @property {string|null} [receiver] FungibleTokenPacketData receiver
                     */

                    /**
                     * Constructs a new FungibleTokenPacketData.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a FungibleTokenPacketData.
                     * @implements IFungibleTokenPacketData
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IFungibleTokenPacketData=} [p] Properties to set
                     */
                    function FungibleTokenPacketData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * FungibleTokenPacketData denom.
                     * @member {string} denom
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.denom = "";

                    /**
                     * FungibleTokenPacketData amount.
                     * @member {Long} amount
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.amount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * FungibleTokenPacketData sender.
                     * @member {string} sender
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.sender = "";

                    /**
                     * FungibleTokenPacketData receiver.
                     * @member {string} receiver
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.receiver = "";

                    /**
                     * Encodes the specified FungibleTokenPacketData message. Does not implicitly {@link ibc.applications.transfer.v1.FungibleTokenPacketData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v1.IFungibleTokenPacketData} m FungibleTokenPacketData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FungibleTokenPacketData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.denom != null && Object.hasOwnProperty.call(m, "denom"))
                            w.uint32(10).string(m.denom);
                        if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                            w.uint32(16).uint64(m.amount);
                        if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                            w.uint32(26).string(m.sender);
                        if (m.receiver != null && Object.hasOwnProperty.call(m, "receiver"))
                            w.uint32(34).string(m.receiver);
                        return w;
                    };

                    /**
                     * Decodes a FungibleTokenPacketData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.FungibleTokenPacketData} FungibleTokenPacketData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FungibleTokenPacketData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.FungibleTokenPacketData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.denom = r.string();
                                    break;
                                case 2:
                                    m.amount = r.uint64();
                                    break;
                                case 3:
                                    m.sender = r.string();
                                    break;
                                case 4:
                                    m.receiver = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return FungibleTokenPacketData;
                })();

                v1.DenomTrace = (function () {

                    /**
                     * Properties of a DenomTrace.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IDenomTrace
                     * @property {string|null} [path] DenomTrace path
                     * @property {string|null} [base_denom] DenomTrace base_denom
                     */

                    /**
                     * Constructs a new DenomTrace.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a DenomTrace.
                     * @implements IDenomTrace
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IDenomTrace=} [p] Properties to set
                     */
                    function DenomTrace(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * DenomTrace path.
                     * @member {string} path
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     */
                    DenomTrace.prototype.path = "";

                    /**
                     * DenomTrace base_denom.
                     * @member {string} base_denom
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     */
                    DenomTrace.prototype.base_denom = "";

                    /**
                     * Encodes the specified DenomTrace message. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.IDenomTrace} m DenomTrace message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomTrace.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).string(m.path);
                        if (m.base_denom != null && Object.hasOwnProperty.call(m, "base_denom"))
                            w.uint32(18).string(m.base_denom);
                        return w;
                    };

                    /**
                     * Decodes a DenomTrace message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomTrace.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.DenomTrace();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.string();
                                    break;
                                case 2:
                                    m.base_denom = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return DenomTrace;
                })();

                v1.Params = (function () {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IParams
                     * @property {boolean|null} [send_enabled] Params send_enabled
                     * @property {boolean|null} [receive_enabled] Params receive_enabled
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IParams=} [p] Properties to set
                     */
                    function Params(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Params send_enabled.
                     * @member {boolean} send_enabled
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     */
                    Params.prototype.send_enabled = false;

                    /**
                     * Params receive_enabled.
                     * @member {boolean} receive_enabled
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     */
                    Params.prototype.receive_enabled = false;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.IParams} m Params message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.send_enabled != null && Object.hasOwnProperty.call(m, "send_enabled"))
                            w.uint32(8).bool(m.send_enabled);
                        if (m.receive_enabled != null && Object.hasOwnProperty.call(m, "receive_enabled"))
                            w.uint32(16).bool(m.receive_enabled);
                        return w;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.Params();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.send_enabled = r.bool();
                                    break;
                                case 2:
                                    m.receive_enabled = r.bool();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Params;
                })();

                v1.MsgTransfer = (function () {

                    /**
                     * Properties of a MsgTransfer.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IMsgTransfer
                     * @property {string|null} [source_port] MsgTransfer source_port
                     * @property {string|null} [source_channel] MsgTransfer source_channel
                     * @property {cosmos.base.v1beta1.ICoin|null} [token] MsgTransfer token
                     * @property {string|null} [sender] MsgTransfer sender
                     * @property {string|null} [receiver] MsgTransfer receiver
                     * @property {ibc.core.client.v1.IHeight|null} [timeout_height] MsgTransfer timeout_height
                     * @property {Long|null} [timeout_timestamp] MsgTransfer timeout_timestamp
                     */

                    /**
                     * Constructs a new MsgTransfer.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a MsgTransfer.
                     * @implements IMsgTransfer
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IMsgTransfer=} [p] Properties to set
                     */
                    function MsgTransfer(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgTransfer source_port.
                     * @member {string} source_port
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.source_port = "";

                    /**
                     * MsgTransfer source_channel.
                     * @member {string} source_channel
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.source_channel = "";

                    /**
                     * MsgTransfer token.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} token
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.token = null;

                    /**
                     * MsgTransfer sender.
                     * @member {string} sender
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.sender = "";

                    /**
                     * MsgTransfer receiver.
                     * @member {string} receiver
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.receiver = "";

                    /**
                     * MsgTransfer timeout_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.timeout_height = null;

                    /**
                     * MsgTransfer timeout_timestamp.
                     * @member {Long} timeout_timestamp
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified MsgTransfer message. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransfer.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} m MsgTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransfer.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.source_port != null && Object.hasOwnProperty.call(m, "source_port"))
                            w.uint32(10).string(m.source_port);
                        if (m.source_channel != null && Object.hasOwnProperty.call(m, "source_channel"))
                            w.uint32(18).string(m.source_channel);
                        if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                            $root.cosmos.base.v1beta1.Coin.encode(m.token, w.uint32(26).fork()).ldelim();
                        if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                            w.uint32(34).string(m.sender);
                        if (m.receiver != null && Object.hasOwnProperty.call(m, "receiver"))
                            w.uint32(42).string(m.receiver);
                        if (m.timeout_height != null && Object.hasOwnProperty.call(m, "timeout_height"))
                            $root.ibc.core.client.v1.Height.encode(m.timeout_height, w.uint32(50).fork()).ldelim();
                        if (m.timeout_timestamp != null && Object.hasOwnProperty.call(m, "timeout_timestamp"))
                            w.uint32(56).uint64(m.timeout_timestamp);
                        return w;
                    };

                    /**
                     * Decodes a MsgTransfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransfer.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.MsgTransfer();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.source_port = r.string();
                                    break;
                                case 2:
                                    m.source_channel = r.string();
                                    break;
                                case 3:
                                    m.token = $root.cosmos.base.v1beta1.Coin.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.sender = r.string();
                                    break;
                                case 5:
                                    m.receiver = r.string();
                                    break;
                                case 6:
                                    m.timeout_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 7:
                                    m.timeout_timestamp = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgTransfer;
                })();

                v1.MsgTransferResponse = (function () {

                    /**
                     * Properties of a MsgTransferResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IMsgTransferResponse
                     */

                    /**
                     * Constructs a new MsgTransferResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a MsgTransferResponse.
                     * @implements IMsgTransferResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse=} [p] Properties to set
                     */
                    function MsgTransferResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgTransferResponse message. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransferResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse} m MsgTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransferResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgTransferResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransferResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.applications.transfer.v1.MsgTransferResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgTransferResponse;
                })();

                return v1;
            })();

            return transfer;
        })();

        return applications;
    })();

    ibc.core = (function () {

        /**
         * Namespace core.
         * @memberof ibc
         * @namespace
         */
        const core = {};

        core.channel = (function () {

            /**
             * Namespace channel.
             * @memberof ibc.core
             * @namespace
             */
            const channel = {};

            channel.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.channel
                 * @namespace
                 */
                const v1 = {};

                v1.QueryChannelRequest = (function () {

                    /**
                     * Properties of a QueryChannelRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelRequest
                     * @property {string|null} [port_id] QueryChannelRequest port_id
                     * @property {string|null} [channel_id] QueryChannelRequest channel_id
                     */

                    /**
                     * Constructs a new QueryChannelRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelRequest.
                     * @implements IQueryChannelRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelRequest=} [p] Properties to set
                     */
                    function QueryChannelRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     */
                    QueryChannelRequest.prototype.port_id = "";

                    /**
                     * QueryChannelRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     */
                    QueryChannelRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryChannelRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} m QueryChannelRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelRequest;
                })();

                v1.QueryChannelResponse = (function () {

                    /**
                     * Properties of a QueryChannelResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelResponse
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] QueryChannelResponse channel
                     * @property {Uint8Array|null} [proof] QueryChannelResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelResponse.
                     * @implements IQueryChannelResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelResponse=} [p] Properties to set
                     */
                    function QueryChannelResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelResponse channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.channel = null;

                    /**
                     * QueryChannelResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelResponse} m QueryChannelResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(m.channel, w.uint32(10).fork()).ldelim();
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.channel = $root.ibc.core.channel.v1.Channel.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelResponse;
                })();

                v1.QueryChannelsRequest = (function () {

                    /**
                     * Properties of a QueryChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelsRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryChannelsRequest pagination
                     */

                    /**
                     * Constructs a new QueryChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelsRequest.
                     * @implements IQueryChannelsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest=} [p] Properties to set
                     */
                    function QueryChannelsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @instance
                     */
                    QueryChannelsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryChannelsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} m QueryChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelsRequest;
                })();

                v1.QueryChannelsResponse = (function () {

                    /**
                     * Properties of a QueryChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelsResponse
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] QueryChannelsResponse channels
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryChannelsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryChannelsResponse height
                     */

                    /**
                     * Constructs a new QueryChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelsResponse.
                     * @implements IQueryChannelsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse=} [p] Properties to set
                     */
                    function QueryChannelsResponse(p) {
                        this.channels = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelsResponse channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.channels = $util.emptyArray;

                    /**
                     * QueryChannelsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.pagination = null;

                    /**
                     * QueryChannelsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryChannelsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse} m QueryChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.channels != null && m.channels.length) {
                            for (var i = 0; i < m.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(m.channels[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.channels && m.channels.length))
                                        m.channels = [];
                                    m.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelsResponse;
                })();

                v1.QueryConnectionChannelsRequest = (function () {

                    /**
                     * Properties of a QueryConnectionChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryConnectionChannelsRequest
                     * @property {string|null} [connection] QueryConnectionChannelsRequest connection
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConnectionChannelsRequest pagination
                     */

                    /**
                     * Constructs a new QueryConnectionChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryConnectionChannelsRequest.
                     * @implements IQueryConnectionChannelsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest=} [p] Properties to set
                     */
                    function QueryConnectionChannelsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionChannelsRequest connection.
                     * @member {string} connection
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     */
                    QueryConnectionChannelsRequest.prototype.connection = "";

                    /**
                     * QueryConnectionChannelsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     */
                    QueryConnectionChannelsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConnectionChannelsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} m QueryConnectionChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection != null && Object.hasOwnProperty.call(m, "connection"))
                            w.uint32(10).string(m.connection);
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryConnectionChannelsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection = r.string();
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionChannelsRequest;
                })();

                v1.QueryConnectionChannelsResponse = (function () {

                    /**
                     * Properties of a QueryConnectionChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryConnectionChannelsResponse
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] QueryConnectionChannelsResponse channels
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConnectionChannelsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryConnectionChannelsResponse height
                     */

                    /**
                     * Constructs a new QueryConnectionChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryConnectionChannelsResponse.
                     * @implements IQueryConnectionChannelsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse=} [p] Properties to set
                     */
                    function QueryConnectionChannelsResponse(p) {
                        this.channels = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionChannelsResponse channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.channels = $util.emptyArray;

                    /**
                     * QueryConnectionChannelsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.pagination = null;

                    /**
                     * QueryConnectionChannelsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryConnectionChannelsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse} m QueryConnectionChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.channels != null && m.channels.length) {
                            for (var i = 0; i < m.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(m.channels[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryConnectionChannelsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.channels && m.channels.length))
                                        m.channels = [];
                                    m.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionChannelsResponse;
                })();

                v1.QueryChannelClientStateRequest = (function () {

                    /**
                     * Properties of a QueryChannelClientStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelClientStateRequest
                     * @property {string|null} [port_id] QueryChannelClientStateRequest port_id
                     * @property {string|null} [channel_id] QueryChannelClientStateRequest channel_id
                     */

                    /**
                     * Constructs a new QueryChannelClientStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelClientStateRequest.
                     * @implements IQueryChannelClientStateRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest=} [p] Properties to set
                     */
                    function QueryChannelClientStateRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelClientStateRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     */
                    QueryChannelClientStateRequest.prototype.port_id = "";

                    /**
                     * QueryChannelClientStateRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     */
                    QueryChannelClientStateRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryChannelClientStateRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} m QueryChannelClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelClientStateRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelClientStateRequest;
                })();

                v1.QueryChannelClientStateResponse = (function () {

                    /**
                     * Properties of a QueryChannelClientStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelClientStateResponse
                     * @property {ibc.core.client.v1.IIdentifiedClientState|null} [identified_client_state] QueryChannelClientStateResponse identified_client_state
                     * @property {Uint8Array|null} [proof] QueryChannelClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelClientStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelClientStateResponse.
                     * @implements IQueryChannelClientStateResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse=} [p] Properties to set
                     */
                    function QueryChannelClientStateResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelClientStateResponse identified_client_state.
                     * @member {ibc.core.client.v1.IIdentifiedClientState|null|undefined} identified_client_state
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.identified_client_state = null;

                    /**
                     * QueryChannelClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelClientStateResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse} m QueryChannelClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.identified_client_state != null && Object.hasOwnProperty.call(m, "identified_client_state"))
                            $root.ibc.core.client.v1.IdentifiedClientState.encode(m.identified_client_state, w.uint32(10).fork()).ldelim();
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelClientStateResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelClientStateResponse;
                })();

                v1.QueryChannelConsensusStateRequest = (function () {

                    /**
                     * Properties of a QueryChannelConsensusStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelConsensusStateRequest
                     * @property {string|null} [port_id] QueryChannelConsensusStateRequest port_id
                     * @property {string|null} [channel_id] QueryChannelConsensusStateRequest channel_id
                     * @property {Long|null} [revision_number] QueryChannelConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryChannelConsensusStateRequest revision_height
                     */

                    /**
                     * Constructs a new QueryChannelConsensusStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelConsensusStateRequest.
                     * @implements IQueryChannelConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest=} [p] Properties to set
                     */
                    function QueryChannelConsensusStateRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelConsensusStateRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.port_id = "";

                    /**
                     * QueryChannelConsensusStateRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.channel_id = "";

                    /**
                     * QueryChannelConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * QueryChannelConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified QueryChannelConsensusStateRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} m QueryChannelConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.revision_number != null && Object.hasOwnProperty.call(m, "revision_number"))
                            w.uint32(24).uint64(m.revision_number);
                        if (m.revision_height != null && Object.hasOwnProperty.call(m, "revision_height"))
                            w.uint32(32).uint64(m.revision_height);
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.revision_number = r.uint64();
                                    break;
                                case 4:
                                    m.revision_height = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelConsensusStateRequest;
                })();

                v1.QueryChannelConsensusStateResponse = (function () {

                    /**
                     * Properties of a QueryChannelConsensusStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryChannelConsensusStateResponse consensus_state
                     * @property {string|null} [client_id] QueryChannelConsensusStateResponse client_id
                     * @property {Uint8Array|null} [proof] QueryChannelConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelConsensusStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelConsensusStateResponse.
                     * @implements IQueryChannelConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse=} [p] Properties to set
                     */
                    function QueryChannelConsensusStateResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryChannelConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryChannelConsensusStateResponse client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.client_id = "";

                    /**
                     * QueryChannelConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelConsensusStateResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse} m QueryChannelConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(10).fork()).ldelim();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(18).string(m.client_id);
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(26).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.client_id = r.string();
                                    break;
                                case 3:
                                    m.proof = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryChannelConsensusStateResponse;
                })();

                v1.QueryPacketCommitmentRequest = (function () {

                    /**
                     * Properties of a QueryPacketCommitmentRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentRequest
                     * @property {string|null} [port_id] QueryPacketCommitmentRequest port_id
                     * @property {string|null} [channel_id] QueryPacketCommitmentRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketCommitmentRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentRequest.
                     * @implements IQueryPacketCommitmentRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest=} [p] Properties to set
                     */
                    function QueryPacketCommitmentRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketCommitmentRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.port_id = "";

                    /**
                     * QueryPacketCommitmentRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketCommitmentRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified QueryPacketCommitmentRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} m QueryPacketCommitmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(24).uint64(m.sequence);
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketCommitmentRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketCommitmentRequest;
                })();

                v1.QueryPacketCommitmentResponse = (function () {

                    /**
                     * Properties of a QueryPacketCommitmentResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentResponse
                     * @property {Uint8Array|null} [commitment] QueryPacketCommitmentResponse commitment
                     * @property {Uint8Array|null} [proof] QueryPacketCommitmentResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketCommitmentResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentResponse.
                     * @implements IQueryPacketCommitmentResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse=} [p] Properties to set
                     */
                    function QueryPacketCommitmentResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketCommitmentResponse commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.commitment = $util.newBuffer([]);

                    /**
                     * QueryPacketCommitmentResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketCommitmentResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse} m QueryPacketCommitmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.commitment != null && Object.hasOwnProperty.call(m, "commitment"))
                            w.uint32(10).bytes(m.commitment);
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketCommitmentResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.commitment = r.bytes();
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketCommitmentResponse;
                })();

                v1.QueryPacketCommitmentsRequest = (function () {

                    /**
                     * Properties of a QueryPacketCommitmentsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentsRequest
                     * @property {string|null} [port_id] QueryPacketCommitmentsRequest port_id
                     * @property {string|null} [channel_id] QueryPacketCommitmentsRequest channel_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPacketCommitmentsRequest pagination
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentsRequest.
                     * @implements IQueryPacketCommitmentsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest=} [p] Properties to set
                     */
                    function QueryPacketCommitmentsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketCommitmentsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.port_id = "";

                    /**
                     * QueryPacketCommitmentsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketCommitmentsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} m QueryPacketCommitmentsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketCommitmentsRequest;
                })();

                v1.QueryPacketCommitmentsResponse = (function () {

                    /**
                     * Properties of a QueryPacketCommitmentsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentsResponse
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [commitments] QueryPacketCommitmentsResponse commitments
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPacketCommitmentsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryPacketCommitmentsResponse height
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentsResponse.
                     * @implements IQueryPacketCommitmentsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse=} [p] Properties to set
                     */
                    function QueryPacketCommitmentsResponse(p) {
                        this.commitments = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketCommitmentsResponse commitments.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} commitments
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.commitments = $util.emptyArray;

                    /**
                     * QueryPacketCommitmentsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.pagination = null;

                    /**
                     * QueryPacketCommitmentsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse} m QueryPacketCommitmentsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.commitments != null && m.commitments.length) {
                            for (var i = 0; i < m.commitments.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(m.commitments[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.commitments && m.commitments.length))
                                        m.commitments = [];
                                    m.commitments.push($root.ibc.core.channel.v1.PacketState.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketCommitmentsResponse;
                })();

                v1.QueryPacketReceiptRequest = (function () {

                    /**
                     * Properties of a QueryPacketReceiptRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketReceiptRequest
                     * @property {string|null} [port_id] QueryPacketReceiptRequest port_id
                     * @property {string|null} [channel_id] QueryPacketReceiptRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketReceiptRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketReceiptRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketReceiptRequest.
                     * @implements IQueryPacketReceiptRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest=} [p] Properties to set
                     */
                    function QueryPacketReceiptRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketReceiptRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.port_id = "";

                    /**
                     * QueryPacketReceiptRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketReceiptRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified QueryPacketReceiptRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} m QueryPacketReceiptRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(24).uint64(m.sequence);
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketReceiptRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketReceiptRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketReceiptRequest;
                })();

                v1.QueryPacketReceiptResponse = (function () {

                    /**
                     * Properties of a QueryPacketReceiptResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketReceiptResponse
                     * @property {boolean|null} [received] QueryPacketReceiptResponse received
                     * @property {Uint8Array|null} [proof] QueryPacketReceiptResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketReceiptResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketReceiptResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketReceiptResponse.
                     * @implements IQueryPacketReceiptResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse=} [p] Properties to set
                     */
                    function QueryPacketReceiptResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketReceiptResponse received.
                     * @member {boolean} received
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.received = false;

                    /**
                     * QueryPacketReceiptResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketReceiptResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketReceiptResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse} m QueryPacketReceiptResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.received != null && Object.hasOwnProperty.call(m, "received"))
                            w.uint32(16).bool(m.received);
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(26).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketReceiptResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketReceiptResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 2:
                                    m.received = r.bool();
                                    break;
                                case 3:
                                    m.proof = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketReceiptResponse;
                })();

                v1.QueryPacketAcknowledgementRequest = (function () {

                    /**
                     * Properties of a QueryPacketAcknowledgementRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementRequest
                     * @property {string|null} [port_id] QueryPacketAcknowledgementRequest port_id
                     * @property {string|null} [channel_id] QueryPacketAcknowledgementRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketAcknowledgementRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementRequest.
                     * @implements IQueryPacketAcknowledgementRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest=} [p] Properties to set
                     */
                    function QueryPacketAcknowledgementRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.port_id = "";

                    /**
                     * QueryPacketAcknowledgementRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketAcknowledgementRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} m QueryPacketAcknowledgementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(24).uint64(m.sequence);
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketAcknowledgementRequest;
                })();

                v1.QueryPacketAcknowledgementResponse = (function () {

                    /**
                     * Properties of a QueryPacketAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementResponse
                     * @property {Uint8Array|null} [acknowledgement] QueryPacketAcknowledgementResponse acknowledgement
                     * @property {Uint8Array|null} [proof] QueryPacketAcknowledgementResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketAcknowledgementResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementResponse.
                     * @implements IQueryPacketAcknowledgementResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse=} [p] Properties to set
                     */
                    function QueryPacketAcknowledgementResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementResponse acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * QueryPacketAcknowledgementResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketAcknowledgementResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse} m QueryPacketAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.acknowledgement != null && Object.hasOwnProperty.call(m, "acknowledgement"))
                            w.uint32(10).bytes(m.acknowledgement);
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.acknowledgement = r.bytes();
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketAcknowledgementResponse;
                })();

                v1.QueryPacketAcknowledgementsRequest = (function () {

                    /**
                     * Properties of a QueryPacketAcknowledgementsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementsRequest
                     * @property {string|null} [port_id] QueryPacketAcknowledgementsRequest port_id
                     * @property {string|null} [channel_id] QueryPacketAcknowledgementsRequest channel_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPacketAcknowledgementsRequest pagination
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementsRequest.
                     * @implements IQueryPacketAcknowledgementsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest=} [p] Properties to set
                     */
                    function QueryPacketAcknowledgementsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.port_id = "";

                    /**
                     * QueryPacketAcknowledgementsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketAcknowledgementsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} m QueryPacketAcknowledgementsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketAcknowledgementsRequest;
                })();

                v1.QueryPacketAcknowledgementsResponse = (function () {

                    /**
                     * Properties of a QueryPacketAcknowledgementsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementsResponse
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [acknowledgements] QueryPacketAcknowledgementsResponse acknowledgements
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPacketAcknowledgementsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryPacketAcknowledgementsResponse height
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementsResponse.
                     * @implements IQueryPacketAcknowledgementsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse=} [p] Properties to set
                     */
                    function QueryPacketAcknowledgementsResponse(p) {
                        this.acknowledgements = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementsResponse acknowledgements.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} acknowledgements
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.acknowledgements = $util.emptyArray;

                    /**
                     * QueryPacketAcknowledgementsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.pagination = null;

                    /**
                     * QueryPacketAcknowledgementsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse} m QueryPacketAcknowledgementsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.acknowledgements != null && m.acknowledgements.length) {
                            for (var i = 0; i < m.acknowledgements.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(m.acknowledgements[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.acknowledgements && m.acknowledgements.length))
                                        m.acknowledgements = [];
                                    m.acknowledgements.push($root.ibc.core.channel.v1.PacketState.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryPacketAcknowledgementsResponse;
                })();

                v1.QueryUnreceivedPacketsRequest = (function () {

                    /**
                     * Properties of a QueryUnreceivedPacketsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedPacketsRequest
                     * @property {string|null} [port_id] QueryUnreceivedPacketsRequest port_id
                     * @property {string|null} [channel_id] QueryUnreceivedPacketsRequest channel_id
                     * @property {Array.<Long>|null} [packet_commitment_sequences] QueryUnreceivedPacketsRequest packet_commitment_sequences
                     */

                    /**
                     * Constructs a new QueryUnreceivedPacketsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedPacketsRequest.
                     * @implements IQueryUnreceivedPacketsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest=} [p] Properties to set
                     */
                    function QueryUnreceivedPacketsRequest(p) {
                        this.packet_commitment_sequences = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryUnreceivedPacketsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.port_id = "";

                    /**
                     * QueryUnreceivedPacketsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.channel_id = "";

                    /**
                     * QueryUnreceivedPacketsRequest packet_commitment_sequences.
                     * @member {Array.<Long>} packet_commitment_sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.packet_commitment_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryUnreceivedPacketsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} m QueryUnreceivedPacketsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.packet_commitment_sequences != null && m.packet_commitment_sequences.length) {
                            w.uint32(26).fork();
                            for (var i = 0; i < m.packet_commitment_sequences.length; ++i)
                                w.uint64(m.packet_commitment_sequences[i]);
                            w.ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    if (!(m.packet_commitment_sequences && m.packet_commitment_sequences.length))
                                        m.packet_commitment_sequences = [];
                                    if ((t & 7) === 2) {
                                        var c2 = r.uint32() + r.pos;
                                        while (r.pos < c2)
                                            m.packet_commitment_sequences.push(r.uint64());
                                    } else
                                        m.packet_commitment_sequences.push(r.uint64());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryUnreceivedPacketsRequest;
                })();

                v1.QueryUnreceivedPacketsResponse = (function () {

                    /**
                     * Properties of a QueryUnreceivedPacketsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedPacketsResponse
                     * @property {Array.<Long>|null} [sequences] QueryUnreceivedPacketsResponse sequences
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryUnreceivedPacketsResponse height
                     */

                    /**
                     * Constructs a new QueryUnreceivedPacketsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedPacketsResponse.
                     * @implements IQueryUnreceivedPacketsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse=} [p] Properties to set
                     */
                    function QueryUnreceivedPacketsResponse(p) {
                        this.sequences = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryUnreceivedPacketsResponse sequences.
                     * @member {Array.<Long>} sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     */
                    QueryUnreceivedPacketsResponse.prototype.sequences = $util.emptyArray;

                    /**
                     * QueryUnreceivedPacketsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     */
                    QueryUnreceivedPacketsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryUnreceivedPacketsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse} m QueryUnreceivedPacketsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.sequences != null && m.sequences.length) {
                            w.uint32(10).fork();
                            for (var i = 0; i < m.sequences.length; ++i)
                                w.uint64(m.sequences[i]);
                            w.ldelim();
                        }
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.sequences && m.sequences.length))
                                        m.sequences = [];
                                    if ((t & 7) === 2) {
                                        var c2 = r.uint32() + r.pos;
                                        while (r.pos < c2)
                                            m.sequences.push(r.uint64());
                                    } else
                                        m.sequences.push(r.uint64());
                                    break;
                                case 2:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryUnreceivedPacketsResponse;
                })();

                v1.QueryUnreceivedAcksRequest = (function () {

                    /**
                     * Properties of a QueryUnreceivedAcksRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedAcksRequest
                     * @property {string|null} [port_id] QueryUnreceivedAcksRequest port_id
                     * @property {string|null} [channel_id] QueryUnreceivedAcksRequest channel_id
                     * @property {Array.<Long>|null} [packet_ack_sequences] QueryUnreceivedAcksRequest packet_ack_sequences
                     */

                    /**
                     * Constructs a new QueryUnreceivedAcksRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedAcksRequest.
                     * @implements IQueryUnreceivedAcksRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest=} [p] Properties to set
                     */
                    function QueryUnreceivedAcksRequest(p) {
                        this.packet_ack_sequences = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryUnreceivedAcksRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.port_id = "";

                    /**
                     * QueryUnreceivedAcksRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.channel_id = "";

                    /**
                     * QueryUnreceivedAcksRequest packet_ack_sequences.
                     * @member {Array.<Long>} packet_ack_sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.packet_ack_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryUnreceivedAcksRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} m QueryUnreceivedAcksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.packet_ack_sequences != null && m.packet_ack_sequences.length) {
                            w.uint32(26).fork();
                            for (var i = 0; i < m.packet_ack_sequences.length; ++i)
                                w.uint64(m.packet_ack_sequences[i]);
                            w.ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    if (!(m.packet_ack_sequences && m.packet_ack_sequences.length))
                                        m.packet_ack_sequences = [];
                                    if ((t & 7) === 2) {
                                        var c2 = r.uint32() + r.pos;
                                        while (r.pos < c2)
                                            m.packet_ack_sequences.push(r.uint64());
                                    } else
                                        m.packet_ack_sequences.push(r.uint64());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryUnreceivedAcksRequest;
                })();

                v1.QueryUnreceivedAcksResponse = (function () {

                    /**
                     * Properties of a QueryUnreceivedAcksResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedAcksResponse
                     * @property {Array.<Long>|null} [sequences] QueryUnreceivedAcksResponse sequences
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryUnreceivedAcksResponse height
                     */

                    /**
                     * Constructs a new QueryUnreceivedAcksResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedAcksResponse.
                     * @implements IQueryUnreceivedAcksResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse=} [p] Properties to set
                     */
                    function QueryUnreceivedAcksResponse(p) {
                        this.sequences = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryUnreceivedAcksResponse sequences.
                     * @member {Array.<Long>} sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     */
                    QueryUnreceivedAcksResponse.prototype.sequences = $util.emptyArray;

                    /**
                     * QueryUnreceivedAcksResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     */
                    QueryUnreceivedAcksResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryUnreceivedAcksResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse} m QueryUnreceivedAcksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.sequences != null && m.sequences.length) {
                            w.uint32(10).fork();
                            for (var i = 0; i < m.sequences.length; ++i)
                                w.uint64(m.sequences[i]);
                            w.ldelim();
                        }
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.sequences && m.sequences.length))
                                        m.sequences = [];
                                    if ((t & 7) === 2) {
                                        var c2 = r.uint32() + r.pos;
                                        while (r.pos < c2)
                                            m.sequences.push(r.uint64());
                                    } else
                                        m.sequences.push(r.uint64());
                                    break;
                                case 2:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryUnreceivedAcksResponse;
                })();

                v1.QueryNextSequenceReceiveRequest = (function () {

                    /**
                     * Properties of a QueryNextSequenceReceiveRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryNextSequenceReceiveRequest
                     * @property {string|null} [port_id] QueryNextSequenceReceiveRequest port_id
                     * @property {string|null} [channel_id] QueryNextSequenceReceiveRequest channel_id
                     */

                    /**
                     * Constructs a new QueryNextSequenceReceiveRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryNextSequenceReceiveRequest.
                     * @implements IQueryNextSequenceReceiveRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest=} [p] Properties to set
                     */
                    function QueryNextSequenceReceiveRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryNextSequenceReceiveRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     */
                    QueryNextSequenceReceiveRequest.prototype.port_id = "";

                    /**
                     * QueryNextSequenceReceiveRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     */
                    QueryNextSequenceReceiveRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryNextSequenceReceiveRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} m QueryNextSequenceReceiveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryNextSequenceReceiveRequest;
                })();

                v1.QueryNextSequenceReceiveResponse = (function () {

                    /**
                     * Properties of a QueryNextSequenceReceiveResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryNextSequenceReceiveResponse
                     * @property {Long|null} [next_sequence_receive] QueryNextSequenceReceiveResponse next_sequence_receive
                     * @property {Uint8Array|null} [proof] QueryNextSequenceReceiveResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryNextSequenceReceiveResponse proof_height
                     */

                    /**
                     * Constructs a new QueryNextSequenceReceiveResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryNextSequenceReceiveResponse.
                     * @implements IQueryNextSequenceReceiveResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse=} [p] Properties to set
                     */
                    function QueryNextSequenceReceiveResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryNextSequenceReceiveResponse next_sequence_receive.
                     * @member {Long} next_sequence_receive
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.next_sequence_receive = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * QueryNextSequenceReceiveResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryNextSequenceReceiveResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryNextSequenceReceiveResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse} m QueryNextSequenceReceiveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.next_sequence_receive != null && Object.hasOwnProperty.call(m, "next_sequence_receive"))
                            w.uint32(8).uint64(m.next_sequence_receive);
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.next_sequence_receive = r.uint64();
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryNextSequenceReceiveResponse;
                })();

                v1.Channel = (function () {

                    /**
                     * Properties of a Channel.
                     * @memberof ibc.core.channel.v1
                     * @interface IChannel
                     * @property {ibc.core.channel.v1.State|null} [state] Channel state
                     * @property {ibc.core.channel.v1.Order|null} [ordering] Channel ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] Channel counterparty
                     * @property {Array.<string>|null} [connection_hops] Channel connection_hops
                     * @property {string|null} [version] Channel version
                     */

                    /**
                     * Constructs a new Channel.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Channel.
                     * @implements IChannel
                     * @constructor
                     * @param {ibc.core.channel.v1.IChannel=} [p] Properties to set
                     */
                    function Channel(p) {
                        this.connection_hops = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Channel state.
                     * @member {ibc.core.channel.v1.State} state
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.state = 0;

                    /**
                     * Channel ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.ordering = 0;

                    /**
                     * Channel counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.counterparty = null;

                    /**
                     * Channel connection_hops.
                     * @member {Array.<string>} connection_hops
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.connection_hops = $util.emptyArray;

                    /**
                     * Channel version.
                     * @member {string} version
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.version = "";

                    /**
                     * Encodes the specified Channel message. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.IChannel} m Channel message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Channel.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                            w.uint32(8).int32(m.state);
                        if (m.ordering != null && Object.hasOwnProperty.call(m, "ordering"))
                            w.uint32(16).int32(m.ordering);
                        if (m.counterparty != null && Object.hasOwnProperty.call(m, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(m.counterparty, w.uint32(26).fork()).ldelim();
                        if (m.connection_hops != null && m.connection_hops.length) {
                            for (var i = 0; i < m.connection_hops.length; ++i)
                                w.uint32(34).string(m.connection_hops[i]);
                        }
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(42).string(m.version);
                        return w;
                    };

                    /**
                     * Decodes a Channel message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Channel.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.Channel();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.state = r.int32();
                                    break;
                                case 2:
                                    m.ordering = r.int32();
                                    break;
                                case 3:
                                    m.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(r, r.uint32());
                                    break;
                                case 4:
                                    if (!(m.connection_hops && m.connection_hops.length))
                                        m.connection_hops = [];
                                    m.connection_hops.push(r.string());
                                    break;
                                case 5:
                                    m.version = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Channel;
                })();

                v1.IdentifiedChannel = (function () {

                    /**
                     * Properties of an IdentifiedChannel.
                     * @memberof ibc.core.channel.v1
                     * @interface IIdentifiedChannel
                     * @property {ibc.core.channel.v1.State|null} [state] IdentifiedChannel state
                     * @property {ibc.core.channel.v1.Order|null} [ordering] IdentifiedChannel ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] IdentifiedChannel counterparty
                     * @property {Array.<string>|null} [connection_hops] IdentifiedChannel connection_hops
                     * @property {string|null} [version] IdentifiedChannel version
                     * @property {string|null} [port_id] IdentifiedChannel port_id
                     * @property {string|null} [channel_id] IdentifiedChannel channel_id
                     */

                    /**
                     * Constructs a new IdentifiedChannel.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents an IdentifiedChannel.
                     * @implements IIdentifiedChannel
                     * @constructor
                     * @param {ibc.core.channel.v1.IIdentifiedChannel=} [p] Properties to set
                     */
                    function IdentifiedChannel(p) {
                        this.connection_hops = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * IdentifiedChannel state.
                     * @member {ibc.core.channel.v1.State} state
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.state = 0;

                    /**
                     * IdentifiedChannel ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.ordering = 0;

                    /**
                     * IdentifiedChannel counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.counterparty = null;

                    /**
                     * IdentifiedChannel connection_hops.
                     * @member {Array.<string>} connection_hops
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.connection_hops = $util.emptyArray;

                    /**
                     * IdentifiedChannel version.
                     * @member {string} version
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.version = "";

                    /**
                     * IdentifiedChannel port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.port_id = "";

                    /**
                     * IdentifiedChannel channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.channel_id = "";

                    /**
                     * Encodes the specified IdentifiedChannel message. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IIdentifiedChannel} m IdentifiedChannel message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedChannel.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                            w.uint32(8).int32(m.state);
                        if (m.ordering != null && Object.hasOwnProperty.call(m, "ordering"))
                            w.uint32(16).int32(m.ordering);
                        if (m.counterparty != null && Object.hasOwnProperty.call(m, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(m.counterparty, w.uint32(26).fork()).ldelim();
                        if (m.connection_hops != null && m.connection_hops.length) {
                            for (var i = 0; i < m.connection_hops.length; ++i)
                                w.uint32(34).string(m.connection_hops[i]);
                        }
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            w.uint32(42).string(m.version);
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(50).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(58).string(m.channel_id);
                        return w;
                    };

                    /**
                     * Decodes an IdentifiedChannel message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedChannel.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.IdentifiedChannel();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.state = r.int32();
                                    break;
                                case 2:
                                    m.ordering = r.int32();
                                    break;
                                case 3:
                                    m.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(r, r.uint32());
                                    break;
                                case 4:
                                    if (!(m.connection_hops && m.connection_hops.length))
                                        m.connection_hops = [];
                                    m.connection_hops.push(r.string());
                                    break;
                                case 5:
                                    m.version = r.string();
                                    break;
                                case 6:
                                    m.port_id = r.string();
                                    break;
                                case 7:
                                    m.channel_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return IdentifiedChannel;
                })();

                /**
                 * State enum.
                 * @name ibc.core.channel.v1.State
                 * @enum {number}
                 * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} STATE_INIT=1 STATE_INIT value
                 * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                 * @property {number} STATE_OPEN=3 STATE_OPEN value
                 * @property {number} STATE_CLOSED=4 STATE_CLOSED value
                 */
                v1.State = (function () {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "STATE_INIT"] = 1;
                    values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                    values[valuesById[3] = "STATE_OPEN"] = 3;
                    values[valuesById[4] = "STATE_CLOSED"] = 4;
                    return values;
                })();

                /**
                 * Order enum.
                 * @name ibc.core.channel.v1.Order
                 * @enum {number}
                 * @property {number} ORDER_NONE_UNSPECIFIED=0 ORDER_NONE_UNSPECIFIED value
                 * @property {number} ORDER_UNORDERED=1 ORDER_UNORDERED value
                 * @property {number} ORDER_ORDERED=2 ORDER_ORDERED value
                 */
                v1.Order = (function () {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ORDER_NONE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORDER_UNORDERED"] = 1;
                    values[valuesById[2] = "ORDER_ORDERED"] = 2;
                    return values;
                })();

                v1.Counterparty = (function () {

                    /**
                     * Properties of a Counterparty.
                     * @memberof ibc.core.channel.v1
                     * @interface ICounterparty
                     * @property {string|null} [port_id] Counterparty port_id
                     * @property {string|null} [channel_id] Counterparty channel_id
                     */

                    /**
                     * Constructs a new Counterparty.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Counterparty.
                     * @implements ICounterparty
                     * @constructor
                     * @param {ibc.core.channel.v1.ICounterparty=} [p] Properties to set
                     */
                    function Counterparty(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Counterparty port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.port_id = "";

                    /**
                     * Counterparty channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.channel_id = "";

                    /**
                     * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.ICounterparty} m Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        return w;
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.Counterparty();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Counterparty;
                })();

                v1.Packet = (function () {

                    /**
                     * Properties of a Packet.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacket
                     * @property {Long|null} [sequence] Packet sequence
                     * @property {string|null} [source_port] Packet source_port
                     * @property {string|null} [source_channel] Packet source_channel
                     * @property {string|null} [destination_port] Packet destination_port
                     * @property {string|null} [destination_channel] Packet destination_channel
                     * @property {Uint8Array|null} [data] Packet data
                     * @property {ibc.core.client.v1.IHeight|null} [timeout_height] Packet timeout_height
                     * @property {Long|null} [timeout_timestamp] Packet timeout_timestamp
                     */

                    /**
                     * Constructs a new Packet.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Packet.
                     * @implements IPacket
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacket=} [p] Properties to set
                     */
                    function Packet(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Packet sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Packet source_port.
                     * @member {string} source_port
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.source_port = "";

                    /**
                     * Packet source_channel.
                     * @member {string} source_channel
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.source_channel = "";

                    /**
                     * Packet destination_port.
                     * @member {string} destination_port
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.destination_port = "";

                    /**
                     * Packet destination_channel.
                     * @member {string} destination_channel
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.destination_channel = "";

                    /**
                     * Packet data.
                     * @member {Uint8Array} data
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.data = $util.newBuffer([]);

                    /**
                     * Packet timeout_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.timeout_height = null;

                    /**
                     * Packet timeout_timestamp.
                     * @member {Long} timeout_timestamp
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified Packet message. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.IPacket} m Packet message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Packet.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(8).uint64(m.sequence);
                        if (m.source_port != null && Object.hasOwnProperty.call(m, "source_port"))
                            w.uint32(18).string(m.source_port);
                        if (m.source_channel != null && Object.hasOwnProperty.call(m, "source_channel"))
                            w.uint32(26).string(m.source_channel);
                        if (m.destination_port != null && Object.hasOwnProperty.call(m, "destination_port"))
                            w.uint32(34).string(m.destination_port);
                        if (m.destination_channel != null && Object.hasOwnProperty.call(m, "destination_channel"))
                            w.uint32(42).string(m.destination_channel);
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(50).bytes(m.data);
                        if (m.timeout_height != null && Object.hasOwnProperty.call(m, "timeout_height"))
                            $root.ibc.core.client.v1.Height.encode(m.timeout_height, w.uint32(58).fork()).ldelim();
                        if (m.timeout_timestamp != null && Object.hasOwnProperty.call(m, "timeout_timestamp"))
                            w.uint32(64).uint64(m.timeout_timestamp);
                        return w;
                    };

                    /**
                     * Decodes a Packet message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Packet.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.Packet();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.sequence = r.uint64();
                                    break;
                                case 2:
                                    m.source_port = r.string();
                                    break;
                                case 3:
                                    m.source_channel = r.string();
                                    break;
                                case 4:
                                    m.destination_port = r.string();
                                    break;
                                case 5:
                                    m.destination_channel = r.string();
                                    break;
                                case 6:
                                    m.data = r.bytes();
                                    break;
                                case 7:
                                    m.timeout_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 8:
                                    m.timeout_timestamp = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Packet;
                })();

                v1.PacketState = (function () {

                    /**
                     * Properties of a PacketState.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacketState
                     * @property {string|null} [port_id] PacketState port_id
                     * @property {string|null} [channel_id] PacketState channel_id
                     * @property {Long|null} [sequence] PacketState sequence
                     * @property {Uint8Array|null} [data] PacketState data
                     */

                    /**
                     * Constructs a new PacketState.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a PacketState.
                     * @implements IPacketState
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacketState=} [p] Properties to set
                     */
                    function PacketState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PacketState port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.port_id = "";

                    /**
                     * PacketState channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.channel_id = "";

                    /**
                     * PacketState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * PacketState data.
                     * @member {Uint8Array} data
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketState message. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.IPacketState} m PacketState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(24).uint64(m.sequence);
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(34).bytes(m.data);
                        return w;
                    };

                    /**
                     * Decodes a PacketState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.PacketState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.sequence = r.uint64();
                                    break;
                                case 4:
                                    m.data = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PacketState;
                })();

                v1.Acknowledgement = (function () {

                    /**
                     * Properties of an Acknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @interface IAcknowledgement
                     * @property {Uint8Array|null} [result] Acknowledgement result
                     * @property {string|null} [error] Acknowledgement error
                     */

                    /**
                     * Constructs a new Acknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents an Acknowledgement.
                     * @implements IAcknowledgement
                     * @constructor
                     * @param {ibc.core.channel.v1.IAcknowledgement=} [p] Properties to set
                     */
                    function Acknowledgement(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Acknowledgement result.
                     * @member {Uint8Array|null|undefined} result
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Acknowledgement.prototype.result = null;

                    /**
                     * Acknowledgement error.
                     * @member {string|null|undefined} error
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Acknowledgement.prototype.error = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * Acknowledgement response.
                     * @member {"result"|"error"|undefined} response
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Object.defineProperty(Acknowledgement.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["result", "error"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified Acknowledgement message. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IAcknowledgement} m Acknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Acknowledgement.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                            w.uint32(170).bytes(m.result);
                        if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                            w.uint32(178).string(m.error);
                        return w;
                    };

                    /**
                     * Decodes an Acknowledgement message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Acknowledgement.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.Acknowledgement();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 21:
                                    m.result = r.bytes();
                                    break;
                                case 22:
                                    m.error = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Acknowledgement;
                })();

                v1.GenesisState = (function () {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.channel.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] GenesisState channels
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [acknowledgements] GenesisState acknowledgements
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [commitments] GenesisState commitments
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [receipts] GenesisState receipts
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [send_sequences] GenesisState send_sequences
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [recv_sequences] GenesisState recv_sequences
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [ack_sequences] GenesisState ack_sequences
                     * @property {Long|null} [next_channel_sequence] GenesisState next_channel_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.channel.v1.IGenesisState=} [p] Properties to set
                     */
                    function GenesisState(p) {
                        this.channels = [];
                        this.acknowledgements = [];
                        this.commitments = [];
                        this.receipts = [];
                        this.send_sequences = [];
                        this.recv_sequences = [];
                        this.ack_sequences = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenesisState channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.channels = $util.emptyArray;

                    /**
                     * GenesisState acknowledgements.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} acknowledgements
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.acknowledgements = $util.emptyArray;

                    /**
                     * GenesisState commitments.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} commitments
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.commitments = $util.emptyArray;

                    /**
                     * GenesisState receipts.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} receipts
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.receipts = $util.emptyArray;

                    /**
                     * GenesisState send_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} send_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.send_sequences = $util.emptyArray;

                    /**
                     * GenesisState recv_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} recv_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.recv_sequences = $util.emptyArray;

                    /**
                     * GenesisState ack_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} ack_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.ack_sequences = $util.emptyArray;

                    /**
                     * GenesisState next_channel_sequence.
                     * @member {Long} next_channel_sequence
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_channel_sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.channel.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.IGenesisState} m GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.channels != null && m.channels.length) {
                            for (var i = 0; i < m.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(m.channels[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.acknowledgements != null && m.acknowledgements.length) {
                            for (var i = 0; i < m.acknowledgements.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(m.acknowledgements[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.commitments != null && m.commitments.length) {
                            for (var i = 0; i < m.commitments.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(m.commitments[i], w.uint32(26).fork()).ldelim();
                        }
                        if (m.receipts != null && m.receipts.length) {
                            for (var i = 0; i < m.receipts.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(m.receipts[i], w.uint32(34).fork()).ldelim();
                        }
                        if (m.send_sequences != null && m.send_sequences.length) {
                            for (var i = 0; i < m.send_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(m.send_sequences[i], w.uint32(42).fork()).ldelim();
                        }
                        if (m.recv_sequences != null && m.recv_sequences.length) {
                            for (var i = 0; i < m.recv_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(m.recv_sequences[i], w.uint32(50).fork()).ldelim();
                        }
                        if (m.ack_sequences != null && m.ack_sequences.length) {
                            for (var i = 0; i < m.ack_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(m.ack_sequences[i], w.uint32(58).fork()).ldelim();
                        }
                        if (m.next_channel_sequence != null && Object.hasOwnProperty.call(m, "next_channel_sequence"))
                            w.uint32(64).uint64(m.next_channel_sequence);
                        return w;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.GenesisState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.channels && m.channels.length))
                                        m.channels = [];
                                    m.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    if (!(m.acknowledgements && m.acknowledgements.length))
                                        m.acknowledgements = [];
                                    m.acknowledgements.push($root.ibc.core.channel.v1.PacketState.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    if (!(m.commitments && m.commitments.length))
                                        m.commitments = [];
                                    m.commitments.push($root.ibc.core.channel.v1.PacketState.decode(r, r.uint32()));
                                    break;
                                case 4:
                                    if (!(m.receipts && m.receipts.length))
                                        m.receipts = [];
                                    m.receipts.push($root.ibc.core.channel.v1.PacketState.decode(r, r.uint32()));
                                    break;
                                case 5:
                                    if (!(m.send_sequences && m.send_sequences.length))
                                        m.send_sequences = [];
                                    m.send_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(r, r.uint32()));
                                    break;
                                case 6:
                                    if (!(m.recv_sequences && m.recv_sequences.length))
                                        m.recv_sequences = [];
                                    m.recv_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(r, r.uint32()));
                                    break;
                                case 7:
                                    if (!(m.ack_sequences && m.ack_sequences.length))
                                        m.ack_sequences = [];
                                    m.ack_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(r, r.uint32()));
                                    break;
                                case 8:
                                    m.next_channel_sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenesisState;
                })();

                v1.PacketSequence = (function () {

                    /**
                     * Properties of a PacketSequence.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacketSequence
                     * @property {string|null} [port_id] PacketSequence port_id
                     * @property {string|null} [channel_id] PacketSequence channel_id
                     * @property {Long|null} [sequence] PacketSequence sequence
                     */

                    /**
                     * Constructs a new PacketSequence.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a PacketSequence.
                     * @implements IPacketSequence
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacketSequence=} [p] Properties to set
                     */
                    function PacketSequence(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PacketSequence port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.port_id = "";

                    /**
                     * PacketSequence channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.channel_id = "";

                    /**
                     * PacketSequence sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified PacketSequence message. Does not implicitly {@link ibc.core.channel.v1.PacketSequence.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.IPacketSequence} m PacketSequence message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketSequence.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(24).uint64(m.sequence);
                        return w;
                    };

                    /**
                     * Decodes a PacketSequence message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketSequence.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.PacketSequence();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PacketSequence;
                })();

                v1.MsgChannelOpenInit = (function () {

                    /**
                     * Properties of a MsgChannelOpenInit.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenInit
                     * @property {string|null} [port_id] MsgChannelOpenInit port_id
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] MsgChannelOpenInit channel
                     * @property {string|null} [signer] MsgChannelOpenInit signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenInit.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenInit.
                     * @implements IMsgChannelOpenInit
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit=} [p] Properties to set
                     */
                    function MsgChannelOpenInit(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgChannelOpenInit port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.port_id = "";

                    /**
                     * MsgChannelOpenInit channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.channel = null;

                    /**
                     * MsgChannelOpenInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenInit message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} m MsgChannelOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInit.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(m.channel, w.uint32(18).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(26).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInit.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenInit();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel = $root.ibc.core.channel.v1.Channel.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenInit;
                })();

                v1.MsgChannelOpenInitResponse = (function () {

                    /**
                     * Properties of a MsgChannelOpenInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenInitResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenInitResponse.
                     * @implements IMsgChannelOpenInitResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse=} [p] Properties to set
                     */
                    function MsgChannelOpenInitResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenInitResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse} m MsgChannelOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInitResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInitResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenInitResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenInitResponse;
                })();

                v1.MsgChannelOpenTry = (function () {

                    /**
                     * Properties of a MsgChannelOpenTry.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenTry
                     * @property {string|null} [port_id] MsgChannelOpenTry port_id
                     * @property {string|null} [previous_channel_id] MsgChannelOpenTry previous_channel_id
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] MsgChannelOpenTry channel
                     * @property {string|null} [counterparty_version] MsgChannelOpenTry counterparty_version
                     * @property {Uint8Array|null} [proof_init] MsgChannelOpenTry proof_init
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenTry proof_height
                     * @property {string|null} [signer] MsgChannelOpenTry signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenTry.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenTry.
                     * @implements IMsgChannelOpenTry
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry=} [p] Properties to set
                     */
                    function MsgChannelOpenTry(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgChannelOpenTry port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.port_id = "";

                    /**
                     * MsgChannelOpenTry previous_channel_id.
                     * @member {string} previous_channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.previous_channel_id = "";

                    /**
                     * MsgChannelOpenTry channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.channel = null;

                    /**
                     * MsgChannelOpenTry counterparty_version.
                     * @member {string} counterparty_version
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.counterparty_version = "";

                    /**
                     * MsgChannelOpenTry proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenTry proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenTry signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenTry message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTry.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} m MsgChannelOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTry.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.previous_channel_id != null && Object.hasOwnProperty.call(m, "previous_channel_id"))
                            w.uint32(18).string(m.previous_channel_id);
                        if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(m.channel, w.uint32(26).fork()).ldelim();
                        if (m.counterparty_version != null && Object.hasOwnProperty.call(m, "counterparty_version"))
                            w.uint32(34).string(m.counterparty_version);
                        if (m.proof_init != null && Object.hasOwnProperty.call(m, "proof_init"))
                            w.uint32(42).bytes(m.proof_init);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(50).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(58).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenTry message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTry.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenTry();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.previous_channel_id = r.string();
                                    break;
                                case 3:
                                    m.channel = $root.ibc.core.channel.v1.Channel.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.counterparty_version = r.string();
                                    break;
                                case 5:
                                    m.proof_init = r.bytes();
                                    break;
                                case 6:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 7:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenTry;
                })();

                v1.MsgChannelOpenTryResponse = (function () {

                    /**
                     * Properties of a MsgChannelOpenTryResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenTryResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenTryResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenTryResponse.
                     * @implements IMsgChannelOpenTryResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse=} [p] Properties to set
                     */
                    function MsgChannelOpenTryResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenTryResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse} m MsgChannelOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTryResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenTryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTryResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenTryResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenTryResponse;
                })();

                v1.MsgChannelOpenAck = (function () {

                    /**
                     * Properties of a MsgChannelOpenAck.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenAck
                     * @property {string|null} [port_id] MsgChannelOpenAck port_id
                     * @property {string|null} [channel_id] MsgChannelOpenAck channel_id
                     * @property {string|null} [counterparty_channel_id] MsgChannelOpenAck counterparty_channel_id
                     * @property {string|null} [counterparty_version] MsgChannelOpenAck counterparty_version
                     * @property {Uint8Array|null} [proof_try] MsgChannelOpenAck proof_try
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenAck proof_height
                     * @property {string|null} [signer] MsgChannelOpenAck signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenAck.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenAck.
                     * @implements IMsgChannelOpenAck
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck=} [p] Properties to set
                     */
                    function MsgChannelOpenAck(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgChannelOpenAck port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.port_id = "";

                    /**
                     * MsgChannelOpenAck channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.channel_id = "";

                    /**
                     * MsgChannelOpenAck counterparty_channel_id.
                     * @member {string} counterparty_channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.counterparty_channel_id = "";

                    /**
                     * MsgChannelOpenAck counterparty_version.
                     * @member {string} counterparty_version
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.counterparty_version = "";

                    /**
                     * MsgChannelOpenAck proof_try.
                     * @member {Uint8Array} proof_try
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.proof_try = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenAck proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenAck signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenAck message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAck.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} m MsgChannelOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAck.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.counterparty_channel_id != null && Object.hasOwnProperty.call(m, "counterparty_channel_id"))
                            w.uint32(26).string(m.counterparty_channel_id);
                        if (m.counterparty_version != null && Object.hasOwnProperty.call(m, "counterparty_version"))
                            w.uint32(34).string(m.counterparty_version);
                        if (m.proof_try != null && Object.hasOwnProperty.call(m, "proof_try"))
                            w.uint32(42).bytes(m.proof_try);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(50).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(58).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenAck message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAck.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenAck();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.counterparty_channel_id = r.string();
                                    break;
                                case 4:
                                    m.counterparty_version = r.string();
                                    break;
                                case 5:
                                    m.proof_try = r.bytes();
                                    break;
                                case 6:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 7:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenAck;
                })();

                v1.MsgChannelOpenAckResponse = (function () {

                    /**
                     * Properties of a MsgChannelOpenAckResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenAckResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenAckResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenAckResponse.
                     * @implements IMsgChannelOpenAckResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse=} [p] Properties to set
                     */
                    function MsgChannelOpenAckResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenAckResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAckResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse} m MsgChannelOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAckResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenAckResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAckResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenAckResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenAckResponse;
                })();

                v1.MsgChannelOpenConfirm = (function () {

                    /**
                     * Properties of a MsgChannelOpenConfirm.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenConfirm
                     * @property {string|null} [port_id] MsgChannelOpenConfirm port_id
                     * @property {string|null} [channel_id] MsgChannelOpenConfirm channel_id
                     * @property {Uint8Array|null} [proof_ack] MsgChannelOpenConfirm proof_ack
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenConfirm proof_height
                     * @property {string|null} [signer] MsgChannelOpenConfirm signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenConfirm.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenConfirm.
                     * @implements IMsgChannelOpenConfirm
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm=} [p] Properties to set
                     */
                    function MsgChannelOpenConfirm(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgChannelOpenConfirm port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.port_id = "";

                    /**
                     * MsgChannelOpenConfirm channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.channel_id = "";

                    /**
                     * MsgChannelOpenConfirm proof_ack.
                     * @member {Uint8Array} proof_ack
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.proof_ack = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenConfirm message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} m MsgChannelOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirm.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.proof_ack != null && Object.hasOwnProperty.call(m, "proof_ack"))
                            w.uint32(26).bytes(m.proof_ack);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(42).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirm.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenConfirm();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.proof_ack = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenConfirm;
                })();

                v1.MsgChannelOpenConfirmResponse = (function () {

                    /**
                     * Properties of a MsgChannelOpenConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenConfirmResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenConfirmResponse.
                     * @implements IMsgChannelOpenConfirmResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse=} [p] Properties to set
                     */
                    function MsgChannelOpenConfirmResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenConfirmResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse} m MsgChannelOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirmResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirmResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelOpenConfirmResponse;
                })();

                v1.MsgChannelCloseInit = (function () {

                    /**
                     * Properties of a MsgChannelCloseInit.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseInit
                     * @property {string|null} [port_id] MsgChannelCloseInit port_id
                     * @property {string|null} [channel_id] MsgChannelCloseInit channel_id
                     * @property {string|null} [signer] MsgChannelCloseInit signer
                     */

                    /**
                     * Constructs a new MsgChannelCloseInit.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseInit.
                     * @implements IMsgChannelCloseInit
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit=} [p] Properties to set
                     */
                    function MsgChannelCloseInit(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgChannelCloseInit port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.port_id = "";

                    /**
                     * MsgChannelCloseInit channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.channel_id = "";

                    /**
                     * MsgChannelCloseInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelCloseInit message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} m MsgChannelCloseInit message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInit.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(26).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelCloseInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInit.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelCloseInit();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelCloseInit;
                })();

                v1.MsgChannelCloseInitResponse = (function () {

                    /**
                     * Properties of a MsgChannelCloseInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseInitResponse
                     */

                    /**
                     * Constructs a new MsgChannelCloseInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseInitResponse.
                     * @implements IMsgChannelCloseInitResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse=} [p] Properties to set
                     */
                    function MsgChannelCloseInitResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelCloseInitResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse} m MsgChannelCloseInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInitResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelCloseInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInitResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelCloseInitResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelCloseInitResponse;
                })();

                v1.MsgChannelCloseConfirm = (function () {

                    /**
                     * Properties of a MsgChannelCloseConfirm.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseConfirm
                     * @property {string|null} [port_id] MsgChannelCloseConfirm port_id
                     * @property {string|null} [channel_id] MsgChannelCloseConfirm channel_id
                     * @property {Uint8Array|null} [proof_init] MsgChannelCloseConfirm proof_init
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelCloseConfirm proof_height
                     * @property {string|null} [signer] MsgChannelCloseConfirm signer
                     */

                    /**
                     * Constructs a new MsgChannelCloseConfirm.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseConfirm.
                     * @implements IMsgChannelCloseConfirm
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm=} [p] Properties to set
                     */
                    function MsgChannelCloseConfirm(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgChannelCloseConfirm port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.port_id = "";

                    /**
                     * MsgChannelCloseConfirm channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.channel_id = "";

                    /**
                     * MsgChannelCloseConfirm proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgChannelCloseConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.proof_height = null;

                    /**
                     * MsgChannelCloseConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelCloseConfirm message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} m MsgChannelCloseConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirm.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.port_id != null && Object.hasOwnProperty.call(m, "port_id"))
                            w.uint32(10).string(m.port_id);
                        if (m.channel_id != null && Object.hasOwnProperty.call(m, "channel_id"))
                            w.uint32(18).string(m.channel_id);
                        if (m.proof_init != null && Object.hasOwnProperty.call(m, "proof_init"))
                            w.uint32(26).bytes(m.proof_init);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(42).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirm.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelCloseConfirm();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.port_id = r.string();
                                    break;
                                case 2:
                                    m.channel_id = r.string();
                                    break;
                                case 3:
                                    m.proof_init = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelCloseConfirm;
                })();

                v1.MsgChannelCloseConfirmResponse = (function () {

                    /**
                     * Properties of a MsgChannelCloseConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseConfirmResponse
                     */

                    /**
                     * Constructs a new MsgChannelCloseConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseConfirmResponse.
                     * @implements IMsgChannelCloseConfirmResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse=} [p] Properties to set
                     */
                    function MsgChannelCloseConfirmResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelCloseConfirmResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse} m MsgChannelCloseConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirmResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirmResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgChannelCloseConfirmResponse;
                })();

                v1.MsgRecvPacket = (function () {

                    /**
                     * Properties of a MsgRecvPacket.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgRecvPacket
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgRecvPacket packet
                     * @property {Uint8Array|null} [proof_commitment] MsgRecvPacket proof_commitment
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgRecvPacket proof_height
                     * @property {string|null} [signer] MsgRecvPacket signer
                     */

                    /**
                     * Constructs a new MsgRecvPacket.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgRecvPacket.
                     * @implements IMsgRecvPacket
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgRecvPacket=} [p] Properties to set
                     */
                    function MsgRecvPacket(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgRecvPacket packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.packet = null;

                    /**
                     * MsgRecvPacket proof_commitment.
                     * @member {Uint8Array} proof_commitment
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.proof_commitment = $util.newBuffer([]);

                    /**
                     * MsgRecvPacket proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.proof_height = null;

                    /**
                     * MsgRecvPacket signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.signer = "";

                    /**
                     * Encodes the specified MsgRecvPacket message. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacket.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} m MsgRecvPacket message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacket.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.packet != null && Object.hasOwnProperty.call(m, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(m.packet, w.uint32(10).fork()).ldelim();
                        if (m.proof_commitment != null && Object.hasOwnProperty.call(m, "proof_commitment"))
                            w.uint32(18).bytes(m.proof_commitment);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(34).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgRecvPacket message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacket.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgRecvPacket();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.packet = $root.ibc.core.channel.v1.Packet.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof_commitment = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgRecvPacket;
                })();

                v1.MsgRecvPacketResponse = (function () {

                    /**
                     * Properties of a MsgRecvPacketResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgRecvPacketResponse
                     */

                    /**
                     * Constructs a new MsgRecvPacketResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgRecvPacketResponse.
                     * @implements IMsgRecvPacketResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse=} [p] Properties to set
                     */
                    function MsgRecvPacketResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgRecvPacketResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacketResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse} m MsgRecvPacketResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacketResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgRecvPacketResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacketResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgRecvPacketResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgRecvPacketResponse;
                })();

                v1.MsgTimeout = (function () {

                    /**
                     * Properties of a MsgTimeout.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeout
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgTimeout packet
                     * @property {Uint8Array|null} [proof_unreceived] MsgTimeout proof_unreceived
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgTimeout proof_height
                     * @property {Long|null} [next_sequence_recv] MsgTimeout next_sequence_recv
                     * @property {string|null} [signer] MsgTimeout signer
                     */

                    /**
                     * Constructs a new MsgTimeout.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeout.
                     * @implements IMsgTimeout
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeout=} [p] Properties to set
                     */
                    function MsgTimeout(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgTimeout packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.packet = null;

                    /**
                     * MsgTimeout proof_unreceived.
                     * @member {Uint8Array} proof_unreceived
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.proof_unreceived = $util.newBuffer([]);

                    /**
                     * MsgTimeout proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.proof_height = null;

                    /**
                     * MsgTimeout next_sequence_recv.
                     * @member {Long} next_sequence_recv
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.next_sequence_recv = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * MsgTimeout signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.signer = "";

                    /**
                     * Encodes the specified MsgTimeout message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeout.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeout} m MsgTimeout message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeout.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.packet != null && Object.hasOwnProperty.call(m, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(m.packet, w.uint32(10).fork()).ldelim();
                        if (m.proof_unreceived != null && Object.hasOwnProperty.call(m, "proof_unreceived"))
                            w.uint32(18).bytes(m.proof_unreceived);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        if (m.next_sequence_recv != null && Object.hasOwnProperty.call(m, "next_sequence_recv"))
                            w.uint32(32).uint64(m.next_sequence_recv);
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(42).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgTimeout message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeout.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgTimeout();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.packet = $root.ibc.core.channel.v1.Packet.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof_unreceived = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.next_sequence_recv = r.uint64();
                                    break;
                                case 5:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgTimeout;
                })();

                v1.MsgTimeoutResponse = (function () {

                    /**
                     * Properties of a MsgTimeoutResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutResponse
                     */

                    /**
                     * Constructs a new MsgTimeoutResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutResponse.
                     * @implements IMsgTimeoutResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse=} [p] Properties to set
                     */
                    function MsgTimeoutResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgTimeoutResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse} m MsgTimeoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgTimeoutResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgTimeoutResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgTimeoutResponse;
                })();

                v1.MsgTimeoutOnClose = (function () {

                    /**
                     * Properties of a MsgTimeoutOnClose.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutOnClose
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgTimeoutOnClose packet
                     * @property {Uint8Array|null} [proof_unreceived] MsgTimeoutOnClose proof_unreceived
                     * @property {Uint8Array|null} [proof_close] MsgTimeoutOnClose proof_close
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgTimeoutOnClose proof_height
                     * @property {Long|null} [next_sequence_recv] MsgTimeoutOnClose next_sequence_recv
                     * @property {string|null} [signer] MsgTimeoutOnClose signer
                     */

                    /**
                     * Constructs a new MsgTimeoutOnClose.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutOnClose.
                     * @implements IMsgTimeoutOnClose
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose=} [p] Properties to set
                     */
                    function MsgTimeoutOnClose(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgTimeoutOnClose packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.packet = null;

                    /**
                     * MsgTimeoutOnClose proof_unreceived.
                     * @member {Uint8Array} proof_unreceived
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_unreceived = $util.newBuffer([]);

                    /**
                     * MsgTimeoutOnClose proof_close.
                     * @member {Uint8Array} proof_close
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_close = $util.newBuffer([]);

                    /**
                     * MsgTimeoutOnClose proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_height = null;

                    /**
                     * MsgTimeoutOnClose next_sequence_recv.
                     * @member {Long} next_sequence_recv
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.next_sequence_recv = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * MsgTimeoutOnClose signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.signer = "";

                    /**
                     * Encodes the specified MsgTimeoutOnClose message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnClose.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} m MsgTimeoutOnClose message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnClose.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.packet != null && Object.hasOwnProperty.call(m, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(m.packet, w.uint32(10).fork()).ldelim();
                        if (m.proof_unreceived != null && Object.hasOwnProperty.call(m, "proof_unreceived"))
                            w.uint32(18).bytes(m.proof_unreceived);
                        if (m.proof_close != null && Object.hasOwnProperty.call(m, "proof_close"))
                            w.uint32(26).bytes(m.proof_close);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        if (m.next_sequence_recv != null && Object.hasOwnProperty.call(m, "next_sequence_recv"))
                            w.uint32(40).uint64(m.next_sequence_recv);
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(50).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgTimeoutOnClose message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnClose.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgTimeoutOnClose();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.packet = $root.ibc.core.channel.v1.Packet.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof_unreceived = r.bytes();
                                    break;
                                case 3:
                                    m.proof_close = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.next_sequence_recv = r.uint64();
                                    break;
                                case 6:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgTimeoutOnClose;
                })();

                v1.MsgTimeoutOnCloseResponse = (function () {

                    /**
                     * Properties of a MsgTimeoutOnCloseResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutOnCloseResponse
                     */

                    /**
                     * Constructs a new MsgTimeoutOnCloseResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutOnCloseResponse.
                     * @implements IMsgTimeoutOnCloseResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse=} [p] Properties to set
                     */
                    function MsgTimeoutOnCloseResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgTimeoutOnCloseResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnCloseResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse} m MsgTimeoutOnCloseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnCloseResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgTimeoutOnCloseResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnCloseResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgTimeoutOnCloseResponse;
                })();

                v1.MsgAcknowledgement = (function () {

                    /**
                     * Properties of a MsgAcknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgAcknowledgement
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgAcknowledgement packet
                     * @property {Uint8Array|null} [acknowledgement] MsgAcknowledgement acknowledgement
                     * @property {Uint8Array|null} [proof_acked] MsgAcknowledgement proof_acked
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgAcknowledgement proof_height
                     * @property {string|null} [signer] MsgAcknowledgement signer
                     */

                    /**
                     * Constructs a new MsgAcknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgAcknowledgement.
                     * @implements IMsgAcknowledgement
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement=} [p] Properties to set
                     */
                    function MsgAcknowledgement(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgAcknowledgement packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.packet = null;

                    /**
                     * MsgAcknowledgement acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * MsgAcknowledgement proof_acked.
                     * @member {Uint8Array} proof_acked
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.proof_acked = $util.newBuffer([]);

                    /**
                     * MsgAcknowledgement proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.proof_height = null;

                    /**
                     * MsgAcknowledgement signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.signer = "";

                    /**
                     * Encodes the specified MsgAcknowledgement message. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgement.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} m MsgAcknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgement.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.packet != null && Object.hasOwnProperty.call(m, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(m.packet, w.uint32(10).fork()).ldelim();
                        if (m.acknowledgement != null && Object.hasOwnProperty.call(m, "acknowledgement"))
                            w.uint32(18).bytes(m.acknowledgement);
                        if (m.proof_acked != null && Object.hasOwnProperty.call(m, "proof_acked"))
                            w.uint32(26).bytes(m.proof_acked);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(42).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgAcknowledgement message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgement.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgAcknowledgement();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.packet = $root.ibc.core.channel.v1.Packet.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.acknowledgement = r.bytes();
                                    break;
                                case 3:
                                    m.proof_acked = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgAcknowledgement;
                })();

                v1.MsgAcknowledgementResponse = (function () {

                    /**
                     * Properties of a MsgAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgAcknowledgementResponse
                     */

                    /**
                     * Constructs a new MsgAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgAcknowledgementResponse.
                     * @implements IMsgAcknowledgementResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse=} [p] Properties to set
                     */
                    function MsgAcknowledgementResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgAcknowledgementResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse} m MsgAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgementResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgAcknowledgementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgementResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.channel.v1.MsgAcknowledgementResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgAcknowledgementResponse;
                })();

                return v1;
            })();

            return channel;
        })();

        core.client = (function () {

            /**
             * Namespace client.
             * @memberof ibc.core
             * @namespace
             */
            const client = {};

            client.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.client
                 * @namespace
                 */
                const v1 = {};

                v1.QueryClientStateRequest = (function () {

                    /**
                     * Properties of a QueryClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStateRequest
                     * @property {string|null} [client_id] QueryClientStateRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStateRequest.
                     * @implements IQueryClientStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStateRequest=} [p] Properties to set
                     */
                    function QueryClientStateRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientStateRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @instance
                     */
                    QueryClientStateRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} m QueryClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryClientStateRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientStateRequest;
                })();

                v1.QueryClientStateResponse = (function () {

                    /**
                     * Properties of a QueryClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStateResponse
                     * @property {google.protobuf.IAny|null} [client_state] QueryClientStateResponse client_state
                     * @property {Uint8Array|null} [proof] QueryClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStateResponse.
                     * @implements IQueryClientStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStateResponse=} [p] Properties to set
                     */
                    function QueryClientStateResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientStateResponse client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.client_state = null;

                    /**
                     * QueryClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryClientStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateResponse} m QueryClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(10).fork()).ldelim();
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryClientStateResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientStateResponse;
                })();

                v1.QueryClientStatesRequest = (function () {

                    /**
                     * Properties of a QueryClientStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatesRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryClientStatesRequest pagination
                     */

                    /**
                     * Constructs a new QueryClientStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatesRequest.
                     * @implements IQueryClientStatesRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest=} [p] Properties to set
                     */
                    function QueryClientStatesRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientStatesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @instance
                     */
                    QueryClientStatesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryClientStatesRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} m QueryClientStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryClientStatesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryClientStatesRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientStatesRequest;
                })();

                v1.QueryClientStatesResponse = (function () {

                    /**
                     * Properties of a QueryClientStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatesResponse
                     * @property {Array.<ibc.core.client.v1.IIdentifiedClientState>|null} [client_states] QueryClientStatesResponse client_states
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryClientStatesResponse pagination
                     */

                    /**
                     * Constructs a new QueryClientStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatesResponse.
                     * @implements IQueryClientStatesResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse=} [p] Properties to set
                     */
                    function QueryClientStatesResponse(p) {
                        this.client_states = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientStatesResponse client_states.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedClientState>} client_states
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     */
                    QueryClientStatesResponse.prototype.client_states = $util.emptyArray;

                    /**
                     * QueryClientStatesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     */
                    QueryClientStatesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryClientStatesResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse} m QueryClientStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_states != null && m.client_states.length) {
                            for (var i = 0; i < m.client_states.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedClientState.encode(m.client_states[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryClientStatesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryClientStatesResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.client_states && m.client_states.length))
                                        m.client_states = [];
                                    m.client_states.push($root.ibc.core.client.v1.IdentifiedClientState.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientStatesResponse;
                })();

                v1.QueryConsensusStateRequest = (function () {

                    /**
                     * Properties of a QueryConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStateRequest
                     * @property {string|null} [client_id] QueryConsensusStateRequest client_id
                     * @property {Long|null} [revision_number] QueryConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryConsensusStateRequest revision_height
                     * @property {boolean|null} [latest_height] QueryConsensusStateRequest latest_height
                     */

                    /**
                     * Constructs a new QueryConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStateRequest.
                     * @implements IQueryConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest=} [p] Properties to set
                     */
                    function QueryConsensusStateRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConsensusStateRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.client_id = "";

                    /**
                     * QueryConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * QueryConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * QueryConsensusStateRequest latest_height.
                     * @member {boolean} latest_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.latest_height = false;

                    /**
                     * Encodes the specified QueryConsensusStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} m QueryConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.revision_number != null && Object.hasOwnProperty.call(m, "revision_number"))
                            w.uint32(16).uint64(m.revision_number);
                        if (m.revision_height != null && Object.hasOwnProperty.call(m, "revision_height"))
                            w.uint32(24).uint64(m.revision_height);
                        if (m.latest_height != null && Object.hasOwnProperty.call(m, "latest_height"))
                            w.uint32(32).bool(m.latest_height);
                        return w;
                    };

                    /**
                     * Decodes a QueryConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryConsensusStateRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.revision_number = r.uint64();
                                    break;
                                case 3:
                                    m.revision_height = r.uint64();
                                    break;
                                case 4:
                                    m.latest_height = r.bool();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConsensusStateRequest;
                })();

                v1.QueryConsensusStateResponse = (function () {

                    /**
                     * Properties of a QueryConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryConsensusStateResponse consensus_state
                     * @property {Uint8Array|null} [proof] QueryConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStateResponse.
                     * @implements IQueryConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse=} [p] Properties to set
                     */
                    function QueryConsensusStateResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConsensusStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse} m QueryConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(10).fork()).ldelim();
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryConsensusStateResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConsensusStateResponse;
                })();

                v1.QueryConsensusStatesRequest = (function () {

                    /**
                     * Properties of a QueryConsensusStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStatesRequest
                     * @property {string|null} [client_id] QueryConsensusStatesRequest client_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConsensusStatesRequest pagination
                     */

                    /**
                     * Constructs a new QueryConsensusStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStatesRequest.
                     * @implements IQueryConsensusStatesRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest=} [p] Properties to set
                     */
                    function QueryConsensusStatesRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConsensusStatesRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     */
                    QueryConsensusStatesRequest.prototype.client_id = "";

                    /**
                     * QueryConsensusStatesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     */
                    QueryConsensusStatesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConsensusStatesRequest message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} m QueryConsensusStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConsensusStatesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryConsensusStatesRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConsensusStatesRequest;
                })();

                v1.QueryConsensusStatesResponse = (function () {

                    /**
                     * Properties of a QueryConsensusStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStatesResponse
                     * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] QueryConsensusStatesResponse consensus_states
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConsensusStatesResponse pagination
                     */

                    /**
                     * Constructs a new QueryConsensusStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStatesResponse.
                     * @implements IQueryConsensusStatesResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse=} [p] Properties to set
                     */
                    function QueryConsensusStatesResponse(p) {
                        this.consensus_states = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConsensusStatesResponse consensus_states.
                     * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     */
                    QueryConsensusStatesResponse.prototype.consensus_states = $util.emptyArray;

                    /**
                     * QueryConsensusStatesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     */
                    QueryConsensusStatesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConsensusStatesResponse message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse} m QueryConsensusStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.consensus_states != null && m.consensus_states.length) {
                            for (var i = 0; i < m.consensus_states.length; ++i)
                                $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(m.consensus_states[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConsensusStatesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryConsensusStatesResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.consensus_states && m.consensus_states.length))
                                        m.consensus_states = [];
                                    m.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConsensusStatesResponse;
                })();

                v1.QueryClientParamsRequest = (function () {

                    /**
                     * Properties of a QueryClientParamsRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientParamsRequest
                     */

                    /**
                     * Constructs a new QueryClientParamsRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientParamsRequest.
                     * @implements IQueryClientParamsRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest=} [p] Properties to set
                     */
                    function QueryClientParamsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified QueryClientParamsRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} m QueryClientParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a QueryClientParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryClientParamsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientParamsRequest;
                })();

                v1.QueryClientParamsResponse = (function () {

                    /**
                     * Properties of a QueryClientParamsResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientParamsResponse
                     * @property {ibc.core.client.v1.IParams|null} [params] QueryClientParamsResponse params
                     */

                    /**
                     * Constructs a new QueryClientParamsResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientParamsResponse.
                     * @implements IQueryClientParamsResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse=} [p] Properties to set
                     */
                    function QueryClientParamsResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientParamsResponse params.
                     * @member {ibc.core.client.v1.IParams|null|undefined} params
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @instance
                     */
                    QueryClientParamsResponse.prototype.params = null;

                    /**
                     * Encodes the specified QueryClientParamsResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse} m QueryClientParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                            $root.ibc.core.client.v1.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryClientParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.QueryClientParamsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.params = $root.ibc.core.client.v1.Params.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientParamsResponse;
                })();

                v1.GenesisState = (function () {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.client.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.client.v1.IIdentifiedClientState>|null} [clients] GenesisState clients
                     * @property {Array.<ibc.core.client.v1.IClientConsensusStates>|null} [clients_consensus] GenesisState clients_consensus
                     * @property {Array.<ibc.core.client.v1.IIdentifiedGenesisMetadata>|null} [clients_metadata] GenesisState clients_metadata
                     * @property {ibc.core.client.v1.IParams|null} [params] GenesisState params
                     * @property {boolean|null} [create_localhost] GenesisState create_localhost
                     * @property {Long|null} [next_client_sequence] GenesisState next_client_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.client.v1.IGenesisState=} [p] Properties to set
                     */
                    function GenesisState(p) {
                        this.clients = [];
                        this.clients_consensus = [];
                        this.clients_metadata = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenesisState clients.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedClientState>} clients
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients = $util.emptyArray;

                    /**
                     * GenesisState clients_consensus.
                     * @member {Array.<ibc.core.client.v1.IClientConsensusStates>} clients_consensus
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients_consensus = $util.emptyArray;

                    /**
                     * GenesisState clients_metadata.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedGenesisMetadata>} clients_metadata
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients_metadata = $util.emptyArray;

                    /**
                     * GenesisState params.
                     * @member {ibc.core.client.v1.IParams|null|undefined} params
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * GenesisState create_localhost.
                     * @member {boolean} create_localhost
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.create_localhost = false;

                    /**
                     * GenesisState next_client_sequence.
                     * @member {Long} next_client_sequence
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_client_sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.client.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.IGenesisState} m GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.clients != null && m.clients.length) {
                            for (var i = 0; i < m.clients.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedClientState.encode(m.clients[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.clients_consensus != null && m.clients_consensus.length) {
                            for (var i = 0; i < m.clients_consensus.length; ++i)
                                $root.ibc.core.client.v1.ClientConsensusStates.encode(m.clients_consensus[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.clients_metadata != null && m.clients_metadata.length) {
                            for (var i = 0; i < m.clients_metadata.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedGenesisMetadata.encode(m.clients_metadata[i], w.uint32(26).fork()).ldelim();
                        }
                        if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                            $root.ibc.core.client.v1.Params.encode(m.params, w.uint32(34).fork()).ldelim();
                        if (m.create_localhost != null && Object.hasOwnProperty.call(m, "create_localhost"))
                            w.uint32(40).bool(m.create_localhost);
                        if (m.next_client_sequence != null && Object.hasOwnProperty.call(m, "next_client_sequence"))
                            w.uint32(48).uint64(m.next_client_sequence);
                        return w;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.GenesisState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.clients && m.clients.length))
                                        m.clients = [];
                                    m.clients.push($root.ibc.core.client.v1.IdentifiedClientState.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    if (!(m.clients_consensus && m.clients_consensus.length))
                                        m.clients_consensus = [];
                                    m.clients_consensus.push($root.ibc.core.client.v1.ClientConsensusStates.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    if (!(m.clients_metadata && m.clients_metadata.length))
                                        m.clients_metadata = [];
                                    m.clients_metadata.push($root.ibc.core.client.v1.IdentifiedGenesisMetadata.decode(r, r.uint32()));
                                    break;
                                case 4:
                                    m.params = $root.ibc.core.client.v1.Params.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.create_localhost = r.bool();
                                    break;
                                case 6:
                                    m.next_client_sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenesisState;
                })();

                v1.GenesisMetadata = (function () {

                    /**
                     * Properties of a GenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @interface IGenesisMetadata
                     * @property {Uint8Array|null} [key] GenesisMetadata key
                     * @property {Uint8Array|null} [value] GenesisMetadata value
                     */

                    /**
                     * Constructs a new GenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a GenesisMetadata.
                     * @implements IGenesisMetadata
                     * @constructor
                     * @param {ibc.core.client.v1.IGenesisMetadata=} [p] Properties to set
                     */
                    function GenesisMetadata(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenesisMetadata key.
                     * @member {Uint8Array} key
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     */
                    GenesisMetadata.prototype.key = $util.newBuffer([]);

                    /**
                     * GenesisMetadata value.
                     * @member {Uint8Array} value
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     */
                    GenesisMetadata.prototype.value = $util.newBuffer([]);

                    /**
                     * Encodes the specified GenesisMetadata message. Does not implicitly {@link ibc.core.client.v1.GenesisMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IGenesisMetadata} m GenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisMetadata.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                            w.uint32(10).bytes(m.key);
                        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                            w.uint32(18).bytes(m.value);
                        return w;
                    };

                    /**
                     * Decodes a GenesisMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisMetadata.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.GenesisMetadata();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.key = r.bytes();
                                    break;
                                case 2:
                                    m.value = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenesisMetadata;
                })();

                v1.IdentifiedGenesisMetadata = (function () {

                    /**
                     * Properties of an IdentifiedGenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @interface IIdentifiedGenesisMetadata
                     * @property {string|null} [client_id] IdentifiedGenesisMetadata client_id
                     * @property {Array.<ibc.core.client.v1.IGenesisMetadata>|null} [client_metadata] IdentifiedGenesisMetadata client_metadata
                     */

                    /**
                     * Constructs a new IdentifiedGenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an IdentifiedGenesisMetadata.
                     * @implements IIdentifiedGenesisMetadata
                     * @constructor
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata=} [p] Properties to set
                     */
                    function IdentifiedGenesisMetadata(p) {
                        this.client_metadata = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * IdentifiedGenesisMetadata client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     */
                    IdentifiedGenesisMetadata.prototype.client_id = "";

                    /**
                     * IdentifiedGenesisMetadata client_metadata.
                     * @member {Array.<ibc.core.client.v1.IGenesisMetadata>} client_metadata
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     */
                    IdentifiedGenesisMetadata.prototype.client_metadata = $util.emptyArray;

                    /**
                     * Encodes the specified IdentifiedGenesisMetadata message. Does not implicitly {@link ibc.core.client.v1.IdentifiedGenesisMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata} m IdentifiedGenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedGenesisMetadata.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.client_metadata != null && m.client_metadata.length) {
                            for (var i = 0; i < m.client_metadata.length; ++i)
                                $root.ibc.core.client.v1.GenesisMetadata.encode(m.client_metadata[i], w.uint32(18).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes an IdentifiedGenesisMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedGenesisMetadata.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.IdentifiedGenesisMetadata();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    if (!(m.client_metadata && m.client_metadata.length))
                                        m.client_metadata = [];
                                    m.client_metadata.push($root.ibc.core.client.v1.GenesisMetadata.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return IdentifiedGenesisMetadata;
                })();

                v1.MsgCreateClient = (function () {

                    /**
                     * Properties of a MsgCreateClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgCreateClient
                     * @property {google.protobuf.IAny|null} [client_state] MsgCreateClient client_state
                     * @property {google.protobuf.IAny|null} [consensus_state] MsgCreateClient consensus_state
                     * @property {string|null} [signer] MsgCreateClient signer
                     */

                    /**
                     * Constructs a new MsgCreateClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgCreateClient.
                     * @implements IMsgCreateClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgCreateClient=} [p] Properties to set
                     */
                    function MsgCreateClient(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgCreateClient client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.client_state = null;

                    /**
                     * MsgCreateClient consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.consensus_state = null;

                    /**
                     * MsgCreateClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgCreateClient message. Does not implicitly {@link ibc.core.client.v1.MsgCreateClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClient} m MsgCreateClient message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClient.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(10).fork()).ldelim();
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(18).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(26).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgCreateClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClient.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgCreateClient();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgCreateClient;
                })();

                v1.MsgCreateClientResponse = (function () {

                    /**
                     * Properties of a MsgCreateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgCreateClientResponse
                     */

                    /**
                     * Constructs a new MsgCreateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgCreateClientResponse.
                     * @implements IMsgCreateClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse=} [p] Properties to set
                     */
                    function MsgCreateClientResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgCreateClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgCreateClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse} m MsgCreateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClientResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgCreateClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClientResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgCreateClientResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgCreateClientResponse;
                })();

                v1.MsgUpdateClient = (function () {

                    /**
                     * Properties of a MsgUpdateClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpdateClient
                     * @property {string|null} [client_id] MsgUpdateClient client_id
                     * @property {google.protobuf.IAny|null} [header] MsgUpdateClient header
                     * @property {string|null} [signer] MsgUpdateClient signer
                     */

                    /**
                     * Constructs a new MsgUpdateClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpdateClient.
                     * @implements IMsgUpdateClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpdateClient=} [p] Properties to set
                     */
                    function MsgUpdateClient(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgUpdateClient client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.client_id = "";

                    /**
                     * MsgUpdateClient header.
                     * @member {google.protobuf.IAny|null|undefined} header
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.header = null;

                    /**
                     * MsgUpdateClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgUpdateClient message. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClient} m MsgUpdateClient message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClient.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                            $root.google.protobuf.Any.encode(m.header, w.uint32(18).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(26).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgUpdateClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClient.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgUpdateClient();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.header = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgUpdateClient;
                })();

                v1.MsgUpdateClientResponse = (function () {

                    /**
                     * Properties of a MsgUpdateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpdateClientResponse
                     */

                    /**
                     * Constructs a new MsgUpdateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpdateClientResponse.
                     * @implements IMsgUpdateClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse=} [p] Properties to set
                     */
                    function MsgUpdateClientResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgUpdateClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse} m MsgUpdateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClientResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgUpdateClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClientResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgUpdateClientResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgUpdateClientResponse;
                })();

                v1.MsgUpgradeClient = (function () {

                    /**
                     * Properties of a MsgUpgradeClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpgradeClient
                     * @property {string|null} [client_id] MsgUpgradeClient client_id
                     * @property {google.protobuf.IAny|null} [client_state] MsgUpgradeClient client_state
                     * @property {google.protobuf.IAny|null} [consensus_state] MsgUpgradeClient consensus_state
                     * @property {Uint8Array|null} [proof_upgrade_client] MsgUpgradeClient proof_upgrade_client
                     * @property {Uint8Array|null} [proof_upgrade_consensus_state] MsgUpgradeClient proof_upgrade_consensus_state
                     * @property {string|null} [signer] MsgUpgradeClient signer
                     */

                    /**
                     * Constructs a new MsgUpgradeClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpgradeClient.
                     * @implements IMsgUpgradeClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpgradeClient=} [p] Properties to set
                     */
                    function MsgUpgradeClient(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgUpgradeClient client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.client_id = "";

                    /**
                     * MsgUpgradeClient client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.client_state = null;

                    /**
                     * MsgUpgradeClient consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.consensus_state = null;

                    /**
                     * MsgUpgradeClient proof_upgrade_client.
                     * @member {Uint8Array} proof_upgrade_client
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.proof_upgrade_client = $util.newBuffer([]);

                    /**
                     * MsgUpgradeClient proof_upgrade_consensus_state.
                     * @member {Uint8Array} proof_upgrade_consensus_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.proof_upgrade_consensus_state = $util.newBuffer([]);

                    /**
                     * MsgUpgradeClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgUpgradeClient message. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} m MsgUpgradeClient message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClient.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(18).fork()).ldelim();
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(26).fork()).ldelim();
                        if (m.proof_upgrade_client != null && Object.hasOwnProperty.call(m, "proof_upgrade_client"))
                            w.uint32(34).bytes(m.proof_upgrade_client);
                        if (m.proof_upgrade_consensus_state != null && Object.hasOwnProperty.call(m, "proof_upgrade_consensus_state"))
                            w.uint32(42).bytes(m.proof_upgrade_consensus_state);
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(50).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgUpgradeClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClient.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgUpgradeClient();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.proof_upgrade_client = r.bytes();
                                    break;
                                case 5:
                                    m.proof_upgrade_consensus_state = r.bytes();
                                    break;
                                case 6:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgUpgradeClient;
                })();

                v1.MsgUpgradeClientResponse = (function () {

                    /**
                     * Properties of a MsgUpgradeClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpgradeClientResponse
                     */

                    /**
                     * Constructs a new MsgUpgradeClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpgradeClientResponse.
                     * @implements IMsgUpgradeClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse=} [p] Properties to set
                     */
                    function MsgUpgradeClientResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgUpgradeClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse} m MsgUpgradeClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClientResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgUpgradeClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClientResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgUpgradeClientResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgUpgradeClientResponse;
                })();

                v1.MsgSubmitMisbehaviour = (function () {

                    /**
                     * Properties of a MsgSubmitMisbehaviour.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgSubmitMisbehaviour
                     * @property {string|null} [client_id] MsgSubmitMisbehaviour client_id
                     * @property {google.protobuf.IAny|null} [misbehaviour] MsgSubmitMisbehaviour misbehaviour
                     * @property {string|null} [signer] MsgSubmitMisbehaviour signer
                     */

                    /**
                     * Constructs a new MsgSubmitMisbehaviour.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgSubmitMisbehaviour.
                     * @implements IMsgSubmitMisbehaviour
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour=} [p] Properties to set
                     */
                    function MsgSubmitMisbehaviour(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgSubmitMisbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.client_id = "";

                    /**
                     * MsgSubmitMisbehaviour misbehaviour.
                     * @member {google.protobuf.IAny|null|undefined} misbehaviour
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.misbehaviour = null;

                    /**
                     * MsgSubmitMisbehaviour signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.signer = "";

                    /**
                     * Encodes the specified MsgSubmitMisbehaviour message. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} m MsgSubmitMisbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviour.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.misbehaviour != null && Object.hasOwnProperty.call(m, "misbehaviour"))
                            $root.google.protobuf.Any.encode(m.misbehaviour, w.uint32(18).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(26).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviour.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgSubmitMisbehaviour();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.misbehaviour = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgSubmitMisbehaviour;
                })();

                v1.MsgSubmitMisbehaviourResponse = (function () {

                    /**
                     * Properties of a MsgSubmitMisbehaviourResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgSubmitMisbehaviourResponse
                     */

                    /**
                     * Constructs a new MsgSubmitMisbehaviourResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgSubmitMisbehaviourResponse.
                     * @implements IMsgSubmitMisbehaviourResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse=} [p] Properties to set
                     */
                    function MsgSubmitMisbehaviourResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgSubmitMisbehaviourResponse message. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviourResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse} m MsgSubmitMisbehaviourResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviourResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviourResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviourResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgSubmitMisbehaviourResponse;
                })();

                v1.IdentifiedClientState = (function () {

                    /**
                     * Properties of an IdentifiedClientState.
                     * @memberof ibc.core.client.v1
                     * @interface IIdentifiedClientState
                     * @property {string|null} [client_id] IdentifiedClientState client_id
                     * @property {google.protobuf.IAny|null} [client_state] IdentifiedClientState client_state
                     */

                    /**
                     * Constructs a new IdentifiedClientState.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an IdentifiedClientState.
                     * @implements IIdentifiedClientState
                     * @constructor
                     * @param {ibc.core.client.v1.IIdentifiedClientState=} [p] Properties to set
                     */
                    function IdentifiedClientState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * IdentifiedClientState client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     */
                    IdentifiedClientState.prototype.client_id = "";

                    /**
                     * IdentifiedClientState client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     */
                    IdentifiedClientState.prototype.client_state = null;

                    /**
                     * Encodes the specified IdentifiedClientState message. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedClientState} m IdentifiedClientState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedClientState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes an IdentifiedClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedClientState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.IdentifiedClientState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return IdentifiedClientState;
                })();

                v1.ConsensusStateWithHeight = (function () {

                    /**
                     * Properties of a ConsensusStateWithHeight.
                     * @memberof ibc.core.client.v1
                     * @interface IConsensusStateWithHeight
                     * @property {ibc.core.client.v1.IHeight|null} [height] ConsensusStateWithHeight height
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateWithHeight consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateWithHeight.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ConsensusStateWithHeight.
                     * @implements IConsensusStateWithHeight
                     * @constructor
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight=} [p] Properties to set
                     */
                    function ConsensusStateWithHeight(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConsensusStateWithHeight height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     */
                    ConsensusStateWithHeight.prototype.height = null;

                    /**
                     * ConsensusStateWithHeight consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     */
                    ConsensusStateWithHeight.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateWithHeight message. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight} m ConsensusStateWithHeight message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateWithHeight.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(10).fork()).ldelim();
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ConsensusStateWithHeight message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateWithHeight.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConsensusStateWithHeight;
                })();

                v1.ClientConsensusStates = (function () {

                    /**
                     * Properties of a ClientConsensusStates.
                     * @memberof ibc.core.client.v1
                     * @interface IClientConsensusStates
                     * @property {string|null} [client_id] ClientConsensusStates client_id
                     * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] ClientConsensusStates consensus_states
                     */

                    /**
                     * Constructs a new ClientConsensusStates.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ClientConsensusStates.
                     * @implements IClientConsensusStates
                     * @constructor
                     * @param {ibc.core.client.v1.IClientConsensusStates=} [p] Properties to set
                     */
                    function ClientConsensusStates(p) {
                        this.consensus_states = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientConsensusStates client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     */
                    ClientConsensusStates.prototype.client_id = "";

                    /**
                     * ClientConsensusStates consensus_states.
                     * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     */
                    ClientConsensusStates.prototype.consensus_states = $util.emptyArray;

                    /**
                     * Encodes the specified ClientConsensusStates message. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.IClientConsensusStates} m ClientConsensusStates message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConsensusStates.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.consensus_states != null && m.consensus_states.length) {
                            for (var i = 0; i < m.consensus_states.length; ++i)
                                $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(m.consensus_states[i], w.uint32(18).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a ClientConsensusStates message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConsensusStates.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.ClientConsensusStates();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    if (!(m.consensus_states && m.consensus_states.length))
                                        m.consensus_states = [];
                                    m.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientConsensusStates;
                })();

                v1.ClientUpdateProposal = (function () {

                    /**
                     * Properties of a ClientUpdateProposal.
                     * @memberof ibc.core.client.v1
                     * @interface IClientUpdateProposal
                     * @property {string|null} [title] ClientUpdateProposal title
                     * @property {string|null} [description] ClientUpdateProposal description
                     * @property {string|null} [client_id] ClientUpdateProposal client_id
                     * @property {google.protobuf.IAny|null} [header] ClientUpdateProposal header
                     */

                    /**
                     * Constructs a new ClientUpdateProposal.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ClientUpdateProposal.
                     * @implements IClientUpdateProposal
                     * @constructor
                     * @param {ibc.core.client.v1.IClientUpdateProposal=} [p] Properties to set
                     */
                    function ClientUpdateProposal(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientUpdateProposal title.
                     * @member {string} title
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.title = "";

                    /**
                     * ClientUpdateProposal description.
                     * @member {string} description
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.description = "";

                    /**
                     * ClientUpdateProposal client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.client_id = "";

                    /**
                     * ClientUpdateProposal header.
                     * @member {google.protobuf.IAny|null|undefined} header
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.header = null;

                    /**
                     * Encodes the specified ClientUpdateProposal message. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.IClientUpdateProposal} m ClientUpdateProposal message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientUpdateProposal.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                            w.uint32(10).string(m.title);
                        if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                            w.uint32(18).string(m.description);
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(26).string(m.client_id);
                        if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                            $root.google.protobuf.Any.encode(m.header, w.uint32(34).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ClientUpdateProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientUpdateProposal.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.ClientUpdateProposal();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.title = r.string();
                                    break;
                                case 2:
                                    m.description = r.string();
                                    break;
                                case 3:
                                    m.client_id = r.string();
                                    break;
                                case 4:
                                    m.header = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientUpdateProposal;
                })();

                v1.Height = (function () {

                    /**
                     * Properties of an Height.
                     * @memberof ibc.core.client.v1
                     * @interface IHeight
                     * @property {Long|null} [revision_number] Height revision_number
                     * @property {Long|null} [revision_height] Height revision_height
                     */

                    /**
                     * Constructs a new Height.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an Height.
                     * @implements IHeight
                     * @constructor
                     * @param {ibc.core.client.v1.IHeight=} [p] Properties to set
                     */
                    function Height(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Height revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     */
                    Height.prototype.revision_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Height revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     */
                    Height.prototype.revision_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified Height message. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.IHeight} m Height message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Height.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.revision_number != null && Object.hasOwnProperty.call(m, "revision_number"))
                            w.uint32(8).uint64(m.revision_number);
                        if (m.revision_height != null && Object.hasOwnProperty.call(m, "revision_height"))
                            w.uint32(16).uint64(m.revision_height);
                        return w;
                    };

                    /**
                     * Decodes an Height message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.Height} Height
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Height.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.Height();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.revision_number = r.uint64();
                                    break;
                                case 2:
                                    m.revision_height = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Height;
                })();

                v1.Params = (function () {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.core.client.v1
                     * @interface IParams
                     * @property {Array.<string>|null} [allowed_clients] Params allowed_clients
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.core.client.v1.IParams=} [p] Properties to set
                     */
                    function Params(p) {
                        this.allowed_clients = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Params allowed_clients.
                     * @member {Array.<string>} allowed_clients
                     * @memberof ibc.core.client.v1.Params
                     * @instance
                     */
                    Params.prototype.allowed_clients = $util.emptyArray;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.IParams} m Params message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.allowed_clients != null && m.allowed_clients.length) {
                            for (var i = 0; i < m.allowed_clients.length; ++i)
                                w.uint32(10).string(m.allowed_clients[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.client.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.client.v1.Params();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.allowed_clients && m.allowed_clients.length))
                                        m.allowed_clients = [];
                                    m.allowed_clients.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Params;
                })();

                return v1;
            })();

            return client;
        })();

        core.commitment = (function () {

            /**
             * Namespace commitment.
             * @memberof ibc.core
             * @namespace
             */
            const commitment = {};

            commitment.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.commitment
                 * @namespace
                 */
                const v1 = {};

                v1.MerkleRoot = (function () {

                    /**
                     * Properties of a MerkleRoot.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerkleRoot
                     * @property {Uint8Array|null} [hash] MerkleRoot hash
                     */

                    /**
                     * Constructs a new MerkleRoot.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerkleRoot.
                     * @implements IMerkleRoot
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerkleRoot=} [p] Properties to set
                     */
                    function MerkleRoot(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MerkleRoot hash.
                     * @member {Uint8Array} hash
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @instance
                     */
                    MerkleRoot.prototype.hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified MerkleRoot message. Does not implicitly {@link ibc.core.commitment.v1.MerkleRoot.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleRoot} m MerkleRoot message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleRoot.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                            w.uint32(10).bytes(m.hash);
                        return w;
                    };

                    /**
                     * Decodes a MerkleRoot message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleRoot.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.commitment.v1.MerkleRoot();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.hash = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MerkleRoot;
                })();

                v1.MerklePrefix = (function () {

                    /**
                     * Properties of a MerklePrefix.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerklePrefix
                     * @property {Uint8Array|null} [key_prefix] MerklePrefix key_prefix
                     */

                    /**
                     * Constructs a new MerklePrefix.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerklePrefix.
                     * @implements IMerklePrefix
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerklePrefix=} [p] Properties to set
                     */
                    function MerklePrefix(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MerklePrefix key_prefix.
                     * @member {Uint8Array} key_prefix
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @instance
                     */
                    MerklePrefix.prototype.key_prefix = $util.newBuffer([]);

                    /**
                     * Encodes the specified MerklePrefix message. Does not implicitly {@link ibc.core.commitment.v1.MerklePrefix.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePrefix} m MerklePrefix message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePrefix.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key_prefix != null && Object.hasOwnProperty.call(m, "key_prefix"))
                            w.uint32(10).bytes(m.key_prefix);
                        return w;
                    };

                    /**
                     * Decodes a MerklePrefix message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePrefix.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.commitment.v1.MerklePrefix();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.key_prefix = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MerklePrefix;
                })();

                v1.MerklePath = (function () {

                    /**
                     * Properties of a MerklePath.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerklePath
                     * @property {Array.<string>|null} [key_path] MerklePath key_path
                     */

                    /**
                     * Constructs a new MerklePath.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerklePath.
                     * @implements IMerklePath
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerklePath=} [p] Properties to set
                     */
                    function MerklePath(p) {
                        this.key_path = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MerklePath key_path.
                     * @member {Array.<string>} key_path
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @instance
                     */
                    MerklePath.prototype.key_path = $util.emptyArray;

                    /**
                     * Encodes the specified MerklePath message. Does not implicitly {@link ibc.core.commitment.v1.MerklePath.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePath} m MerklePath message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePath.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.key_path != null && m.key_path.length) {
                            for (var i = 0; i < m.key_path.length; ++i)
                                w.uint32(10).string(m.key_path[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a MerklePath message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePath.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.commitment.v1.MerklePath();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.key_path && m.key_path.length))
                                        m.key_path = [];
                                    m.key_path.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MerklePath;
                })();

                v1.MerkleProof = (function () {

                    /**
                     * Properties of a MerkleProof.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerkleProof
                     * @property {Array.<ics23.ICommitmentProof>|null} [proofs] MerkleProof proofs
                     */

                    /**
                     * Constructs a new MerkleProof.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerkleProof.
                     * @implements IMerkleProof
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerkleProof=} [p] Properties to set
                     */
                    function MerkleProof(p) {
                        this.proofs = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MerkleProof proofs.
                     * @member {Array.<ics23.ICommitmentProof>} proofs
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @instance
                     */
                    MerkleProof.prototype.proofs = $util.emptyArray;

                    /**
                     * Encodes the specified MerkleProof message. Does not implicitly {@link ibc.core.commitment.v1.MerkleProof.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleProof} m MerkleProof message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleProof.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.proofs != null && m.proofs.length) {
                            for (var i = 0; i < m.proofs.length; ++i)
                                $root.ics23.CommitmentProof.encode(m.proofs[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };

                    /**
                     * Decodes a MerkleProof message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleProof.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.commitment.v1.MerkleProof();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.proofs && m.proofs.length))
                                        m.proofs = [];
                                    m.proofs.push($root.ics23.CommitmentProof.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MerkleProof;
                })();

                return v1;
            })();

            return commitment;
        })();

        core.connection = (function () {

            /**
             * Namespace connection.
             * @memberof ibc.core
             * @namespace
             */
            const connection = {};

            connection.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.connection
                 * @namespace
                 */
                const v1 = {};

                v1.QueryConnectionRequest = (function () {

                    /**
                     * Properties of a QueryConnectionRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionRequest
                     * @property {string|null} [connection_id] QueryConnectionRequest connection_id
                     */

                    /**
                     * Constructs a new QueryConnectionRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionRequest.
                     * @implements IQueryConnectionRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest=} [p] Properties to set
                     */
                    function QueryConnectionRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @instance
                     */
                    QueryConnectionRequest.prototype.connection_id = "";

                    /**
                     * Encodes the specified QueryConnectionRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} m QueryConnectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection_id != null && Object.hasOwnProperty.call(m, "connection_id"))
                            w.uint32(10).string(m.connection_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionRequest;
                })();

                v1.QueryConnectionResponse = (function () {

                    /**
                     * Properties of a QueryConnectionResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionResponse
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] QueryConnectionResponse connection
                     * @property {Uint8Array|null} [proof] QueryConnectionResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionResponse.
                     * @implements IQueryConnectionResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse=} [p] Properties to set
                     */
                    function QueryConnectionResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionResponse connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.connection = null;

                    /**
                     * QueryConnectionResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse} m QueryConnectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection != null && Object.hasOwnProperty.call(m, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(m.connection, w.uint32(10).fork()).ldelim();
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionResponse;
                })();

                v1.QueryConnectionsRequest = (function () {

                    /**
                     * Properties of a QueryConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionsRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConnectionsRequest pagination
                     */

                    /**
                     * Constructs a new QueryConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionsRequest.
                     * @implements IQueryConnectionsRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest=} [p] Properties to set
                     */
                    function QueryConnectionsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @instance
                     */
                    QueryConnectionsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConnectionsRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} m QueryConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(m.pagination, w.uint32(10).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionsRequest;
                })();

                v1.QueryConnectionsResponse = (function () {

                    /**
                     * Properties of a QueryConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionsResponse
                     * @property {Array.<ibc.core.connection.v1.IIdentifiedConnection>|null} [connections] QueryConnectionsResponse connections
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConnectionsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryConnectionsResponse height
                     */

                    /**
                     * Constructs a new QueryConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionsResponse.
                     * @implements IQueryConnectionsResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse=} [p] Properties to set
                     */
                    function QueryConnectionsResponse(p) {
                        this.connections = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionsResponse connections.
                     * @member {Array.<ibc.core.connection.v1.IIdentifiedConnection>} connections
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.connections = $util.emptyArray;

                    /**
                     * QueryConnectionsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.pagination = null;

                    /**
                     * QueryConnectionsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryConnectionsResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse} m QueryConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connections != null && m.connections.length) {
                            for (var i = 0; i < m.connections.length; ++i)
                                $root.ibc.core.connection.v1.IdentifiedConnection.encode(m.connections[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.pagination != null && Object.hasOwnProperty.call(m, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(m.pagination, w.uint32(18).fork()).ldelim();
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.connections && m.connections.length))
                                        m.connections = [];
                                    m.connections.push($root.ibc.core.connection.v1.IdentifiedConnection.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    m.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionsResponse;
                })();

                v1.QueryClientConnectionsRequest = (function () {

                    /**
                     * Properties of a QueryClientConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryClientConnectionsRequest
                     * @property {string|null} [client_id] QueryClientConnectionsRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryClientConnectionsRequest.
                     * @implements IQueryClientConnectionsRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest=} [p] Properties to set
                     */
                    function QueryClientConnectionsRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientConnectionsRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @instance
                     */
                    QueryClientConnectionsRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientConnectionsRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} m QueryClientConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryClientConnectionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryClientConnectionsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientConnectionsRequest;
                })();

                v1.QueryClientConnectionsResponse = (function () {

                    /**
                     * Properties of a QueryClientConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryClientConnectionsResponse
                     * @property {Array.<string>|null} [connection_paths] QueryClientConnectionsResponse connection_paths
                     * @property {Uint8Array|null} [proof] QueryClientConnectionsResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryClientConnectionsResponse proof_height
                     */

                    /**
                     * Constructs a new QueryClientConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryClientConnectionsResponse.
                     * @implements IQueryClientConnectionsResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse=} [p] Properties to set
                     */
                    function QueryClientConnectionsResponse(p) {
                        this.connection_paths = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryClientConnectionsResponse connection_paths.
                     * @member {Array.<string>} connection_paths
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.connection_paths = $util.emptyArray;

                    /**
                     * QueryClientConnectionsResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryClientConnectionsResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryClientConnectionsResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse} m QueryClientConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection_paths != null && m.connection_paths.length) {
                            for (var i = 0; i < m.connection_paths.length; ++i)
                                w.uint32(10).string(m.connection_paths[i]);
                        }
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryClientConnectionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryClientConnectionsResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.connection_paths && m.connection_paths.length))
                                        m.connection_paths = [];
                                    m.connection_paths.push(r.string());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryClientConnectionsResponse;
                })();

                v1.QueryConnectionClientStateRequest = (function () {

                    /**
                     * Properties of a QueryConnectionClientStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionClientStateRequest
                     * @property {string|null} [connection_id] QueryConnectionClientStateRequest connection_id
                     */

                    /**
                     * Constructs a new QueryConnectionClientStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionClientStateRequest.
                     * @implements IQueryConnectionClientStateRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest=} [p] Properties to set
                     */
                    function QueryConnectionClientStateRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionClientStateRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @instance
                     */
                    QueryConnectionClientStateRequest.prototype.connection_id = "";

                    /**
                     * Encodes the specified QueryConnectionClientStateRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} m QueryConnectionClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection_id != null && Object.hasOwnProperty.call(m, "connection_id"))
                            w.uint32(10).string(m.connection_id);
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionClientStateRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection_id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionClientStateRequest;
                })();

                v1.QueryConnectionClientStateResponse = (function () {

                    /**
                     * Properties of a QueryConnectionClientStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionClientStateResponse
                     * @property {ibc.core.client.v1.IIdentifiedClientState|null} [identified_client_state] QueryConnectionClientStateResponse identified_client_state
                     * @property {Uint8Array|null} [proof] QueryConnectionClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionClientStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionClientStateResponse.
                     * @implements IQueryConnectionClientStateResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse=} [p] Properties to set
                     */
                    function QueryConnectionClientStateResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionClientStateResponse identified_client_state.
                     * @member {ibc.core.client.v1.IIdentifiedClientState|null|undefined} identified_client_state
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.identified_client_state = null;

                    /**
                     * QueryConnectionClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionClientStateResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse} m QueryConnectionClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.identified_client_state != null && Object.hasOwnProperty.call(m, "identified_client_state"))
                            $root.ibc.core.client.v1.IdentifiedClientState.encode(m.identified_client_state, w.uint32(10).fork()).ldelim();
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(18).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionClientStateResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.proof = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionClientStateResponse;
                })();

                v1.QueryConnectionConsensusStateRequest = (function () {

                    /**
                     * Properties of a QueryConnectionConsensusStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionConsensusStateRequest
                     * @property {string|null} [connection_id] QueryConnectionConsensusStateRequest connection_id
                     * @property {Long|null} [revision_number] QueryConnectionConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryConnectionConsensusStateRequest revision_height
                     */

                    /**
                     * Constructs a new QueryConnectionConsensusStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionConsensusStateRequest.
                     * @implements IQueryConnectionConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest=} [p] Properties to set
                     */
                    function QueryConnectionConsensusStateRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionConsensusStateRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.connection_id = "";

                    /**
                     * QueryConnectionConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * QueryConnectionConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified QueryConnectionConsensusStateRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} m QueryConnectionConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection_id != null && Object.hasOwnProperty.call(m, "connection_id"))
                            w.uint32(10).string(m.connection_id);
                        if (m.revision_number != null && Object.hasOwnProperty.call(m, "revision_number"))
                            w.uint32(16).uint64(m.revision_number);
                        if (m.revision_height != null && Object.hasOwnProperty.call(m, "revision_height"))
                            w.uint32(24).uint64(m.revision_height);
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection_id = r.string();
                                    break;
                                case 2:
                                    m.revision_number = r.uint64();
                                    break;
                                case 3:
                                    m.revision_height = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionConsensusStateRequest;
                })();

                v1.QueryConnectionConsensusStateResponse = (function () {

                    /**
                     * Properties of a QueryConnectionConsensusStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryConnectionConsensusStateResponse consensus_state
                     * @property {string|null} [client_id] QueryConnectionConsensusStateResponse client_id
                     * @property {Uint8Array|null} [proof] QueryConnectionConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionConsensusStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionConsensusStateResponse.
                     * @implements IQueryConnectionConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse=} [p] Properties to set
                     */
                    function QueryConnectionConsensusStateResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * QueryConnectionConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryConnectionConsensusStateResponse client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.client_id = "";

                    /**
                     * QueryConnectionConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionConsensusStateResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse} m QueryConnectionConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(10).fork()).ldelim();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(18).string(m.client_id);
                        if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                            w.uint32(26).bytes(m.proof);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(34).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.client_id = r.string();
                                    break;
                                case 3:
                                    m.proof = r.bytes();
                                    break;
                                case 4:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return QueryConnectionConsensusStateResponse;
                })();

                v1.GenesisState = (function () {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.connection.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.connection.v1.IIdentifiedConnection>|null} [connections] GenesisState connections
                     * @property {Array.<ibc.core.connection.v1.IConnectionPaths>|null} [client_connection_paths] GenesisState client_connection_paths
                     * @property {Long|null} [next_connection_sequence] GenesisState next_connection_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.connection.v1.IGenesisState=} [p] Properties to set
                     */
                    function GenesisState(p) {
                        this.connections = [];
                        this.client_connection_paths = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenesisState connections.
                     * @member {Array.<ibc.core.connection.v1.IIdentifiedConnection>} connections
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.connections = $util.emptyArray;

                    /**
                     * GenesisState client_connection_paths.
                     * @member {Array.<ibc.core.connection.v1.IConnectionPaths>} client_connection_paths
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.client_connection_paths = $util.emptyArray;

                    /**
                     * GenesisState next_connection_sequence.
                     * @member {Long} next_connection_sequence
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_connection_sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.connection.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.IGenesisState} m GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connections != null && m.connections.length) {
                            for (var i = 0; i < m.connections.length; ++i)
                                $root.ibc.core.connection.v1.IdentifiedConnection.encode(m.connections[i], w.uint32(10).fork()).ldelim();
                        }
                        if (m.client_connection_paths != null && m.client_connection_paths.length) {
                            for (var i = 0; i < m.client_connection_paths.length; ++i)
                                $root.ibc.core.connection.v1.ConnectionPaths.encode(m.client_connection_paths[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.next_connection_sequence != null && Object.hasOwnProperty.call(m, "next_connection_sequence"))
                            w.uint32(24).uint64(m.next_connection_sequence);
                        return w;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.GenesisState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.connections && m.connections.length))
                                        m.connections = [];
                                    m.connections.push($root.ibc.core.connection.v1.IdentifiedConnection.decode(r, r.uint32()));
                                    break;
                                case 2:
                                    if (!(m.client_connection_paths && m.client_connection_paths.length))
                                        m.client_connection_paths = [];
                                    m.client_connection_paths.push($root.ibc.core.connection.v1.ConnectionPaths.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    m.next_connection_sequence = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenesisState;
                })();

                v1.ConnectionEnd = (function () {

                    /**
                     * Properties of a ConnectionEnd.
                     * @memberof ibc.core.connection.v1
                     * @interface IConnectionEnd
                     * @property {string|null} [client_id] ConnectionEnd client_id
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [versions] ConnectionEnd versions
                     * @property {ibc.core.connection.v1.State|null} [state] ConnectionEnd state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] ConnectionEnd counterparty
                     * @property {Long|null} [delay_period] ConnectionEnd delay_period
                     */

                    /**
                     * Constructs a new ConnectionEnd.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ConnectionEnd.
                     * @implements IConnectionEnd
                     * @constructor
                     * @param {ibc.core.connection.v1.IConnectionEnd=} [p] Properties to set
                     */
                    function ConnectionEnd(p) {
                        this.versions = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConnectionEnd client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.client_id = "";

                    /**
                     * ConnectionEnd versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} versions
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.versions = $util.emptyArray;

                    /**
                     * ConnectionEnd state.
                     * @member {ibc.core.connection.v1.State} state
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.state = 0;

                    /**
                     * ConnectionEnd counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.counterparty = null;

                    /**
                     * ConnectionEnd delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.delay_period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified ConnectionEnd message. Does not implicitly {@link ibc.core.connection.v1.ConnectionEnd.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionEnd} m ConnectionEnd message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionEnd.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.versions != null && m.versions.length) {
                            for (var i = 0; i < m.versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(m.versions[i], w.uint32(18).fork()).ldelim();
                        }
                        if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                            w.uint32(24).int32(m.state);
                        if (m.counterparty != null && Object.hasOwnProperty.call(m, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(m.counterparty, w.uint32(34).fork()).ldelim();
                        if (m.delay_period != null && Object.hasOwnProperty.call(m, "delay_period"))
                            w.uint32(40).uint64(m.delay_period);
                        return w;
                    };

                    /**
                     * Decodes a ConnectionEnd message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionEnd.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.ConnectionEnd();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    if (!(m.versions && m.versions.length))
                                        m.versions = [];
                                    m.versions.push($root.ibc.core.connection.v1.Version.decode(r, r.uint32()));
                                    break;
                                case 3:
                                    m.state = r.int32();
                                    break;
                                case 4:
                                    m.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.delay_period = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConnectionEnd;
                })();

                v1.IdentifiedConnection = (function () {

                    /**
                     * Properties of an IdentifiedConnection.
                     * @memberof ibc.core.connection.v1
                     * @interface IIdentifiedConnection
                     * @property {string|null} [id] IdentifiedConnection id
                     * @property {string|null} [client_id] IdentifiedConnection client_id
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [versions] IdentifiedConnection versions
                     * @property {ibc.core.connection.v1.State|null} [state] IdentifiedConnection state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] IdentifiedConnection counterparty
                     * @property {Long|null} [delay_period] IdentifiedConnection delay_period
                     */

                    /**
                     * Constructs a new IdentifiedConnection.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents an IdentifiedConnection.
                     * @implements IIdentifiedConnection
                     * @constructor
                     * @param {ibc.core.connection.v1.IIdentifiedConnection=} [p] Properties to set
                     */
                    function IdentifiedConnection(p) {
                        this.versions = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * IdentifiedConnection id.
                     * @member {string} id
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.id = "";

                    /**
                     * IdentifiedConnection client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.client_id = "";

                    /**
                     * IdentifiedConnection versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} versions
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.versions = $util.emptyArray;

                    /**
                     * IdentifiedConnection state.
                     * @member {ibc.core.connection.v1.State} state
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.state = 0;

                    /**
                     * IdentifiedConnection counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.counterparty = null;

                    /**
                     * IdentifiedConnection delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.delay_period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified IdentifiedConnection message. Does not implicitly {@link ibc.core.connection.v1.IdentifiedConnection.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IIdentifiedConnection} m IdentifiedConnection message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedConnection.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                            w.uint32(10).string(m.id);
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(18).string(m.client_id);
                        if (m.versions != null && m.versions.length) {
                            for (var i = 0; i < m.versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(m.versions[i], w.uint32(26).fork()).ldelim();
                        }
                        if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                            w.uint32(32).int32(m.state);
                        if (m.counterparty != null && Object.hasOwnProperty.call(m, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(m.counterparty, w.uint32(42).fork()).ldelim();
                        if (m.delay_period != null && Object.hasOwnProperty.call(m, "delay_period"))
                            w.uint32(48).uint64(m.delay_period);
                        return w;
                    };

                    /**
                     * Decodes an IdentifiedConnection message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedConnection.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.IdentifiedConnection();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.id = r.string();
                                    break;
                                case 2:
                                    m.client_id = r.string();
                                    break;
                                case 3:
                                    if (!(m.versions && m.versions.length))
                                        m.versions = [];
                                    m.versions.push($root.ibc.core.connection.v1.Version.decode(r, r.uint32()));
                                    break;
                                case 4:
                                    m.state = r.int32();
                                    break;
                                case 5:
                                    m.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(r, r.uint32());
                                    break;
                                case 6:
                                    m.delay_period = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return IdentifiedConnection;
                })();

                /**
                 * State enum.
                 * @name ibc.core.connection.v1.State
                 * @enum {number}
                 * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} STATE_INIT=1 STATE_INIT value
                 * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                 * @property {number} STATE_OPEN=3 STATE_OPEN value
                 */
                v1.State = (function () {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "STATE_INIT"] = 1;
                    values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                    values[valuesById[3] = "STATE_OPEN"] = 3;
                    return values;
                })();

                v1.Counterparty = (function () {

                    /**
                     * Properties of a Counterparty.
                     * @memberof ibc.core.connection.v1
                     * @interface ICounterparty
                     * @property {string|null} [client_id] Counterparty client_id
                     * @property {string|null} [connection_id] Counterparty connection_id
                     * @property {ibc.core.commitment.v1.IMerklePrefix|null} [prefix] Counterparty prefix
                     */

                    /**
                     * Constructs a new Counterparty.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Counterparty.
                     * @implements ICounterparty
                     * @constructor
                     * @param {ibc.core.connection.v1.ICounterparty=} [p] Properties to set
                     */
                    function Counterparty(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Counterparty client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.client_id = "";

                    /**
                     * Counterparty connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.connection_id = "";

                    /**
                     * Counterparty prefix.
                     * @member {ibc.core.commitment.v1.IMerklePrefix|null|undefined} prefix
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.prefix = null;

                    /**
                     * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.connection.v1.Counterparty.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.ICounterparty} m Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.connection_id != null && Object.hasOwnProperty.call(m, "connection_id"))
                            w.uint32(18).string(m.connection_id);
                        if (m.prefix != null && Object.hasOwnProperty.call(m, "prefix"))
                            $root.ibc.core.commitment.v1.MerklePrefix.encode(m.prefix, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.Counterparty();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.connection_id = r.string();
                                    break;
                                case 3:
                                    m.prefix = $root.ibc.core.commitment.v1.MerklePrefix.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Counterparty;
                })();

                v1.ClientPaths = (function () {

                    /**
                     * Properties of a ClientPaths.
                     * @memberof ibc.core.connection.v1
                     * @interface IClientPaths
                     * @property {Array.<string>|null} [paths] ClientPaths paths
                     */

                    /**
                     * Constructs a new ClientPaths.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ClientPaths.
                     * @implements IClientPaths
                     * @constructor
                     * @param {ibc.core.connection.v1.IClientPaths=} [p] Properties to set
                     */
                    function ClientPaths(p) {
                        this.paths = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientPaths paths.
                     * @member {Array.<string>} paths
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @instance
                     */
                    ClientPaths.prototype.paths = $util.emptyArray;

                    /**
                     * Encodes the specified ClientPaths message. Does not implicitly {@link ibc.core.connection.v1.ClientPaths.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.IClientPaths} m ClientPaths message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientPaths.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.paths != null && m.paths.length) {
                            for (var i = 0; i < m.paths.length; ++i)
                                w.uint32(10).string(m.paths[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a ClientPaths message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientPaths.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.ClientPaths();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    if (!(m.paths && m.paths.length))
                                        m.paths = [];
                                    m.paths.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientPaths;
                })();

                v1.ConnectionPaths = (function () {

                    /**
                     * Properties of a ConnectionPaths.
                     * @memberof ibc.core.connection.v1
                     * @interface IConnectionPaths
                     * @property {string|null} [client_id] ConnectionPaths client_id
                     * @property {Array.<string>|null} [paths] ConnectionPaths paths
                     */

                    /**
                     * Constructs a new ConnectionPaths.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ConnectionPaths.
                     * @implements IConnectionPaths
                     * @constructor
                     * @param {ibc.core.connection.v1.IConnectionPaths=} [p] Properties to set
                     */
                    function ConnectionPaths(p) {
                        this.paths = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConnectionPaths client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     */
                    ConnectionPaths.prototype.client_id = "";

                    /**
                     * ConnectionPaths paths.
                     * @member {Array.<string>} paths
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     */
                    ConnectionPaths.prototype.paths = $util.emptyArray;

                    /**
                     * Encodes the specified ConnectionPaths message. Does not implicitly {@link ibc.core.connection.v1.ConnectionPaths.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionPaths} m ConnectionPaths message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionPaths.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.paths != null && m.paths.length) {
                            for (var i = 0; i < m.paths.length; ++i)
                                w.uint32(18).string(m.paths[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a ConnectionPaths message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionPaths.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.ConnectionPaths();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    if (!(m.paths && m.paths.length))
                                        m.paths = [];
                                    m.paths.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConnectionPaths;
                })();

                v1.Version = (function () {

                    /**
                     * Properties of a Version.
                     * @memberof ibc.core.connection.v1
                     * @interface IVersion
                     * @property {string|null} [identifier] Version identifier
                     * @property {Array.<string>|null} [features] Version features
                     */

                    /**
                     * Constructs a new Version.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Version.
                     * @implements IVersion
                     * @constructor
                     * @param {ibc.core.connection.v1.IVersion=} [p] Properties to set
                     */
                    function Version(p) {
                        this.features = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Version identifier.
                     * @member {string} identifier
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     */
                    Version.prototype.identifier = "";

                    /**
                     * Version features.
                     * @member {Array.<string>} features
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     */
                    Version.prototype.features = $util.emptyArray;

                    /**
                     * Encodes the specified Version message. Does not implicitly {@link ibc.core.connection.v1.Version.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.IVersion} m Version message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.identifier != null && Object.hasOwnProperty.call(m, "identifier"))
                            w.uint32(10).string(m.identifier);
                        if (m.features != null && m.features.length) {
                            for (var i = 0; i < m.features.length; ++i)
                                w.uint32(18).string(m.features[i]);
                        }
                        return w;
                    };

                    /**
                     * Decodes a Version message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.Version();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.identifier = r.string();
                                    break;
                                case 2:
                                    if (!(m.features && m.features.length))
                                        m.features = [];
                                    m.features.push(r.string());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Version;
                })();

                v1.MsgConnectionOpenInit = (function () {

                    /**
                     * Properties of a MsgConnectionOpenInit.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenInit
                     * @property {string|null} [client_id] MsgConnectionOpenInit client_id
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] MsgConnectionOpenInit counterparty
                     * @property {ibc.core.connection.v1.IVersion|null} [version] MsgConnectionOpenInit version
                     * @property {Long|null} [delay_period] MsgConnectionOpenInit delay_period
                     * @property {string|null} [signer] MsgConnectionOpenInit signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenInit.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenInit.
                     * @implements IMsgConnectionOpenInit
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit=} [p] Properties to set
                     */
                    function MsgConnectionOpenInit(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgConnectionOpenInit client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.client_id = "";

                    /**
                     * MsgConnectionOpenInit counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.counterparty = null;

                    /**
                     * MsgConnectionOpenInit version.
                     * @member {ibc.core.connection.v1.IVersion|null|undefined} version
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.version = null;

                    /**
                     * MsgConnectionOpenInit delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.delay_period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * MsgConnectionOpenInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenInit message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} m MsgConnectionOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInit.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.counterparty != null && Object.hasOwnProperty.call(m, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(m.counterparty, w.uint32(18).fork()).ldelim();
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            $root.ibc.core.connection.v1.Version.encode(m.version, w.uint32(26).fork()).ldelim();
                        if (m.delay_period != null && Object.hasOwnProperty.call(m, "delay_period"))
                            w.uint32(32).uint64(m.delay_period);
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(42).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInit.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenInit();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.version = $root.ibc.core.connection.v1.Version.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.delay_period = r.uint64();
                                    break;
                                case 5:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenInit;
                })();

                v1.MsgConnectionOpenInitResponse = (function () {

                    /**
                     * Properties of a MsgConnectionOpenInitResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenInitResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenInitResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenInitResponse.
                     * @implements IMsgConnectionOpenInitResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse=} [p] Properties to set
                     */
                    function MsgConnectionOpenInitResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenInitResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse} m MsgConnectionOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInitResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInitResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenInitResponse;
                })();

                v1.MsgConnectionOpenTry = (function () {

                    /**
                     * Properties of a MsgConnectionOpenTry.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenTry
                     * @property {string|null} [client_id] MsgConnectionOpenTry client_id
                     * @property {string|null} [previous_connection_id] MsgConnectionOpenTry previous_connection_id
                     * @property {google.protobuf.IAny|null} [client_state] MsgConnectionOpenTry client_state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] MsgConnectionOpenTry counterparty
                     * @property {Long|null} [delay_period] MsgConnectionOpenTry delay_period
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [counterparty_versions] MsgConnectionOpenTry counterparty_versions
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenTry proof_height
                     * @property {Uint8Array|null} [proof_init] MsgConnectionOpenTry proof_init
                     * @property {Uint8Array|null} [proof_client] MsgConnectionOpenTry proof_client
                     * @property {Uint8Array|null} [proof_consensus] MsgConnectionOpenTry proof_consensus
                     * @property {ibc.core.client.v1.IHeight|null} [consensus_height] MsgConnectionOpenTry consensus_height
                     * @property {string|null} [signer] MsgConnectionOpenTry signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenTry.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenTry.
                     * @implements IMsgConnectionOpenTry
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry=} [p] Properties to set
                     */
                    function MsgConnectionOpenTry(p) {
                        this.counterparty_versions = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgConnectionOpenTry client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.client_id = "";

                    /**
                     * MsgConnectionOpenTry previous_connection_id.
                     * @member {string} previous_connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.previous_connection_id = "";

                    /**
                     * MsgConnectionOpenTry client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.client_state = null;

                    /**
                     * MsgConnectionOpenTry counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.counterparty = null;

                    /**
                     * MsgConnectionOpenTry delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.delay_period = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * MsgConnectionOpenTry counterparty_versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} counterparty_versions
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.counterparty_versions = $util.emptyArray;

                    /**
                     * MsgConnectionOpenTry proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenTry proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry proof_client.
                     * @member {Uint8Array} proof_client
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_client = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry proof_consensus.
                     * @member {Uint8Array} proof_consensus
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_consensus = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry consensus_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} consensus_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.consensus_height = null;

                    /**
                     * MsgConnectionOpenTry signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenTry message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTry.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} m MsgConnectionOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTry.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.previous_connection_id != null && Object.hasOwnProperty.call(m, "previous_connection_id"))
                            w.uint32(18).string(m.previous_connection_id);
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(26).fork()).ldelim();
                        if (m.counterparty != null && Object.hasOwnProperty.call(m, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(m.counterparty, w.uint32(34).fork()).ldelim();
                        if (m.delay_period != null && Object.hasOwnProperty.call(m, "delay_period"))
                            w.uint32(40).uint64(m.delay_period);
                        if (m.counterparty_versions != null && m.counterparty_versions.length) {
                            for (var i = 0; i < m.counterparty_versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(m.counterparty_versions[i], w.uint32(50).fork()).ldelim();
                        }
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(58).fork()).ldelim();
                        if (m.proof_init != null && Object.hasOwnProperty.call(m, "proof_init"))
                            w.uint32(66).bytes(m.proof_init);
                        if (m.proof_client != null && Object.hasOwnProperty.call(m, "proof_client"))
                            w.uint32(74).bytes(m.proof_client);
                        if (m.proof_consensus != null && Object.hasOwnProperty.call(m, "proof_consensus"))
                            w.uint32(82).bytes(m.proof_consensus);
                        if (m.consensus_height != null && Object.hasOwnProperty.call(m, "consensus_height"))
                            $root.ibc.core.client.v1.Height.encode(m.consensus_height, w.uint32(90).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(98).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenTry message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTry.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenTry();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.previous_connection_id = r.string();
                                    break;
                                case 3:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.delay_period = r.uint64();
                                    break;
                                case 6:
                                    if (!(m.counterparty_versions && m.counterparty_versions.length))
                                        m.counterparty_versions = [];
                                    m.counterparty_versions.push($root.ibc.core.connection.v1.Version.decode(r, r.uint32()));
                                    break;
                                case 7:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 8:
                                    m.proof_init = r.bytes();
                                    break;
                                case 9:
                                    m.proof_client = r.bytes();
                                    break;
                                case 10:
                                    m.proof_consensus = r.bytes();
                                    break;
                                case 11:
                                    m.consensus_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 12:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenTry;
                })();

                v1.MsgConnectionOpenTryResponse = (function () {

                    /**
                     * Properties of a MsgConnectionOpenTryResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenTryResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenTryResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenTryResponse.
                     * @implements IMsgConnectionOpenTryResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse=} [p] Properties to set
                     */
                    function MsgConnectionOpenTryResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenTryResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse} m MsgConnectionOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTryResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenTryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTryResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenTryResponse;
                })();

                v1.MsgConnectionOpenAck = (function () {

                    /**
                     * Properties of a MsgConnectionOpenAck.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenAck
                     * @property {string|null} [connection_id] MsgConnectionOpenAck connection_id
                     * @property {string|null} [counterparty_connection_id] MsgConnectionOpenAck counterparty_connection_id
                     * @property {ibc.core.connection.v1.IVersion|null} [version] MsgConnectionOpenAck version
                     * @property {google.protobuf.IAny|null} [client_state] MsgConnectionOpenAck client_state
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenAck proof_height
                     * @property {Uint8Array|null} [proof_try] MsgConnectionOpenAck proof_try
                     * @property {Uint8Array|null} [proof_client] MsgConnectionOpenAck proof_client
                     * @property {Uint8Array|null} [proof_consensus] MsgConnectionOpenAck proof_consensus
                     * @property {ibc.core.client.v1.IHeight|null} [consensus_height] MsgConnectionOpenAck consensus_height
                     * @property {string|null} [signer] MsgConnectionOpenAck signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenAck.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenAck.
                     * @implements IMsgConnectionOpenAck
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck=} [p] Properties to set
                     */
                    function MsgConnectionOpenAck(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgConnectionOpenAck connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.connection_id = "";

                    /**
                     * MsgConnectionOpenAck counterparty_connection_id.
                     * @member {string} counterparty_connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.counterparty_connection_id = "";

                    /**
                     * MsgConnectionOpenAck version.
                     * @member {ibc.core.connection.v1.IVersion|null|undefined} version
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.version = null;

                    /**
                     * MsgConnectionOpenAck client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.client_state = null;

                    /**
                     * MsgConnectionOpenAck proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenAck proof_try.
                     * @member {Uint8Array} proof_try
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_try = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck proof_client.
                     * @member {Uint8Array} proof_client
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_client = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck proof_consensus.
                     * @member {Uint8Array} proof_consensus
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_consensus = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck consensus_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} consensus_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.consensus_height = null;

                    /**
                     * MsgConnectionOpenAck signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenAck message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAck.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} m MsgConnectionOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAck.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection_id != null && Object.hasOwnProperty.call(m, "connection_id"))
                            w.uint32(10).string(m.connection_id);
                        if (m.counterparty_connection_id != null && Object.hasOwnProperty.call(m, "counterparty_connection_id"))
                            w.uint32(18).string(m.counterparty_connection_id);
                        if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                            $root.ibc.core.connection.v1.Version.encode(m.version, w.uint32(26).fork()).ldelim();
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(34).fork()).ldelim();
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(42).fork()).ldelim();
                        if (m.proof_try != null && Object.hasOwnProperty.call(m, "proof_try"))
                            w.uint32(50).bytes(m.proof_try);
                        if (m.proof_client != null && Object.hasOwnProperty.call(m, "proof_client"))
                            w.uint32(58).bytes(m.proof_client);
                        if (m.proof_consensus != null && Object.hasOwnProperty.call(m, "proof_consensus"))
                            w.uint32(66).bytes(m.proof_consensus);
                        if (m.consensus_height != null && Object.hasOwnProperty.call(m, "consensus_height"))
                            $root.ibc.core.client.v1.Height.encode(m.consensus_height, w.uint32(74).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(82).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenAck message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAck.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenAck();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection_id = r.string();
                                    break;
                                case 2:
                                    m.counterparty_connection_id = r.string();
                                    break;
                                case 3:
                                    m.version = $root.ibc.core.connection.v1.Version.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 6:
                                    m.proof_try = r.bytes();
                                    break;
                                case 7:
                                    m.proof_client = r.bytes();
                                    break;
                                case 8:
                                    m.proof_consensus = r.bytes();
                                    break;
                                case 9:
                                    m.consensus_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 10:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenAck;
                })();

                v1.MsgConnectionOpenAckResponse = (function () {

                    /**
                     * Properties of a MsgConnectionOpenAckResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenAckResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenAckResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenAckResponse.
                     * @implements IMsgConnectionOpenAckResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse=} [p] Properties to set
                     */
                    function MsgConnectionOpenAckResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenAckResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAckResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse} m MsgConnectionOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAckResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenAckResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAckResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenAckResponse;
                })();

                v1.MsgConnectionOpenConfirm = (function () {

                    /**
                     * Properties of a MsgConnectionOpenConfirm.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenConfirm
                     * @property {string|null} [connection_id] MsgConnectionOpenConfirm connection_id
                     * @property {Uint8Array|null} [proof_ack] MsgConnectionOpenConfirm proof_ack
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenConfirm proof_height
                     * @property {string|null} [signer] MsgConnectionOpenConfirm signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenConfirm.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenConfirm.
                     * @implements IMsgConnectionOpenConfirm
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm=} [p] Properties to set
                     */
                    function MsgConnectionOpenConfirm(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * MsgConnectionOpenConfirm connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.connection_id = "";

                    /**
                     * MsgConnectionOpenConfirm proof_ack.
                     * @member {Uint8Array} proof_ack
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.proof_ack = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenConfirm message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} m MsgConnectionOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirm.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.connection_id != null && Object.hasOwnProperty.call(m, "connection_id"))
                            w.uint32(10).string(m.connection_id);
                        if (m.proof_ack != null && Object.hasOwnProperty.call(m, "proof_ack"))
                            w.uint32(18).bytes(m.proof_ack);
                        if (m.proof_height != null && Object.hasOwnProperty.call(m, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(m.proof_height, w.uint32(26).fork()).ldelim();
                        if (m.signer != null && Object.hasOwnProperty.call(m, "signer"))
                            w.uint32(34).string(m.signer);
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirm.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirm();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.connection_id = r.string();
                                    break;
                                case 2:
                                    m.proof_ack = r.bytes();
                                    break;
                                case 3:
                                    m.proof_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.signer = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenConfirm;
                })();

                v1.MsgConnectionOpenConfirmResponse = (function () {

                    /**
                     * Properties of a MsgConnectionOpenConfirmResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenConfirmResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenConfirmResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenConfirmResponse.
                     * @implements IMsgConnectionOpenConfirmResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse=} [p] Properties to set
                     */
                    function MsgConnectionOpenConfirmResponse(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenConfirmResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse} m MsgConnectionOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirmResponse.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirmResponse.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return MsgConnectionOpenConfirmResponse;
                })();

                return v1;
            })();

            return connection;
        })();

        core.types = (function () {

            /**
             * Namespace types.
             * @memberof ibc.core
             * @namespace
             */
            const types = {};

            types.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.types
                 * @namespace
                 */
                const v1 = {};

                v1.GenesisState = (function () {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.types.v1
                     * @interface IGenesisState
                     * @property {ibc.core.client.v1.IGenesisState|null} [client_genesis] GenesisState client_genesis
                     * @property {ibc.core.connection.v1.IGenesisState|null} [connection_genesis] GenesisState connection_genesis
                     * @property {ibc.core.channel.v1.IGenesisState|null} [channel_genesis] GenesisState channel_genesis
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.types.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.types.v1.IGenesisState=} [p] Properties to set
                     */
                    function GenesisState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * GenesisState client_genesis.
                     * @member {ibc.core.client.v1.IGenesisState|null|undefined} client_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.client_genesis = null;

                    /**
                     * GenesisState connection_genesis.
                     * @member {ibc.core.connection.v1.IGenesisState|null|undefined} connection_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.connection_genesis = null;

                    /**
                     * GenesisState channel_genesis.
                     * @member {ibc.core.channel.v1.IGenesisState|null|undefined} channel_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.channel_genesis = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.types.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.IGenesisState} m GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_genesis != null && Object.hasOwnProperty.call(m, "client_genesis"))
                            $root.ibc.core.client.v1.GenesisState.encode(m.client_genesis, w.uint32(10).fork()).ldelim();
                        if (m.connection_genesis != null && Object.hasOwnProperty.call(m, "connection_genesis"))
                            $root.ibc.core.connection.v1.GenesisState.encode(m.connection_genesis, w.uint32(18).fork()).ldelim();
                        if (m.channel_genesis != null && Object.hasOwnProperty.call(m, "channel_genesis"))
                            $root.ibc.core.channel.v1.GenesisState.encode(m.channel_genesis, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.core.types.v1.GenesisState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_genesis = $root.ibc.core.client.v1.GenesisState.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.connection_genesis = $root.ibc.core.connection.v1.GenesisState.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.channel_genesis = $root.ibc.core.channel.v1.GenesisState.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            return types;
        })();

        return core;
    })();

    ibc.lightclients = (function () {

        /**
         * Namespace lightclients.
         * @memberof ibc
         * @namespace
         */
        const lightclients = {};

        lightclients.localhost = (function () {

            /**
             * Namespace localhost.
             * @memberof ibc.lightclients
             * @namespace
             */
            const localhost = {};

            localhost.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.localhost
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function () {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.localhost.v1
                     * @interface IClientState
                     * @property {string|null} [chain_id] ClientState chain_id
                     * @property {ibc.core.client.v1.IHeight|null} [height] ClientState height
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.localhost.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.localhost.v1.IClientState=} [p] Properties to set
                     */
                    function ClientState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientState chain_id.
                     * @member {string} chain_id
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.chain_id = "";

                    /**
                     * ClientState height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.height = null;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.localhost.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.IClientState} m ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.chain_id != null && Object.hasOwnProperty.call(m, "chain_id"))
                            w.uint32(10).string(m.chain_id);
                        if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                            $root.ibc.core.client.v1.Height.encode(m.height, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.localhost.v1.ClientState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.chain_id = r.string();
                                    break;
                                case 2:
                                    m.height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientState;
                })();

                return v1;
            })();

            return localhost;
        })();

        lightclients.solomachine = (function () {

            /**
             * Namespace solomachine.
             * @memberof ibc.lightclients
             * @namespace
             */
            const solomachine = {};

            solomachine.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.solomachine
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function () {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IClientState
                     * @property {Long|null} [sequence] ClientState sequence
                     * @property {Long|null} [frozen_sequence] ClientState frozen_sequence
                     * @property {ibc.lightclients.solomachine.v1.IConsensusState|null} [consensus_state] ClientState consensus_state
                     * @property {boolean|null} [allow_update_after_proposal] ClientState allow_update_after_proposal
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IClientState=} [p] Properties to set
                     */
                    function ClientState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * ClientState frozen_sequence.
                     * @member {Long} frozen_sequence
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.frozen_sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * ClientState consensus_state.
                     * @member {ibc.lightclients.solomachine.v1.IConsensusState|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.consensus_state = null;

                    /**
                     * ClientState allow_update_after_proposal.
                     * @member {boolean} allow_update_after_proposal
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_proposal = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientState} m ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(8).uint64(m.sequence);
                        if (m.frozen_sequence != null && Object.hasOwnProperty.call(m, "frozen_sequence"))
                            w.uint32(16).uint64(m.frozen_sequence);
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.ibc.lightclients.solomachine.v1.ConsensusState.encode(m.consensus_state, w.uint32(26).fork()).ldelim();
                        if (m.allow_update_after_proposal != null && Object.hasOwnProperty.call(m, "allow_update_after_proposal"))
                            w.uint32(32).bool(m.allow_update_after_proposal);
                        return w;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.ClientState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.sequence = r.uint64();
                                    break;
                                case 2:
                                    m.frozen_sequence = r.uint64();
                                    break;
                                case 3:
                                    m.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.allow_update_after_proposal = r.bool();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientState;
                })();

                v1.ConsensusState = (function () {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConsensusState
                     * @property {google.protobuf.IAny|null} [public_key] ConsensusState public_key
                     * @property {string|null} [diversifier] ConsensusState diversifier
                     * @property {Long|null} [timestamp] ConsensusState timestamp
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState=} [p] Properties to set
                     */
                    function ConsensusState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConsensusState public_key.
                     * @member {google.protobuf.IAny|null|undefined} public_key
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.public_key = null;

                    /**
                     * ConsensusState diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.diversifier = "";

                    /**
                     * ConsensusState timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState} m ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.public_key != null && Object.hasOwnProperty.call(m, "public_key"))
                            $root.google.protobuf.Any.encode(m.public_key, w.uint32(10).fork()).ldelim();
                        if (m.diversifier != null && Object.hasOwnProperty.call(m, "diversifier"))
                            w.uint32(18).string(m.diversifier);
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            w.uint32(24).uint64(m.timestamp);
                        return w;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.ConsensusState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.public_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.diversifier = r.string();
                                    break;
                                case 3:
                                    m.timestamp = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConsensusState;
                })();

                v1.Header = (function () {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IHeader
                     * @property {Long|null} [sequence] Header sequence
                     * @property {Long|null} [timestamp] Header timestamp
                     * @property {Uint8Array|null} [signature] Header signature
                     * @property {google.protobuf.IAny|null} [new_public_key] Header new_public_key
                     * @property {string|null} [new_diversifier] Header new_diversifier
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IHeader=} [p] Properties to set
                     */
                    function Header(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Header sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Header timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Header signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.signature = $util.newBuffer([]);

                    /**
                     * Header new_public_key.
                     * @member {google.protobuf.IAny|null|undefined} new_public_key
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.new_public_key = null;

                    /**
                     * Header new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.solomachine.v1.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeader} m Header message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(8).uint64(m.sequence);
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            w.uint32(16).uint64(m.timestamp);
                        if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
                            w.uint32(26).bytes(m.signature);
                        if (m.new_public_key != null && Object.hasOwnProperty.call(m, "new_public_key"))
                            $root.google.protobuf.Any.encode(m.new_public_key, w.uint32(34).fork()).ldelim();
                        if (m.new_diversifier != null && Object.hasOwnProperty.call(m, "new_diversifier"))
                            w.uint32(42).string(m.new_diversifier);
                        return w;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.Header();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.sequence = r.uint64();
                                    break;
                                case 2:
                                    m.timestamp = r.uint64();
                                    break;
                                case 3:
                                    m.signature = r.bytes();
                                    break;
                                case 4:
                                    m.new_public_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.new_diversifier = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Header;
                })();

                v1.Misbehaviour = (function () {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {Long|null} [sequence] Misbehaviour sequence
                     * @property {ibc.lightclients.solomachine.v1.ISignatureAndData|null} [signature_one] Misbehaviour signature_one
                     * @property {ibc.lightclients.solomachine.v1.ISignatureAndData|null} [signature_two] Misbehaviour signature_two
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour=} [p] Properties to set
                     */
                    function Misbehaviour(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Misbehaviour signature_one.
                     * @member {ibc.lightclients.solomachine.v1.ISignatureAndData|null|undefined} signature_one
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_one = null;

                    /**
                     * Misbehaviour signature_two.
                     * @member {ibc.lightclients.solomachine.v1.ISignatureAndData|null|undefined} signature_two
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_two = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.solomachine.v1.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour} m Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(16).uint64(m.sequence);
                        if (m.signature_one != null && Object.hasOwnProperty.call(m, "signature_one"))
                            $root.ibc.lightclients.solomachine.v1.SignatureAndData.encode(m.signature_one, w.uint32(26).fork()).ldelim();
                        if (m.signature_two != null && Object.hasOwnProperty.call(m, "signature_two"))
                            $root.ibc.lightclients.solomachine.v1.SignatureAndData.encode(m.signature_two, w.uint32(34).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.Misbehaviour();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.sequence = r.uint64();
                                    break;
                                case 3:
                                    m.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Misbehaviour;
                })();

                v1.SignatureAndData = (function () {

                    /**
                     * Properties of a SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ISignatureAndData
                     * @property {Uint8Array|null} [signature] SignatureAndData signature
                     * @property {ibc.lightclients.solomachine.v1.DataType|null} [data_type] SignatureAndData data_type
                     * @property {Uint8Array|null} [data] SignatureAndData data
                     * @property {Long|null} [timestamp] SignatureAndData timestamp
                     */

                    /**
                     * Constructs a new SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a SignatureAndData.
                     * @implements ISignatureAndData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData=} [p] Properties to set
                     */
                    function SignatureAndData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SignatureAndData signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.signature = $util.newBuffer([]);

                    /**
                     * SignatureAndData data_type.
                     * @member {ibc.lightclients.solomachine.v1.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data_type = 0;

                    /**
                     * SignatureAndData data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data = $util.newBuffer([]);

                    /**
                     * SignatureAndData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified SignatureAndData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignatureAndData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData} m SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
                            w.uint32(10).bytes(m.signature);
                        if (m.data_type != null && Object.hasOwnProperty.call(m, "data_type"))
                            w.uint32(16).int32(m.data_type);
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(26).bytes(m.data);
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            w.uint32(32).uint64(m.timestamp);
                        return w;
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.SignatureAndData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.signature = r.bytes();
                                    break;
                                case 2:
                                    m.data_type = r.int32();
                                    break;
                                case 3:
                                    m.data = r.bytes();
                                    break;
                                case 4:
                                    m.timestamp = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SignatureAndData;
                })();

                v1.TimestampedSignatureData = (function () {

                    /**
                     * Properties of a TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ITimestampedSignatureData
                     * @property {Uint8Array|null} [signature_data] TimestampedSignatureData signature_data
                     * @property {Long|null} [timestamp] TimestampedSignatureData timestamp
                     */

                    /**
                     * Constructs a new TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a TimestampedSignatureData.
                     * @implements ITimestampedSignatureData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData=} [p] Properties to set
                     */
                    function TimestampedSignatureData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * TimestampedSignatureData signature_data.
                     * @member {Uint8Array} signature_data
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.signature_data = $util.newBuffer([]);

                    /**
                     * TimestampedSignatureData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified TimestampedSignatureData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.TimestampedSignatureData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData} m TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.signature_data != null && Object.hasOwnProperty.call(m, "signature_data"))
                            w.uint32(10).bytes(m.signature_data);
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            w.uint32(16).uint64(m.timestamp);
                        return w;
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.signature_data = r.bytes();
                                    break;
                                case 2:
                                    m.timestamp = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return TimestampedSignatureData;
                })();

                v1.SignBytes = (function () {

                    /**
                     * Properties of a SignBytes.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ISignBytes
                     * @property {Long|null} [sequence] SignBytes sequence
                     * @property {Long|null} [timestamp] SignBytes timestamp
                     * @property {string|null} [diversifier] SignBytes diversifier
                     * @property {ibc.lightclients.solomachine.v1.DataType|null} [data_type] SignBytes data_type
                     * @property {Uint8Array|null} [data] SignBytes data
                     */

                    /**
                     * Constructs a new SignBytes.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a SignBytes.
                     * @implements ISignBytes
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes=} [p] Properties to set
                     */
                    function SignBytes(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * SignBytes sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.sequence = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SignBytes timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * SignBytes diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.diversifier = "";

                    /**
                     * SignBytes data_type.
                     * @member {ibc.lightclients.solomachine.v1.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data_type = 0;

                    /**
                     * SignBytes data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified SignBytes message. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignBytes.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes} m SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.sequence != null && Object.hasOwnProperty.call(m, "sequence"))
                            w.uint32(8).uint64(m.sequence);
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            w.uint32(16).uint64(m.timestamp);
                        if (m.diversifier != null && Object.hasOwnProperty.call(m, "diversifier"))
                            w.uint32(26).string(m.diversifier);
                        if (m.data_type != null && Object.hasOwnProperty.call(m, "data_type"))
                            w.uint32(32).int32(m.data_type);
                        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                            w.uint32(42).bytes(m.data);
                        return w;
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.SignBytes();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.sequence = r.uint64();
                                    break;
                                case 2:
                                    m.timestamp = r.uint64();
                                    break;
                                case 3:
                                    m.diversifier = r.string();
                                    break;
                                case 4:
                                    m.data_type = r.int32();
                                    break;
                                case 5:
                                    m.data = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return SignBytes;
                })();

                /**
                 * DataType enum.
                 * @name ibc.lightclients.solomachine.v1.DataType
                 * @enum {number}
                 * @property {number} DATA_TYPE_UNINITIALIZED_UNSPECIFIED=0 DATA_TYPE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} DATA_TYPE_CLIENT_STATE=1 DATA_TYPE_CLIENT_STATE value
                 * @property {number} DATA_TYPE_CONSENSUS_STATE=2 DATA_TYPE_CONSENSUS_STATE value
                 * @property {number} DATA_TYPE_CONNECTION_STATE=3 DATA_TYPE_CONNECTION_STATE value
                 * @property {number} DATA_TYPE_CHANNEL_STATE=4 DATA_TYPE_CHANNEL_STATE value
                 * @property {number} DATA_TYPE_PACKET_COMMITMENT=5 DATA_TYPE_PACKET_COMMITMENT value
                 * @property {number} DATA_TYPE_PACKET_ACKNOWLEDGEMENT=6 DATA_TYPE_PACKET_ACKNOWLEDGEMENT value
                 * @property {number} DATA_TYPE_PACKET_RECEIPT_ABSENCE=7 DATA_TYPE_PACKET_RECEIPT_ABSENCE value
                 * @property {number} DATA_TYPE_NEXT_SEQUENCE_RECV=8 DATA_TYPE_NEXT_SEQUENCE_RECV value
                 * @property {number} DATA_TYPE_HEADER=9 DATA_TYPE_HEADER value
                 */
                v1.DataType = (function () {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DATA_TYPE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DATA_TYPE_CLIENT_STATE"] = 1;
                    values[valuesById[2] = "DATA_TYPE_CONSENSUS_STATE"] = 2;
                    values[valuesById[3] = "DATA_TYPE_CONNECTION_STATE"] = 3;
                    values[valuesById[4] = "DATA_TYPE_CHANNEL_STATE"] = 4;
                    values[valuesById[5] = "DATA_TYPE_PACKET_COMMITMENT"] = 5;
                    values[valuesById[6] = "DATA_TYPE_PACKET_ACKNOWLEDGEMENT"] = 6;
                    values[valuesById[7] = "DATA_TYPE_PACKET_RECEIPT_ABSENCE"] = 7;
                    values[valuesById[8] = "DATA_TYPE_NEXT_SEQUENCE_RECV"] = 8;
                    values[valuesById[9] = "DATA_TYPE_HEADER"] = 9;
                    return values;
                })();

                v1.HeaderData = (function () {

                    /**
                     * Properties of a HeaderData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IHeaderData
                     * @property {google.protobuf.IAny|null} [new_pub_key] HeaderData new_pub_key
                     * @property {string|null} [new_diversifier] HeaderData new_diversifier
                     */

                    /**
                     * Constructs a new HeaderData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a HeaderData.
                     * @implements IHeaderData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData=} [p] Properties to set
                     */
                    function HeaderData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * HeaderData new_pub_key.
                     * @member {google.protobuf.IAny|null|undefined} new_pub_key
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_pub_key = null;

                    /**
                     * HeaderData new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified HeaderData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.HeaderData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData} m HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.new_pub_key != null && Object.hasOwnProperty.call(m, "new_pub_key"))
                            $root.google.protobuf.Any.encode(m.new_pub_key, w.uint32(10).fork()).ldelim();
                        if (m.new_diversifier != null && Object.hasOwnProperty.call(m, "new_diversifier"))
                            w.uint32(18).string(m.new_diversifier);
                        return w;
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.HeaderData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.new_pub_key = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.new_diversifier = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return HeaderData;
                })();

                v1.ClientStateData = (function () {

                    /**
                     * Properties of a ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IClientStateData
                     * @property {Uint8Array|null} [path] ClientStateData path
                     * @property {google.protobuf.IAny|null} [client_state] ClientStateData client_state
                     */

                    /**
                     * Constructs a new ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ClientStateData.
                     * @implements IClientStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData=} [p] Properties to set
                     */
                    function ClientStateData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ClientStateData client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.client_state = null;

                    /**
                     * Encodes the specified ClientStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData} m ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.client_state != null && Object.hasOwnProperty.call(m, "client_state"))
                            $root.google.protobuf.Any.encode(m.client_state, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.ClientStateData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.client_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientStateData;
                })();

                v1.ConsensusStateData = (function () {

                    /**
                     * Properties of a ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConsensusStateData
                     * @property {Uint8Array|null} [path] ConsensusStateData path
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateData consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConsensusStateData.
                     * @implements IConsensusStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData=} [p] Properties to set
                     */
                    function ConsensusStateData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConsensusStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConsensusStateData consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData} m ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.consensus_state != null && Object.hasOwnProperty.call(m, "consensus_state"))
                            $root.google.protobuf.Any.encode(m.consensus_state, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.ConsensusStateData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.consensus_state = $root.google.protobuf.Any.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConsensusStateData;
                })();

                v1.ConnectionStateData = (function () {

                    /**
                     * Properties of a ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConnectionStateData
                     * @property {Uint8Array|null} [path] ConnectionStateData path
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] ConnectionStateData connection
                     */

                    /**
                     * Constructs a new ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConnectionStateData.
                     * @implements IConnectionStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData=} [p] Properties to set
                     */
                    function ConnectionStateData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConnectionStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConnectionStateData connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.connection = null;

                    /**
                     * Encodes the specified ConnectionStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConnectionStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData} m ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.connection != null && Object.hasOwnProperty.call(m, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(m.connection, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.ConnectionStateData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConnectionStateData;
                })();

                v1.ChannelStateData = (function () {

                    /**
                     * Properties of a ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IChannelStateData
                     * @property {Uint8Array|null} [path] ChannelStateData path
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] ChannelStateData channel
                     */

                    /**
                     * Constructs a new ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ChannelStateData.
                     * @implements IChannelStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData=} [p] Properties to set
                     */
                    function ChannelStateData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ChannelStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ChannelStateData channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.channel = null;

                    /**
                     * Encodes the specified ChannelStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ChannelStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData} m ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(m.channel, w.uint32(18).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.ChannelStateData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.channel = $root.ibc.core.channel.v1.Channel.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ChannelStateData;
                })();

                v1.PacketCommitmentData = (function () {

                    /**
                     * Properties of a PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketCommitmentData
                     * @property {Uint8Array|null} [path] PacketCommitmentData path
                     * @property {Uint8Array|null} [commitment] PacketCommitmentData commitment
                     */

                    /**
                     * Constructs a new PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketCommitmentData.
                     * @implements IPacketCommitmentData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData=} [p] Properties to set
                     */
                    function PacketCommitmentData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PacketCommitmentData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketCommitmentData commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.commitment = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketCommitmentData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketCommitmentData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData} m PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.commitment != null && Object.hasOwnProperty.call(m, "commitment"))
                            w.uint32(18).bytes(m.commitment);
                        return w;
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.PacketCommitmentData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.commitment = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PacketCommitmentData;
                })();

                v1.PacketAcknowledgementData = (function () {

                    /**
                     * Properties of a PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketAcknowledgementData
                     * @property {Uint8Array|null} [path] PacketAcknowledgementData path
                     * @property {Uint8Array|null} [acknowledgement] PacketAcknowledgementData acknowledgement
                     */

                    /**
                     * Constructs a new PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketAcknowledgementData.
                     * @implements IPacketAcknowledgementData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData=} [p] Properties to set
                     */
                    function PacketAcknowledgementData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PacketAcknowledgementData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketAcknowledgementData acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketAcknowledgementData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketAcknowledgementData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData} m PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.acknowledgement != null && Object.hasOwnProperty.call(m, "acknowledgement"))
                            w.uint32(18).bytes(m.acknowledgement);
                        return w;
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.acknowledgement = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PacketAcknowledgementData;
                })();

                v1.PacketReceiptAbsenceData = (function () {

                    /**
                     * Properties of a PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketReceiptAbsenceData
                     * @property {Uint8Array|null} [path] PacketReceiptAbsenceData path
                     */

                    /**
                     * Constructs a new PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketReceiptAbsenceData.
                     * @implements IPacketReceiptAbsenceData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData=} [p] Properties to set
                     */
                    function PacketReceiptAbsenceData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * PacketReceiptAbsenceData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @instance
                     */
                    PacketReceiptAbsenceData.prototype.path = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData} m PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        return w;
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return PacketReceiptAbsenceData;
                })();

                v1.NextSequenceRecvData = (function () {

                    /**
                     * Properties of a NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface INextSequenceRecvData
                     * @property {Uint8Array|null} [path] NextSequenceRecvData path
                     * @property {Long|null} [next_seq_recv] NextSequenceRecvData next_seq_recv
                     */

                    /**
                     * Constructs a new NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a NextSequenceRecvData.
                     * @implements INextSequenceRecvData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData=} [p] Properties to set
                     */
                    function NextSequenceRecvData(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * NextSequenceRecvData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.path = $util.newBuffer([]);

                    /**
                     * NextSequenceRecvData next_seq_recv.
                     * @member {Long} next_seq_recv
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.next_seq_recv = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified NextSequenceRecvData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.NextSequenceRecvData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData} m NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                            w.uint32(10).bytes(m.path);
                        if (m.next_seq_recv != null && Object.hasOwnProperty.call(m, "next_seq_recv"))
                            w.uint32(16).uint64(m.next_seq_recv);
                        return w;
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.path = r.bytes();
                                    break;
                                case 2:
                                    m.next_seq_recv = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return NextSequenceRecvData;
                })();

                return v1;
            })();

            return solomachine;
        })();

        lightclients.tendermint = (function () {

            /**
             * Namespace tendermint.
             * @memberof ibc.lightclients
             * @namespace
             */
            const tendermint = {};

            tendermint.v1 = (function () {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.tendermint
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function () {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IClientState
                     * @property {string|null} [chain_id] ClientState chain_id
                     * @property {ibc.lightclients.tendermint.v1.IFraction|null} [trust_level] ClientState trust_level
                     * @property {google.protobuf.IDuration|null} [trusting_period] ClientState trusting_period
                     * @property {google.protobuf.IDuration|null} [unbonding_period] ClientState unbonding_period
                     * @property {google.protobuf.IDuration|null} [max_clock_drift] ClientState max_clock_drift
                     * @property {ibc.core.client.v1.IHeight|null} [frozen_height] ClientState frozen_height
                     * @property {ibc.core.client.v1.IHeight|null} [latest_height] ClientState latest_height
                     * @property {Array.<ics23.IProofSpec>|null} [proof_specs] ClientState proof_specs
                     * @property {Array.<string>|null} [upgrade_path] ClientState upgrade_path
                     * @property {boolean|null} [allow_update_after_expiry] ClientState allow_update_after_expiry
                     * @property {boolean|null} [allow_update_after_misbehaviour] ClientState allow_update_after_misbehaviour
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IClientState=} [p] Properties to set
                     */
                    function ClientState(p) {
                        this.proof_specs = [];
                        this.upgrade_path = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ClientState chain_id.
                     * @member {string} chain_id
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.chain_id = "";

                    /**
                     * ClientState trust_level.
                     * @member {ibc.lightclients.tendermint.v1.IFraction|null|undefined} trust_level
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.trust_level = null;

                    /**
                     * ClientState trusting_period.
                     * @member {google.protobuf.IDuration|null|undefined} trusting_period
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.trusting_period = null;

                    /**
                     * ClientState unbonding_period.
                     * @member {google.protobuf.IDuration|null|undefined} unbonding_period
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.unbonding_period = null;

                    /**
                     * ClientState max_clock_drift.
                     * @member {google.protobuf.IDuration|null|undefined} max_clock_drift
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.max_clock_drift = null;

                    /**
                     * ClientState frozen_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} frozen_height
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.frozen_height = null;

                    /**
                     * ClientState latest_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} latest_height
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.latest_height = null;

                    /**
                     * ClientState proof_specs.
                     * @member {Array.<ics23.IProofSpec>} proof_specs
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.proof_specs = $util.emptyArray;

                    /**
                     * ClientState upgrade_path.
                     * @member {Array.<string>} upgrade_path
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.upgrade_path = $util.emptyArray;

                    /**
                     * ClientState allow_update_after_expiry.
                     * @member {boolean} allow_update_after_expiry
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_expiry = false;

                    /**
                     * ClientState allow_update_after_misbehaviour.
                     * @member {boolean} allow_update_after_misbehaviour
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_misbehaviour = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.tendermint.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IClientState} m ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.chain_id != null && Object.hasOwnProperty.call(m, "chain_id"))
                            w.uint32(10).string(m.chain_id);
                        if (m.trust_level != null && Object.hasOwnProperty.call(m, "trust_level"))
                            $root.ibc.lightclients.tendermint.v1.Fraction.encode(m.trust_level, w.uint32(18).fork()).ldelim();
                        if (m.trusting_period != null && Object.hasOwnProperty.call(m, "trusting_period"))
                            $root.google.protobuf.Duration.encode(m.trusting_period, w.uint32(26).fork()).ldelim();
                        if (m.unbonding_period != null && Object.hasOwnProperty.call(m, "unbonding_period"))
                            $root.google.protobuf.Duration.encode(m.unbonding_period, w.uint32(34).fork()).ldelim();
                        if (m.max_clock_drift != null && Object.hasOwnProperty.call(m, "max_clock_drift"))
                            $root.google.protobuf.Duration.encode(m.max_clock_drift, w.uint32(42).fork()).ldelim();
                        if (m.frozen_height != null && Object.hasOwnProperty.call(m, "frozen_height"))
                            $root.ibc.core.client.v1.Height.encode(m.frozen_height, w.uint32(50).fork()).ldelim();
                        if (m.latest_height != null && Object.hasOwnProperty.call(m, "latest_height"))
                            $root.ibc.core.client.v1.Height.encode(m.latest_height, w.uint32(58).fork()).ldelim();
                        if (m.proof_specs != null && m.proof_specs.length) {
                            for (var i = 0; i < m.proof_specs.length; ++i)
                                $root.ics23.ProofSpec.encode(m.proof_specs[i], w.uint32(66).fork()).ldelim();
                        }
                        if (m.upgrade_path != null && m.upgrade_path.length) {
                            for (var i = 0; i < m.upgrade_path.length; ++i)
                                w.uint32(74).string(m.upgrade_path[i]);
                        }
                        if (m.allow_update_after_expiry != null && Object.hasOwnProperty.call(m, "allow_update_after_expiry"))
                            w.uint32(80).bool(m.allow_update_after_expiry);
                        if (m.allow_update_after_misbehaviour != null && Object.hasOwnProperty.call(m, "allow_update_after_misbehaviour"))
                            w.uint32(88).bool(m.allow_update_after_misbehaviour);
                        return w;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.tendermint.v1.ClientState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.chain_id = r.string();
                                    break;
                                case 2:
                                    m.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.trusting_period = $root.google.protobuf.Duration.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.unbonding_period = $root.google.protobuf.Duration.decode(r, r.uint32());
                                    break;
                                case 5:
                                    m.max_clock_drift = $root.google.protobuf.Duration.decode(r, r.uint32());
                                    break;
                                case 6:
                                    m.frozen_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 7:
                                    m.latest_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 8:
                                    if (!(m.proof_specs && m.proof_specs.length))
                                        m.proof_specs = [];
                                    m.proof_specs.push($root.ics23.ProofSpec.decode(r, r.uint32()));
                                    break;
                                case 9:
                                    if (!(m.upgrade_path && m.upgrade_path.length))
                                        m.upgrade_path = [];
                                    m.upgrade_path.push(r.string());
                                    break;
                                case 10:
                                    m.allow_update_after_expiry = r.bool();
                                    break;
                                case 11:
                                    m.allow_update_after_misbehaviour = r.bool();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ClientState;
                })();

                v1.ConsensusState = (function () {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IConsensusState
                     * @property {google.protobuf.ITimestamp|null} [timestamp] ConsensusState timestamp
                     * @property {ibc.core.commitment.v1.IMerkleRoot|null} [root] ConsensusState root
                     * @property {Uint8Array|null} [next_validators_hash] ConsensusState next_validators_hash
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState=} [p] Properties to set
                     */
                    function ConsensusState(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * ConsensusState timestamp.
                     * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = null;

                    /**
                     * ConsensusState root.
                     * @member {ibc.core.commitment.v1.IMerkleRoot|null|undefined} root
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.root = null;

                    /**
                     * ConsensusState next_validators_hash.
                     * @member {Uint8Array} next_validators_hash
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.next_validators_hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.tendermint.v1.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState} m ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(10).fork()).ldelim();
                        if (m.root != null && Object.hasOwnProperty.call(m, "root"))
                            $root.ibc.core.commitment.v1.MerkleRoot.encode(m.root, w.uint32(18).fork()).ldelim();
                        if (m.next_validators_hash != null && Object.hasOwnProperty.call(m, "next_validators_hash"))
                            w.uint32(26).bytes(m.next_validators_hash);
                        return w;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.tendermint.v1.ConsensusState();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.root = $root.ibc.core.commitment.v1.MerkleRoot.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.next_validators_hash = r.bytes();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return ConsensusState;
                })();

                v1.Misbehaviour = (function () {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {ibc.lightclients.tendermint.v1.IHeader|null} [header_1] Misbehaviour header_1
                     * @property {ibc.lightclients.tendermint.v1.IHeader|null} [header_2] Misbehaviour header_2
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour=} [p] Properties to set
                     */
                    function Misbehaviour(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour header_1.
                     * @member {ibc.lightclients.tendermint.v1.IHeader|null|undefined} header_1
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.header_1 = null;

                    /**
                     * Misbehaviour header_2.
                     * @member {ibc.lightclients.tendermint.v1.IHeader|null|undefined} header_2
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.header_2 = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour} m Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.client_id != null && Object.hasOwnProperty.call(m, "client_id"))
                            w.uint32(10).string(m.client_id);
                        if (m.header_1 != null && Object.hasOwnProperty.call(m, "header_1"))
                            $root.ibc.lightclients.tendermint.v1.Header.encode(m.header_1, w.uint32(18).fork()).ldelim();
                        if (m.header_2 != null && Object.hasOwnProperty.call(m, "header_2"))
                            $root.ibc.lightclients.tendermint.v1.Header.encode(m.header_2, w.uint32(26).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.tendermint.v1.Misbehaviour();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.client_id = r.string();
                                    break;
                                case 2:
                                    m.header_1 = $root.ibc.lightclients.tendermint.v1.Header.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.header_2 = $root.ibc.lightclients.tendermint.v1.Header.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Misbehaviour;
                })();

                v1.Header = (function () {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IHeader
                     * @property {tendermint.types.ISignedHeader|null} [signed_header] Header signed_header
                     * @property {tendermint.types.IValidatorSet|null} [validator_set] Header validator_set
                     * @property {ibc.core.client.v1.IHeight|null} [trusted_height] Header trusted_height
                     * @property {tendermint.types.IValidatorSet|null} [trusted_validators] Header trusted_validators
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IHeader=} [p] Properties to set
                     */
                    function Header(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Header signed_header.
                     * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.signed_header = null;

                    /**
                     * Header validator_set.
                     * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.validator_set = null;

                    /**
                     * Header trusted_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} trusted_height
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.trusted_height = null;

                    /**
                     * Header trusted_validators.
                     * @member {tendermint.types.IValidatorSet|null|undefined} trusted_validators
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.trusted_validators = null;

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IHeader} m Header message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.signed_header != null && Object.hasOwnProperty.call(m, "signed_header"))
                            $root.tendermint.types.SignedHeader.encode(m.signed_header, w.uint32(10).fork()).ldelim();
                        if (m.validator_set != null && Object.hasOwnProperty.call(m, "validator_set"))
                            $root.tendermint.types.ValidatorSet.encode(m.validator_set, w.uint32(18).fork()).ldelim();
                        if (m.trusted_height != null && Object.hasOwnProperty.call(m, "trusted_height"))
                            $root.ibc.core.client.v1.Height.encode(m.trusted_height, w.uint32(26).fork()).ldelim();
                        if (m.trusted_validators != null && Object.hasOwnProperty.call(m, "trusted_validators"))
                            $root.tendermint.types.ValidatorSet.encode(m.trusted_validators, w.uint32(34).fork()).ldelim();
                        return w;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.tendermint.v1.Header();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.signed_header = $root.tendermint.types.SignedHeader.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.validator_set = $root.tendermint.types.ValidatorSet.decode(r, r.uint32());
                                    break;
                                case 3:
                                    m.trusted_height = $root.ibc.core.client.v1.Height.decode(r, r.uint32());
                                    break;
                                case 4:
                                    m.trusted_validators = $root.tendermint.types.ValidatorSet.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Header;
                })();

                v1.Fraction = (function () {

                    /**
                     * Properties of a Fraction.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IFraction
                     * @property {Long|null} [numerator] Fraction numerator
                     * @property {Long|null} [denominator] Fraction denominator
                     */

                    /**
                     * Constructs a new Fraction.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Fraction.
                     * @implements IFraction
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IFraction=} [p] Properties to set
                     */
                    function Fraction(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    /**
                     * Fraction numerator.
                     * @member {Long} numerator
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     */
                    Fraction.prototype.numerator = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Fraction denominator.
                     * @member {Long} denominator
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     */
                    Fraction.prototype.denominator = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                    /**
                     * Encodes the specified Fraction message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Fraction.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IFraction} m Fraction message or plain object to encode
                     * @param {$protobuf.Writer} [w] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fraction.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.numerator != null && Object.hasOwnProperty.call(m, "numerator"))
                            w.uint32(8).uint64(m.numerator);
                        if (m.denominator != null && Object.hasOwnProperty.call(m, "denominator"))
                            w.uint32(16).uint64(m.denominator);
                        return w;
                    };

                    /**
                     * Decodes a Fraction message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                     * @param {number} [l] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fraction.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.ibc.lightclients.tendermint.v1.Fraction();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                                case 1:
                                    m.numerator = r.uint64();
                                    break;
                                case 2:
                                    m.denominator = r.uint64();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                            }
                        }
                        return m;
                    };

                    return Fraction;
                })();

                return v1;
            })();

            return tendermint;
        })();

        return lightclients;
    })();

    return ibc;
})();

export const ics23 = $root.ics23 = (() => {

    /**
     * Namespace ics23.
     * @exports ics23
     * @namespace
     */
    const ics23 = {};

    /**
     * HashOp enum.
     * @name ics23.HashOp
     * @enum {number}
     * @property {number} NO_HASH=0 NO_HASH value
     * @property {number} SHA256=1 SHA256 value
     * @property {number} SHA512=2 SHA512 value
     * @property {number} KECCAK=3 KECCAK value
     * @property {number} RIPEMD160=4 RIPEMD160 value
     * @property {number} BITCOIN=5 BITCOIN value
     */
    ics23.HashOp = (function () {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO_HASH"] = 0;
        values[valuesById[1] = "SHA256"] = 1;
        values[valuesById[2] = "SHA512"] = 2;
        values[valuesById[3] = "KECCAK"] = 3;
        values[valuesById[4] = "RIPEMD160"] = 4;
        values[valuesById[5] = "BITCOIN"] = 5;
        return values;
    })();

    /**
     * LengthOp defines how to process the key and value of the LeafOp
     * to include length information. After encoding the length with the given
     * algorithm, the length will be prepended to the key and value bytes.
     * (Each one with it's own encoded length)
     * @name ics23.LengthOp
     * @enum {number}
     * @property {number} NO_PREFIX=0 NO_PREFIX value
     * @property {number} VAR_PROTO=1 VAR_PROTO value
     * @property {number} VAR_RLP=2 VAR_RLP value
     * @property {number} FIXED32_BIG=3 FIXED32_BIG value
     * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value
     * @property {number} FIXED64_BIG=5 FIXED64_BIG value
     * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value
     * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value
     * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value
     */
    ics23.LengthOp = (function () {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO_PREFIX"] = 0;
        values[valuesById[1] = "VAR_PROTO"] = 1;
        values[valuesById[2] = "VAR_RLP"] = 2;
        values[valuesById[3] = "FIXED32_BIG"] = 3;
        values[valuesById[4] = "FIXED32_LITTLE"] = 4;
        values[valuesById[5] = "FIXED64_BIG"] = 5;
        values[valuesById[6] = "FIXED64_LITTLE"] = 6;
        values[valuesById[7] = "REQUIRE_32_BYTES"] = 7;
        values[valuesById[8] = "REQUIRE_64_BYTES"] = 8;
        return values;
    })();

    ics23.ExistenceProof = (function () {

        /**
         * Properties of an ExistenceProof.
         * @memberof ics23
         * @interface IExistenceProof
         * @property {Uint8Array|null} [key] ExistenceProof key
         * @property {Uint8Array|null} [value] ExistenceProof value
         * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf
         * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path
         */

        /**
         * Constructs a new ExistenceProof.
         * @memberof ics23
         * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.
         * The result of peforming all these steps will provide a "root hash", which can
         * be compared to the value in a header.
         * 
         * Since it is computationally infeasible to produce a hash collission for any of the used
         * cryptographic hash functions, if someone can provide a series of operations to transform
         * a given key and value into a root hash that matches some trusted root, these key and values
         * must be in the referenced merkle tree.
         * 
         * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
         * which should be controlled by a spec. Eg. with lengthOp as NONE,
         * prefix = FOO, key = BAR, value = CHOICE
         * and
         * prefix = F, key = OOBAR, value = CHOICE
         * would produce the same value.
         * 
         * With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
         * in the ProofSpec is valuable to prevent this mutability. And why all trees should
         * length-prefix the data before hashing it.
         * @implements IExistenceProof
         * @constructor
         * @param {ics23.IExistenceProof=} [p] Properties to set
         */
        function ExistenceProof(p) {
            this.path = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * ExistenceProof value.
         * @member {Uint8Array} value
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.value = $util.newBuffer([]);

        /**
         * ExistenceProof leaf.
         * @member {ics23.ILeafOp|null|undefined} leaf
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.leaf = null;

        /**
         * ExistenceProof path.
         * @member {Array.<ics23.IInnerOp>} path
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.path = $util.emptyArray;

        /**
         * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.IExistenceProof} m ExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ExistenceProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                w.uint32(10).bytes(m.key);
            if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                w.uint32(18).bytes(m.value);
            if (m.leaf != null && Object.hasOwnProperty.call(m, "leaf"))
                $root.ics23.LeafOp.encode(m.leaf, w.uint32(26).fork()).ldelim();
            if (m.path != null && m.path.length) {
                for (var i = 0; i < m.path.length; ++i)
                    $root.ics23.InnerOp.encode(m.path[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes an ExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.ExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.ExistenceProof} ExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ExistenceProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.ExistenceProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.key = r.bytes();
                        break;
                    case 2:
                        m.value = r.bytes();
                        break;
                    case 3:
                        m.leaf = $root.ics23.LeafOp.decode(r, r.uint32());
                        break;
                    case 4:
                        if (!(m.path && m.path.length))
                            m.path = [];
                        m.path.push($root.ics23.InnerOp.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return ExistenceProof;
    })();

    ics23.NonExistenceProof = (function () {

        /**
         * Properties of a NonExistenceProof.
         * @memberof ics23
         * @interface INonExistenceProof
         * @property {Uint8Array|null} [key] NonExistenceProof key
         * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left
         * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right
         */

        /**
         * Constructs a new NonExistenceProof.
         * @memberof ics23
         * @classdesc Represents a NonExistenceProof.
         * @implements INonExistenceProof
         * @constructor
         * @param {ics23.INonExistenceProof=} [p] Properties to set
         */
        function NonExistenceProof(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * NonExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * NonExistenceProof left.
         * @member {ics23.IExistenceProof|null|undefined} left
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.left = null;

        /**
         * NonExistenceProof right.
         * @member {ics23.IExistenceProof|null|undefined} right
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.right = null;

        /**
         * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.INonExistenceProof} m NonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NonExistenceProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                w.uint32(10).bytes(m.key);
            if (m.left != null && Object.hasOwnProperty.call(m, "left"))
                $root.ics23.ExistenceProof.encode(m.left, w.uint32(18).fork()).ldelim();
            if (m.right != null && Object.hasOwnProperty.call(m, "right"))
                $root.ics23.ExistenceProof.encode(m.right, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a NonExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NonExistenceProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.NonExistenceProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.key = r.bytes();
                        break;
                    case 2:
                        m.left = $root.ics23.ExistenceProof.decode(r, r.uint32());
                        break;
                    case 3:
                        m.right = $root.ics23.ExistenceProof.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return NonExistenceProof;
    })();

    ics23.CommitmentProof = (function () {

        /**
         * Properties of a CommitmentProof.
         * @memberof ics23
         * @interface ICommitmentProof
         * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist
         * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist
         * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch
         * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed
         */

        /**
         * Constructs a new CommitmentProof.
         * @memberof ics23
         * @classdesc Represents a CommitmentProof.
         * @implements ICommitmentProof
         * @constructor
         * @param {ics23.ICommitmentProof=} [p] Properties to set
         */
        function CommitmentProof(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CommitmentProof exist.
         * @member {ics23.IExistenceProof|null|undefined} exist
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.exist = null;

        /**
         * CommitmentProof nonexist.
         * @member {ics23.INonExistenceProof|null|undefined} nonexist
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.nonexist = null;

        /**
         * CommitmentProof batch.
         * @member {ics23.IBatchProof|null|undefined} batch
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.batch = null;

        /**
         * CommitmentProof compressed.
         * @member {ics23.ICompressedBatchProof|null|undefined} compressed
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.compressed = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * CommitmentProof proof.
         * @member {"exist"|"nonexist"|"batch"|"compressed"|undefined} proof
         * @memberof ics23.CommitmentProof
         * @instance
         */
        Object.defineProperty(CommitmentProof.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist", "batch", "compressed"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.ICommitmentProof} m CommitmentProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommitmentProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.exist != null && Object.hasOwnProperty.call(m, "exist"))
                $root.ics23.ExistenceProof.encode(m.exist, w.uint32(10).fork()).ldelim();
            if (m.nonexist != null && Object.hasOwnProperty.call(m, "nonexist"))
                $root.ics23.NonExistenceProof.encode(m.nonexist, w.uint32(18).fork()).ldelim();
            if (m.batch != null && Object.hasOwnProperty.call(m, "batch"))
                $root.ics23.BatchProof.encode(m.batch, w.uint32(26).fork()).ldelim();
            if (m.compressed != null && Object.hasOwnProperty.call(m, "compressed"))
                $root.ics23.CompressedBatchProof.encode(m.compressed, w.uint32(34).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a CommitmentProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CommitmentProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.CommitmentProof} CommitmentProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommitmentProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.CommitmentProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.exist = $root.ics23.ExistenceProof.decode(r, r.uint32());
                        break;
                    case 2:
                        m.nonexist = $root.ics23.NonExistenceProof.decode(r, r.uint32());
                        break;
                    case 3:
                        m.batch = $root.ics23.BatchProof.decode(r, r.uint32());
                        break;
                    case 4:
                        m.compressed = $root.ics23.CompressedBatchProof.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return CommitmentProof;
    })();

    ics23.LeafOp = (function () {

        /**
         * Properties of a LeafOp.
         * @memberof ics23
         * @interface ILeafOp
         * @property {ics23.HashOp|null} [hash] LeafOp hash
         * @property {ics23.HashOp|null} [prehash_key] LeafOp prehash_key
         * @property {ics23.HashOp|null} [prehash_value] LeafOp prehash_value
         * @property {ics23.LengthOp|null} [length] LeafOp length
         * @property {Uint8Array|null} [prefix] LeafOp prefix
         */

        /**
         * Constructs a new LeafOp.
         * @memberof ics23
         * @classdesc LeafOp represents the raw key-value data we wish to prove, and
         * must be flexible to represent the internal transformation from
         * the original key-value pairs into the basis hash, for many existing
         * merkle trees.
         * 
         * key and value are passed in. So that the signature of this operation is:
         * leafOp(key, value) -> output
         * 
         * To process this, first prehash the keys and values if needed (ANY means no hash in this case):
         * hkey = prehashKey(key)
         * hvalue = prehashValue(value)
         * 
         * Then combine the bytes, and hash it
         * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
         * @implements ILeafOp
         * @constructor
         * @param {ics23.ILeafOp=} [p] Properties to set
         */
        function LeafOp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * LeafOp hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.hash = 0;

        /**
         * LeafOp prehash_key.
         * @member {ics23.HashOp} prehash_key
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prehash_key = 0;

        /**
         * LeafOp prehash_value.
         * @member {ics23.HashOp} prehash_value
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prehash_value = 0;

        /**
         * LeafOp length.
         * @member {ics23.LengthOp} length
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.length = 0;

        /**
         * LeafOp prefix.
         * @member {Uint8Array} prefix
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prefix = $util.newBuffer([]);

        /**
         * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.
         * @function encode
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.ILeafOp} m LeafOp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeafOp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                w.uint32(8).int32(m.hash);
            if (m.prehash_key != null && Object.hasOwnProperty.call(m, "prehash_key"))
                w.uint32(16).int32(m.prehash_key);
            if (m.prehash_value != null && Object.hasOwnProperty.call(m, "prehash_value"))
                w.uint32(24).int32(m.prehash_value);
            if (m.length != null && Object.hasOwnProperty.call(m, "length"))
                w.uint32(32).int32(m.length);
            if (m.prefix != null && Object.hasOwnProperty.call(m, "prefix"))
                w.uint32(42).bytes(m.prefix);
            return w;
        };

        /**
         * Decodes a LeafOp message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.LeafOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.LeafOp} LeafOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeafOp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.LeafOp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.hash = r.int32();
                        break;
                    case 2:
                        m.prehash_key = r.int32();
                        break;
                    case 3:
                        m.prehash_value = r.int32();
                        break;
                    case 4:
                        m.length = r.int32();
                        break;
                    case 5:
                        m.prefix = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return LeafOp;
    })();

    ics23.InnerOp = (function () {

        /**
         * Properties of an InnerOp.
         * @memberof ics23
         * @interface IInnerOp
         * @property {ics23.HashOp|null} [hash] InnerOp hash
         * @property {Uint8Array|null} [prefix] InnerOp prefix
         * @property {Uint8Array|null} [suffix] InnerOp suffix
         */

        /**
         * Constructs a new InnerOp.
         * @memberof ics23
         * @classdesc InnerOp represents a merkle-proof step that is not a leaf.
         * It represents concatenating two children and hashing them to provide the next result.
         * 
         * The result of the previous step is passed in, so the signature of this op is:
         * innerOp(child) -> output
         * 
         * The result of applying InnerOp should be:
         * output = op.hash(op.prefix || child || op.suffix)
         * 
         * where the || operator is concatenation of binary data,
         * and child is the result of hashing all the tree below this step.
         * 
         * Any special data, like prepending child with the length, or prepending the entire operation with
         * some value to differentiate from leaf nodes, should be included in prefix and suffix.
         * If either of prefix or suffix is empty, we just treat it as an empty string
         * @implements IInnerOp
         * @constructor
         * @param {ics23.IInnerOp=} [p] Properties to set
         */
        function InnerOp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * InnerOp hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.hash = 0;

        /**
         * InnerOp prefix.
         * @member {Uint8Array} prefix
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.prefix = $util.newBuffer([]);

        /**
         * InnerOp suffix.
         * @member {Uint8Array} suffix
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.suffix = $util.newBuffer([]);

        /**
         * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.
         * @function encode
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.IInnerOp} m InnerOp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerOp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                w.uint32(8).int32(m.hash);
            if (m.prefix != null && Object.hasOwnProperty.call(m, "prefix"))
                w.uint32(18).bytes(m.prefix);
            if (m.suffix != null && Object.hasOwnProperty.call(m, "suffix"))
                w.uint32(26).bytes(m.suffix);
            return w;
        };

        /**
         * Decodes an InnerOp message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.InnerOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.InnerOp} InnerOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerOp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.InnerOp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.hash = r.int32();
                        break;
                    case 2:
                        m.prefix = r.bytes();
                        break;
                    case 3:
                        m.suffix = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return InnerOp;
    })();

    ics23.ProofSpec = (function () {

        /**
         * Properties of a ProofSpec.
         * @memberof ics23
         * @interface IProofSpec
         * @property {ics23.ILeafOp|null} [leaf_spec] ProofSpec leaf_spec
         * @property {ics23.IInnerSpec|null} [inner_spec] ProofSpec inner_spec
         * @property {number|null} [max_depth] ProofSpec max_depth
         * @property {number|null} [min_depth] ProofSpec min_depth
         */

        /**
         * Constructs a new ProofSpec.
         * @memberof ics23
         * @classdesc ProofSpec defines what the expected parameters are for a given proof type.
         * This can be stored in the client and used to validate any incoming proofs.
         * 
         * verify(ProofSpec, Proof) -> Proof | Error
         * 
         * As demonstrated in tests, if we don't fix the algorithm used to calculate the
         * LeafHash for a given tree, there are many possible key-value pairs that can
         * generate a given hash (by interpretting the preimage differently).
         * We need this for proper security, requires client knows a priori what
         * tree format server uses. But not in code, rather a configuration object.
         * @implements IProofSpec
         * @constructor
         * @param {ics23.IProofSpec=} [p] Properties to set
         */
        function ProofSpec(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ProofSpec leaf_spec.
         * @member {ics23.ILeafOp|null|undefined} leaf_spec
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.leaf_spec = null;

        /**
         * ProofSpec inner_spec.
         * @member {ics23.IInnerSpec|null|undefined} inner_spec
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.inner_spec = null;

        /**
         * ProofSpec max_depth.
         * @member {number} max_depth
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.max_depth = 0;

        /**
         * ProofSpec min_depth.
         * @member {number} min_depth
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.min_depth = 0;

        /**
         * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.
         * @function encode
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.IProofSpec} m ProofSpec message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProofSpec.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.leaf_spec != null && Object.hasOwnProperty.call(m, "leaf_spec"))
                $root.ics23.LeafOp.encode(m.leaf_spec, w.uint32(10).fork()).ldelim();
            if (m.inner_spec != null && Object.hasOwnProperty.call(m, "inner_spec"))
                $root.ics23.InnerSpec.encode(m.inner_spec, w.uint32(18).fork()).ldelim();
            if (m.max_depth != null && Object.hasOwnProperty.call(m, "max_depth"))
                w.uint32(24).int32(m.max_depth);
            if (m.min_depth != null && Object.hasOwnProperty.call(m, "min_depth"))
                w.uint32(32).int32(m.min_depth);
            return w;
        };

        /**
         * Decodes a ProofSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.ProofSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.ProofSpec} ProofSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProofSpec.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.ProofSpec();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.leaf_spec = $root.ics23.LeafOp.decode(r, r.uint32());
                        break;
                    case 2:
                        m.inner_spec = $root.ics23.InnerSpec.decode(r, r.uint32());
                        break;
                    case 3:
                        m.max_depth = r.int32();
                        break;
                    case 4:
                        m.min_depth = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return ProofSpec;
    })();

    ics23.InnerSpec = (function () {

        /**
         * Properties of an InnerSpec.
         * @memberof ics23
         * @interface IInnerSpec
         * @property {Array.<number>|null} [child_order] InnerSpec child_order
         * @property {number|null} [child_size] InnerSpec child_size
         * @property {number|null} [min_prefix_length] InnerSpec min_prefix_length
         * @property {number|null} [max_prefix_length] InnerSpec max_prefix_length
         * @property {Uint8Array|null} [empty_child] InnerSpec empty_child
         * @property {ics23.HashOp|null} [hash] InnerSpec hash
         */

        /**
         * Constructs a new InnerSpec.
         * @memberof ics23
         * @classdesc Represents an InnerSpec.
         * @implements IInnerSpec
         * @constructor
         * @param {ics23.IInnerSpec=} [p] Properties to set
         */
        function InnerSpec(p) {
            this.child_order = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * InnerSpec child_order.
         * @member {Array.<number>} child_order
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.child_order = $util.emptyArray;

        /**
         * InnerSpec child_size.
         * @member {number} child_size
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.child_size = 0;

        /**
         * InnerSpec min_prefix_length.
         * @member {number} min_prefix_length
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.min_prefix_length = 0;

        /**
         * InnerSpec max_prefix_length.
         * @member {number} max_prefix_length
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.max_prefix_length = 0;

        /**
         * InnerSpec empty_child.
         * @member {Uint8Array} empty_child
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.empty_child = $util.newBuffer([]);

        /**
         * InnerSpec hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.hash = 0;

        /**
         * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.
         * @function encode
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.IInnerSpec} m InnerSpec message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerSpec.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.child_order != null && m.child_order.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.child_order.length; ++i)
                    w.int32(m.child_order[i]);
                w.ldelim();
            }
            if (m.child_size != null && Object.hasOwnProperty.call(m, "child_size"))
                w.uint32(16).int32(m.child_size);
            if (m.min_prefix_length != null && Object.hasOwnProperty.call(m, "min_prefix_length"))
                w.uint32(24).int32(m.min_prefix_length);
            if (m.max_prefix_length != null && Object.hasOwnProperty.call(m, "max_prefix_length"))
                w.uint32(32).int32(m.max_prefix_length);
            if (m.empty_child != null && Object.hasOwnProperty.call(m, "empty_child"))
                w.uint32(42).bytes(m.empty_child);
            if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                w.uint32(48).int32(m.hash);
            return w;
        };

        /**
         * Decodes an InnerSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.InnerSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.InnerSpec} InnerSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerSpec.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.InnerSpec();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        if (!(m.child_order && m.child_order.length))
                            m.child_order = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2)
                                m.child_order.push(r.int32());
                        } else
                            m.child_order.push(r.int32());
                        break;
                    case 2:
                        m.child_size = r.int32();
                        break;
                    case 3:
                        m.min_prefix_length = r.int32();
                        break;
                    case 4:
                        m.max_prefix_length = r.int32();
                        break;
                    case 5:
                        m.empty_child = r.bytes();
                        break;
                    case 6:
                        m.hash = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return InnerSpec;
    })();

    ics23.BatchProof = (function () {

        /**
         * Properties of a BatchProof.
         * @memberof ics23
         * @interface IBatchProof
         * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries
         */

        /**
         * Constructs a new BatchProof.
         * @memberof ics23
         * @classdesc Represents a BatchProof.
         * @implements IBatchProof
         * @constructor
         * @param {ics23.IBatchProof=} [p] Properties to set
         */
        function BatchProof(p) {
            this.entries = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * BatchProof entries.
         * @member {Array.<ics23.IBatchEntry>} entries
         * @memberof ics23.BatchProof
         * @instance
         */
        BatchProof.prototype.entries = $util.emptyArray;

        /**
         * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.IBatchProof} m BatchProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.entries != null && m.entries.length) {
                for (var i = 0; i < m.entries.length; ++i)
                    $root.ics23.BatchEntry.encode(m.entries[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a BatchProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.BatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.BatchProof} BatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.BatchProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        if (!(m.entries && m.entries.length))
                            m.entries = [];
                        m.entries.push($root.ics23.BatchEntry.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return BatchProof;
    })();

    ics23.BatchEntry = (function () {

        /**
         * Properties of a BatchEntry.
         * @memberof ics23
         * @interface IBatchEntry
         * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist
         * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist
         */

        /**
         * Constructs a new BatchEntry.
         * @memberof ics23
         * @classdesc Represents a BatchEntry.
         * @implements IBatchEntry
         * @constructor
         * @param {ics23.IBatchEntry=} [p] Properties to set
         */
        function BatchEntry(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * BatchEntry exist.
         * @member {ics23.IExistenceProof|null|undefined} exist
         * @memberof ics23.BatchEntry
         * @instance
         */
        BatchEntry.prototype.exist = null;

        /**
         * BatchEntry nonexist.
         * @member {ics23.INonExistenceProof|null|undefined} nonexist
         * @memberof ics23.BatchEntry
         * @instance
         */
        BatchEntry.prototype.nonexist = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * BatchEntry proof.
         * @member {"exist"|"nonexist"|undefined} proof
         * @memberof ics23.BatchEntry
         * @instance
         */
        Object.defineProperty(BatchEntry.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.
         * @function encode
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.IBatchEntry} m BatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchEntry.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.exist != null && Object.hasOwnProperty.call(m, "exist"))
                $root.ics23.ExistenceProof.encode(m.exist, w.uint32(10).fork()).ldelim();
            if (m.nonexist != null && Object.hasOwnProperty.call(m, "nonexist"))
                $root.ics23.NonExistenceProof.encode(m.nonexist, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a BatchEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.BatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.BatchEntry} BatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchEntry.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.BatchEntry();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.exist = $root.ics23.ExistenceProof.decode(r, r.uint32());
                        break;
                    case 2:
                        m.nonexist = $root.ics23.NonExistenceProof.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return BatchEntry;
    })();

    ics23.CompressedBatchProof = (function () {

        /**
         * Properties of a CompressedBatchProof.
         * @memberof ics23
         * @interface ICompressedBatchProof
         * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries
         * @property {Array.<ics23.IInnerOp>|null} [lookup_inners] CompressedBatchProof lookup_inners
         */

        /**
         * Constructs a new CompressedBatchProof.
         * @memberof ics23
         * @classdesc Represents a CompressedBatchProof.
         * @implements ICompressedBatchProof
         * @constructor
         * @param {ics23.ICompressedBatchProof=} [p] Properties to set
         */
        function CompressedBatchProof(p) {
            this.entries = [];
            this.lookup_inners = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CompressedBatchProof entries.
         * @member {Array.<ics23.ICompressedBatchEntry>} entries
         * @memberof ics23.CompressedBatchProof
         * @instance
         */
        CompressedBatchProof.prototype.entries = $util.emptyArray;

        /**
         * CompressedBatchProof lookup_inners.
         * @member {Array.<ics23.IInnerOp>} lookup_inners
         * @memberof ics23.CompressedBatchProof
         * @instance
         */
        CompressedBatchProof.prototype.lookup_inners = $util.emptyArray;

        /**
         * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.ICompressedBatchProof} m CompressedBatchProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.entries != null && m.entries.length) {
                for (var i = 0; i < m.entries.length; ++i)
                    $root.ics23.CompressedBatchEntry.encode(m.entries[i], w.uint32(10).fork()).ldelim();
            }
            if (m.lookup_inners != null && m.lookup_inners.length) {
                for (var i = 0; i < m.lookup_inners.length; ++i)
                    $root.ics23.InnerOp.encode(m.lookup_inners[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a CompressedBatchProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.CompressedBatchProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        if (!(m.entries && m.entries.length))
                            m.entries = [];
                        m.entries.push($root.ics23.CompressedBatchEntry.decode(r, r.uint32()));
                        break;
                    case 2:
                        if (!(m.lookup_inners && m.lookup_inners.length))
                            m.lookup_inners = [];
                        m.lookup_inners.push($root.ics23.InnerOp.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return CompressedBatchProof;
    })();

    ics23.CompressedBatchEntry = (function () {

        /**
         * Properties of a CompressedBatchEntry.
         * @memberof ics23
         * @interface ICompressedBatchEntry
         * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist
         * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist
         */

        /**
         * Constructs a new CompressedBatchEntry.
         * @memberof ics23
         * @classdesc Represents a CompressedBatchEntry.
         * @implements ICompressedBatchEntry
         * @constructor
         * @param {ics23.ICompressedBatchEntry=} [p] Properties to set
         */
        function CompressedBatchEntry(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CompressedBatchEntry exist.
         * @member {ics23.ICompressedExistenceProof|null|undefined} exist
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        CompressedBatchEntry.prototype.exist = null;

        /**
         * CompressedBatchEntry nonexist.
         * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        CompressedBatchEntry.prototype.nonexist = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * CompressedBatchEntry proof.
         * @member {"exist"|"nonexist"|undefined} proof
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        Object.defineProperty(CompressedBatchEntry.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.ICompressedBatchEntry} m CompressedBatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchEntry.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.exist != null && Object.hasOwnProperty.call(m, "exist"))
                $root.ics23.CompressedExistenceProof.encode(m.exist, w.uint32(10).fork()).ldelim();
            if (m.nonexist != null && Object.hasOwnProperty.call(m, "nonexist"))
                $root.ics23.CompressedNonExistenceProof.encode(m.nonexist, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a CompressedBatchEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchEntry.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.CompressedBatchEntry();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.exist = $root.ics23.CompressedExistenceProof.decode(r, r.uint32());
                        break;
                    case 2:
                        m.nonexist = $root.ics23.CompressedNonExistenceProof.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return CompressedBatchEntry;
    })();

    ics23.CompressedExistenceProof = (function () {

        /**
         * Properties of a CompressedExistenceProof.
         * @memberof ics23
         * @interface ICompressedExistenceProof
         * @property {Uint8Array|null} [key] CompressedExistenceProof key
         * @property {Uint8Array|null} [value] CompressedExistenceProof value
         * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf
         * @property {Array.<number>|null} [path] CompressedExistenceProof path
         */

        /**
         * Constructs a new CompressedExistenceProof.
         * @memberof ics23
         * @classdesc Represents a CompressedExistenceProof.
         * @implements ICompressedExistenceProof
         * @constructor
         * @param {ics23.ICompressedExistenceProof=} [p] Properties to set
         */
        function CompressedExistenceProof(p) {
            this.path = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CompressedExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * CompressedExistenceProof value.
         * @member {Uint8Array} value
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.value = $util.newBuffer([]);

        /**
         * CompressedExistenceProof leaf.
         * @member {ics23.ILeafOp|null|undefined} leaf
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.leaf = null;

        /**
         * CompressedExistenceProof path.
         * @member {Array.<number>} path
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.path = $util.emptyArray;

        /**
         * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.ICompressedExistenceProof} m CompressedExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedExistenceProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                w.uint32(10).bytes(m.key);
            if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                w.uint32(18).bytes(m.value);
            if (m.leaf != null && Object.hasOwnProperty.call(m, "leaf"))
                $root.ics23.LeafOp.encode(m.leaf, w.uint32(26).fork()).ldelim();
            if (m.path != null && m.path.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.path.length; ++i)
                    w.int32(m.path[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a CompressedExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedExistenceProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.CompressedExistenceProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.key = r.bytes();
                        break;
                    case 2:
                        m.value = r.bytes();
                        break;
                    case 3:
                        m.leaf = $root.ics23.LeafOp.decode(r, r.uint32());
                        break;
                    case 4:
                        if (!(m.path && m.path.length))
                            m.path = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2)
                                m.path.push(r.int32());
                        } else
                            m.path.push(r.int32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return CompressedExistenceProof;
    })();

    ics23.CompressedNonExistenceProof = (function () {

        /**
         * Properties of a CompressedNonExistenceProof.
         * @memberof ics23
         * @interface ICompressedNonExistenceProof
         * @property {Uint8Array|null} [key] CompressedNonExistenceProof key
         * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left
         * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right
         */

        /**
         * Constructs a new CompressedNonExistenceProof.
         * @memberof ics23
         * @classdesc Represents a CompressedNonExistenceProof.
         * @implements ICompressedNonExistenceProof
         * @constructor
         * @param {ics23.ICompressedNonExistenceProof=} [p] Properties to set
         */
        function CompressedNonExistenceProof(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CompressedNonExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * CompressedNonExistenceProof left.
         * @member {ics23.ICompressedExistenceProof|null|undefined} left
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.left = null;

        /**
         * CompressedNonExistenceProof right.
         * @member {ics23.ICompressedExistenceProof|null|undefined} right
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.right = null;

        /**
         * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.ICompressedNonExistenceProof} m CompressedNonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedNonExistenceProof.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                w.uint32(10).bytes(m.key);
            if (m.left != null && Object.hasOwnProperty.call(m, "left"))
                $root.ics23.CompressedExistenceProof.encode(m.left, w.uint32(18).fork()).ldelim();
            if (m.right != null && Object.hasOwnProperty.call(m, "right"))
                $root.ics23.CompressedExistenceProof.encode(m.right, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedNonExistenceProof.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.ics23.CompressedNonExistenceProof();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.key = r.bytes();
                        break;
                    case 2:
                        m.left = $root.ics23.CompressedExistenceProof.decode(r, r.uint32());
                        break;
                    case 3:
                        m.right = $root.ics23.CompressedExistenceProof.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return CompressedNonExistenceProof;
    })();

    return ics23;
})();

export const cosmos_proto = $root.cosmos_proto = (() => {

    /**
     * Namespace cosmos_proto.
     * @exports cosmos_proto
     * @namespace
     */
    const cosmos_proto = {};

    return cosmos_proto;
})();

export const gogoproto = $root.gogoproto = (() => {

    /**
     * Namespace gogoproto.
     * @exports gogoproto
     * @namespace
     */
    const gogoproto = {};

    return gogoproto;
})();

export const tendermint = $root.tendermint = (() => {

    /**
     * Namespace tendermint.
     * @exports tendermint
     * @namespace
     */
    const tendermint = {};

    tendermint.abci = (function () {

        /**
         * Namespace abci.
         * @memberof tendermint
         * @namespace
         */
        const abci = {};

        abci.Request = (function () {

            /**
             * Properties of a Request.
             * @memberof tendermint.abci
             * @interface IRequest
             * @property {tendermint.abci.IRequestEcho|null} [echo] Request echo
             * @property {tendermint.abci.IRequestFlush|null} [flush] Request flush
             * @property {tendermint.abci.IRequestInfo|null} [info] Request info
             * @property {tendermint.abci.IRequestSetOption|null} [set_option] Request set_option
             * @property {tendermint.abci.IRequestInitChain|null} [init_chain] Request init_chain
             * @property {tendermint.abci.IRequestQuery|null} [query] Request query
             * @property {tendermint.abci.IRequestBeginBlock|null} [begin_block] Request begin_block
             * @property {tendermint.abci.IRequestCheckTx|null} [check_tx] Request check_tx
             * @property {tendermint.abci.IRequestDeliverTx|null} [deliver_tx] Request deliver_tx
             * @property {tendermint.abci.IRequestEndBlock|null} [end_block] Request end_block
             * @property {tendermint.abci.IRequestCommit|null} [commit] Request commit
             * @property {tendermint.abci.IRequestListSnapshots|null} [list_snapshots] Request list_snapshots
             * @property {tendermint.abci.IRequestOfferSnapshot|null} [offer_snapshot] Request offer_snapshot
             * @property {tendermint.abci.IRequestLoadSnapshotChunk|null} [load_snapshot_chunk] Request load_snapshot_chunk
             * @property {tendermint.abci.IRequestApplySnapshotChunk|null} [apply_snapshot_chunk] Request apply_snapshot_chunk
             */

            /**
             * Constructs a new Request.
             * @memberof tendermint.abci
             * @classdesc Represents a Request.
             * @implements IRequest
             * @constructor
             * @param {tendermint.abci.IRequest=} [p] Properties to set
             */
            function Request(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Request echo.
             * @member {tendermint.abci.IRequestEcho|null|undefined} echo
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.echo = null;

            /**
             * Request flush.
             * @member {tendermint.abci.IRequestFlush|null|undefined} flush
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.flush = null;

            /**
             * Request info.
             * @member {tendermint.abci.IRequestInfo|null|undefined} info
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.info = null;

            /**
             * Request set_option.
             * @member {tendermint.abci.IRequestSetOption|null|undefined} set_option
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.set_option = null;

            /**
             * Request init_chain.
             * @member {tendermint.abci.IRequestInitChain|null|undefined} init_chain
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.init_chain = null;

            /**
             * Request query.
             * @member {tendermint.abci.IRequestQuery|null|undefined} query
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.query = null;

            /**
             * Request begin_block.
             * @member {tendermint.abci.IRequestBeginBlock|null|undefined} begin_block
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.begin_block = null;

            /**
             * Request check_tx.
             * @member {tendermint.abci.IRequestCheckTx|null|undefined} check_tx
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.check_tx = null;

            /**
             * Request deliver_tx.
             * @member {tendermint.abci.IRequestDeliverTx|null|undefined} deliver_tx
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.deliver_tx = null;

            /**
             * Request end_block.
             * @member {tendermint.abci.IRequestEndBlock|null|undefined} end_block
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.end_block = null;

            /**
             * Request commit.
             * @member {tendermint.abci.IRequestCommit|null|undefined} commit
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.commit = null;

            /**
             * Request list_snapshots.
             * @member {tendermint.abci.IRequestListSnapshots|null|undefined} list_snapshots
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.list_snapshots = null;

            /**
             * Request offer_snapshot.
             * @member {tendermint.abci.IRequestOfferSnapshot|null|undefined} offer_snapshot
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.offer_snapshot = null;

            /**
             * Request load_snapshot_chunk.
             * @member {tendermint.abci.IRequestLoadSnapshotChunk|null|undefined} load_snapshot_chunk
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.load_snapshot_chunk = null;

            /**
             * Request apply_snapshot_chunk.
             * @member {tendermint.abci.IRequestApplySnapshotChunk|null|undefined} apply_snapshot_chunk
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.apply_snapshot_chunk = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Request value.
             * @member {"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
             * @memberof tendermint.abci.Request
             * @instance
             */
            Object.defineProperty(Request.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Request message. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.IRequest} m Request message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.echo != null && Object.hasOwnProperty.call(m, "echo"))
                    $root.tendermint.abci.RequestEcho.encode(m.echo, w.uint32(10).fork()).ldelim();
                if (m.flush != null && Object.hasOwnProperty.call(m, "flush"))
                    $root.tendermint.abci.RequestFlush.encode(m.flush, w.uint32(18).fork()).ldelim();
                if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                    $root.tendermint.abci.RequestInfo.encode(m.info, w.uint32(26).fork()).ldelim();
                if (m.set_option != null && Object.hasOwnProperty.call(m, "set_option"))
                    $root.tendermint.abci.RequestSetOption.encode(m.set_option, w.uint32(34).fork()).ldelim();
                if (m.init_chain != null && Object.hasOwnProperty.call(m, "init_chain"))
                    $root.tendermint.abci.RequestInitChain.encode(m.init_chain, w.uint32(42).fork()).ldelim();
                if (m.query != null && Object.hasOwnProperty.call(m, "query"))
                    $root.tendermint.abci.RequestQuery.encode(m.query, w.uint32(50).fork()).ldelim();
                if (m.begin_block != null && Object.hasOwnProperty.call(m, "begin_block"))
                    $root.tendermint.abci.RequestBeginBlock.encode(m.begin_block, w.uint32(58).fork()).ldelim();
                if (m.check_tx != null && Object.hasOwnProperty.call(m, "check_tx"))
                    $root.tendermint.abci.RequestCheckTx.encode(m.check_tx, w.uint32(66).fork()).ldelim();
                if (m.deliver_tx != null && Object.hasOwnProperty.call(m, "deliver_tx"))
                    $root.tendermint.abci.RequestDeliverTx.encode(m.deliver_tx, w.uint32(74).fork()).ldelim();
                if (m.end_block != null && Object.hasOwnProperty.call(m, "end_block"))
                    $root.tendermint.abci.RequestEndBlock.encode(m.end_block, w.uint32(82).fork()).ldelim();
                if (m.commit != null && Object.hasOwnProperty.call(m, "commit"))
                    $root.tendermint.abci.RequestCommit.encode(m.commit, w.uint32(90).fork()).ldelim();
                if (m.list_snapshots != null && Object.hasOwnProperty.call(m, "list_snapshots"))
                    $root.tendermint.abci.RequestListSnapshots.encode(m.list_snapshots, w.uint32(98).fork()).ldelim();
                if (m.offer_snapshot != null && Object.hasOwnProperty.call(m, "offer_snapshot"))
                    $root.tendermint.abci.RequestOfferSnapshot.encode(m.offer_snapshot, w.uint32(106).fork()).ldelim();
                if (m.load_snapshot_chunk != null && Object.hasOwnProperty.call(m, "load_snapshot_chunk"))
                    $root.tendermint.abci.RequestLoadSnapshotChunk.encode(m.load_snapshot_chunk, w.uint32(114).fork()).ldelim();
                if (m.apply_snapshot_chunk != null && Object.hasOwnProperty.call(m, "apply_snapshot_chunk"))
                    $root.tendermint.abci.RequestApplySnapshotChunk.encode(m.apply_snapshot_chunk, w.uint32(122).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Request message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.Request();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.echo = $root.tendermint.abci.RequestEcho.decode(r, r.uint32());
                            break;
                        case 2:
                            m.flush = $root.tendermint.abci.RequestFlush.decode(r, r.uint32());
                            break;
                        case 3:
                            m.info = $root.tendermint.abci.RequestInfo.decode(r, r.uint32());
                            break;
                        case 4:
                            m.set_option = $root.tendermint.abci.RequestSetOption.decode(r, r.uint32());
                            break;
                        case 5:
                            m.init_chain = $root.tendermint.abci.RequestInitChain.decode(r, r.uint32());
                            break;
                        case 6:
                            m.query = $root.tendermint.abci.RequestQuery.decode(r, r.uint32());
                            break;
                        case 7:
                            m.begin_block = $root.tendermint.abci.RequestBeginBlock.decode(r, r.uint32());
                            break;
                        case 8:
                            m.check_tx = $root.tendermint.abci.RequestCheckTx.decode(r, r.uint32());
                            break;
                        case 9:
                            m.deliver_tx = $root.tendermint.abci.RequestDeliverTx.decode(r, r.uint32());
                            break;
                        case 10:
                            m.end_block = $root.tendermint.abci.RequestEndBlock.decode(r, r.uint32());
                            break;
                        case 11:
                            m.commit = $root.tendermint.abci.RequestCommit.decode(r, r.uint32());
                            break;
                        case 12:
                            m.list_snapshots = $root.tendermint.abci.RequestListSnapshots.decode(r, r.uint32());
                            break;
                        case 13:
                            m.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.decode(r, r.uint32());
                            break;
                        case 14:
                            m.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.decode(r, r.uint32());
                            break;
                        case 15:
                            m.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Request;
        })();

        abci.RequestEcho = (function () {

            /**
             * Properties of a RequestEcho.
             * @memberof tendermint.abci
             * @interface IRequestEcho
             * @property {string|null} [message] RequestEcho message
             */

            /**
             * Constructs a new RequestEcho.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestEcho.
             * @implements IRequestEcho
             * @constructor
             * @param {tendermint.abci.IRequestEcho=} [p] Properties to set
             */
            function RequestEcho(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestEcho message.
             * @member {string} message
             * @memberof tendermint.abci.RequestEcho
             * @instance
             */
            RequestEcho.prototype.message = "";

            /**
             * Encodes the specified RequestEcho message. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.IRequestEcho} m RequestEcho message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEcho.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                    w.uint32(10).string(m.message);
                return w;
            };

            /**
             * Decodes a RequestEcho message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEcho.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestEcho();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.message = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestEcho;
        })();

        abci.RequestFlush = (function () {

            /**
             * Properties of a RequestFlush.
             * @memberof tendermint.abci
             * @interface IRequestFlush
             */

            /**
             * Constructs a new RequestFlush.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestFlush.
             * @implements IRequestFlush
             * @constructor
             * @param {tendermint.abci.IRequestFlush=} [p] Properties to set
             */
            function RequestFlush(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Encodes the specified RequestFlush message. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.IRequestFlush} m RequestFlush message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestFlush.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                return w;
            };

            /**
             * Decodes a RequestFlush message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestFlush.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestFlush();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestFlush;
        })();

        abci.RequestInfo = (function () {

            /**
             * Properties of a RequestInfo.
             * @memberof tendermint.abci
             * @interface IRequestInfo
             * @property {string|null} [version] RequestInfo version
             * @property {Long|null} [block_version] RequestInfo block_version
             * @property {Long|null} [p2p_version] RequestInfo p2p_version
             */

            /**
             * Constructs a new RequestInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestInfo.
             * @implements IRequestInfo
             * @constructor
             * @param {tendermint.abci.IRequestInfo=} [p] Properties to set
             */
            function RequestInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestInfo version.
             * @member {string} version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.version = "";

            /**
             * RequestInfo block_version.
             * @member {Long} block_version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.block_version = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * RequestInfo p2p_version.
             * @member {Long} p2p_version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.p2p_version = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * Encodes the specified RequestInfo message. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.IRequestInfo} m RequestInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                    w.uint32(10).string(m.version);
                if (m.block_version != null && Object.hasOwnProperty.call(m, "block_version"))
                    w.uint32(16).uint64(m.block_version);
                if (m.p2p_version != null && Object.hasOwnProperty.call(m, "p2p_version"))
                    w.uint32(24).uint64(m.p2p_version);
                return w;
            };

            /**
             * Decodes a RequestInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.version = r.string();
                            break;
                        case 2:
                            m.block_version = r.uint64();
                            break;
                        case 3:
                            m.p2p_version = r.uint64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestInfo;
        })();

        abci.RequestSetOption = (function () {

            /**
             * Properties of a RequestSetOption.
             * @memberof tendermint.abci
             * @interface IRequestSetOption
             * @property {string|null} [key] RequestSetOption key
             * @property {string|null} [value] RequestSetOption value
             */

            /**
             * Constructs a new RequestSetOption.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestSetOption.
             * @implements IRequestSetOption
             * @constructor
             * @param {tendermint.abci.IRequestSetOption=} [p] Properties to set
             */
            function RequestSetOption(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestSetOption key.
             * @member {string} key
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             */
            RequestSetOption.prototype.key = "";

            /**
             * RequestSetOption value.
             * @member {string} value
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             */
            RequestSetOption.prototype.value = "";

            /**
             * Encodes the specified RequestSetOption message. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.IRequestSetOption} m RequestSetOption message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestSetOption.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    w.uint32(10).string(m.key);
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(18).string(m.value);
                return w;
            };

            /**
             * Decodes a RequestSetOption message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestSetOption.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestSetOption();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.key = r.string();
                            break;
                        case 2:
                            m.value = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestSetOption;
        })();

        abci.RequestInitChain = (function () {

            /**
             * Properties of a RequestInitChain.
             * @memberof tendermint.abci
             * @interface IRequestInitChain
             * @property {google.protobuf.ITimestamp|null} [time] RequestInitChain time
             * @property {string|null} [chain_id] RequestInitChain chain_id
             * @property {tendermint.abci.IConsensusParams|null} [consensus_params] RequestInitChain consensus_params
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] RequestInitChain validators
             * @property {Uint8Array|null} [app_state_bytes] RequestInitChain app_state_bytes
             * @property {Long|null} [initial_height] RequestInitChain initial_height
             */

            /**
             * Constructs a new RequestInitChain.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestInitChain.
             * @implements IRequestInitChain
             * @constructor
             * @param {tendermint.abci.IRequestInitChain=} [p] Properties to set
             */
            function RequestInitChain(p) {
                this.validators = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestInitChain time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.time = null;

            /**
             * RequestInitChain chain_id.
             * @member {string} chain_id
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.chain_id = "";

            /**
             * RequestInitChain consensus_params.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.consensus_params = null;

            /**
             * RequestInitChain validators.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.validators = $util.emptyArray;

            /**
             * RequestInitChain app_state_bytes.
             * @member {Uint8Array} app_state_bytes
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.app_state_bytes = $util.newBuffer([]);

            /**
             * RequestInitChain initial_height.
             * @member {Long} initial_height
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.initial_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified RequestInitChain message. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.IRequestInitChain} m RequestInitChain message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInitChain.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.time != null && Object.hasOwnProperty.call(m, "time"))
                    $root.google.protobuf.Timestamp.encode(m.time, w.uint32(10).fork()).ldelim();
                if (m.chain_id != null && Object.hasOwnProperty.call(m, "chain_id"))
                    w.uint32(18).string(m.chain_id);
                if (m.consensus_params != null && Object.hasOwnProperty.call(m, "consensus_params"))
                    $root.tendermint.abci.ConsensusParams.encode(m.consensus_params, w.uint32(26).fork()).ldelim();
                if (m.validators != null && m.validators.length) {
                    for (var i = 0; i < m.validators.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(m.validators[i], w.uint32(34).fork()).ldelim();
                }
                if (m.app_state_bytes != null && Object.hasOwnProperty.call(m, "app_state_bytes"))
                    w.uint32(42).bytes(m.app_state_bytes);
                if (m.initial_height != null && Object.hasOwnProperty.call(m, "initial_height"))
                    w.uint32(48).int64(m.initial_height);
                return w;
            };

            /**
             * Decodes a RequestInitChain message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInitChain.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestInitChain();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        case 2:
                            m.chain_id = r.string();
                            break;
                        case 3:
                            m.consensus_params = $root.tendermint.abci.ConsensusParams.decode(r, r.uint32());
                            break;
                        case 4:
                            if (!(m.validators && m.validators.length))
                                m.validators = [];
                            m.validators.push($root.tendermint.abci.ValidatorUpdate.decode(r, r.uint32()));
                            break;
                        case 5:
                            m.app_state_bytes = r.bytes();
                            break;
                        case 6:
                            m.initial_height = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestInitChain;
        })();

        abci.RequestQuery = (function () {

            /**
             * Properties of a RequestQuery.
             * @memberof tendermint.abci
             * @interface IRequestQuery
             * @property {Uint8Array|null} [data] RequestQuery data
             * @property {string|null} [path] RequestQuery path
             * @property {Long|null} [height] RequestQuery height
             * @property {boolean|null} [prove] RequestQuery prove
             */

            /**
             * Constructs a new RequestQuery.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestQuery.
             * @implements IRequestQuery
             * @constructor
             * @param {tendermint.abci.IRequestQuery=} [p] Properties to set
             */
            function RequestQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestQuery data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.data = $util.newBuffer([]);

            /**
             * RequestQuery path.
             * @member {string} path
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.path = "";

            /**
             * RequestQuery height.
             * @member {Long} height
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * RequestQuery prove.
             * @member {boolean} prove
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.prove = false;

            /**
             * Encodes the specified RequestQuery message. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.IRequestQuery} m RequestQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(10).bytes(m.data);
                if (m.path != null && Object.hasOwnProperty.call(m, "path"))
                    w.uint32(18).string(m.path);
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(24).int64(m.height);
                if (m.prove != null && Object.hasOwnProperty.call(m, "prove"))
                    w.uint32(32).bool(m.prove);
                return w;
            };

            /**
             * Decodes a RequestQuery message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.data = r.bytes();
                            break;
                        case 2:
                            m.path = r.string();
                            break;
                        case 3:
                            m.height = r.int64();
                            break;
                        case 4:
                            m.prove = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestQuery;
        })();

        abci.RequestBeginBlock = (function () {

            /**
             * Properties of a RequestBeginBlock.
             * @memberof tendermint.abci
             * @interface IRequestBeginBlock
             * @property {Uint8Array|null} [hash] RequestBeginBlock hash
             * @property {tendermint.types.IHeader|null} [header] RequestBeginBlock header
             * @property {tendermint.abci.ILastCommitInfo|null} [last_commit_info] RequestBeginBlock last_commit_info
             * @property {Array.<tendermint.abci.IEvidence>|null} [byzantine_validators] RequestBeginBlock byzantine_validators
             */

            /**
             * Constructs a new RequestBeginBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestBeginBlock.
             * @implements IRequestBeginBlock
             * @constructor
             * @param {tendermint.abci.IRequestBeginBlock=} [p] Properties to set
             */
            function RequestBeginBlock(p) {
                this.byzantine_validators = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestBeginBlock hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.hash = $util.newBuffer([]);

            /**
             * RequestBeginBlock header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.header = null;

            /**
             * RequestBeginBlock last_commit_info.
             * @member {tendermint.abci.ILastCommitInfo|null|undefined} last_commit_info
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.last_commit_info = null;

            /**
             * RequestBeginBlock byzantine_validators.
             * @member {Array.<tendermint.abci.IEvidence>} byzantine_validators
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.byzantine_validators = $util.emptyArray;

            /**
             * Encodes the specified RequestBeginBlock message. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.IRequestBeginBlock} m RequestBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestBeginBlock.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(10).bytes(m.hash);
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.tendermint.types.Header.encode(m.header, w.uint32(18).fork()).ldelim();
                if (m.last_commit_info != null && Object.hasOwnProperty.call(m, "last_commit_info"))
                    $root.tendermint.abci.LastCommitInfo.encode(m.last_commit_info, w.uint32(26).fork()).ldelim();
                if (m.byzantine_validators != null && m.byzantine_validators.length) {
                    for (var i = 0; i < m.byzantine_validators.length; ++i)
                        $root.tendermint.abci.Evidence.encode(m.byzantine_validators[i], w.uint32(34).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a RequestBeginBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestBeginBlock.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestBeginBlock();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.hash = r.bytes();
                            break;
                        case 2:
                            m.header = $root.tendermint.types.Header.decode(r, r.uint32());
                            break;
                        case 3:
                            m.last_commit_info = $root.tendermint.abci.LastCommitInfo.decode(r, r.uint32());
                            break;
                        case 4:
                            if (!(m.byzantine_validators && m.byzantine_validators.length))
                                m.byzantine_validators = [];
                            m.byzantine_validators.push($root.tendermint.abci.Evidence.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestBeginBlock;
        })();

        /**
         * CheckTxType enum.
         * @name tendermint.abci.CheckTxType
         * @enum {number}
         * @property {number} NEW=0 NEW value
         * @property {number} RECHECK=1 RECHECK value
         */
        abci.CheckTxType = (function () {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NEW"] = 0;
            values[valuesById[1] = "RECHECK"] = 1;
            return values;
        })();

        abci.RequestCheckTx = (function () {

            /**
             * Properties of a RequestCheckTx.
             * @memberof tendermint.abci
             * @interface IRequestCheckTx
             * @property {Uint8Array|null} [tx] RequestCheckTx tx
             * @property {tendermint.abci.CheckTxType|null} [type] RequestCheckTx type
             */

            /**
             * Constructs a new RequestCheckTx.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestCheckTx.
             * @implements IRequestCheckTx
             * @constructor
             * @param {tendermint.abci.IRequestCheckTx=} [p] Properties to set
             */
            function RequestCheckTx(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestCheckTx tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             */
            RequestCheckTx.prototype.tx = $util.newBuffer([]);

            /**
             * RequestCheckTx type.
             * @member {tendermint.abci.CheckTxType} type
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             */
            RequestCheckTx.prototype.type = 0;

            /**
             * Encodes the specified RequestCheckTx message. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.IRequestCheckTx} m RequestCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCheckTx.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tx != null && Object.hasOwnProperty.call(m, "tx"))
                    w.uint32(10).bytes(m.tx);
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(16).int32(m.type);
                return w;
            };

            /**
             * Decodes a RequestCheckTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCheckTx.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestCheckTx();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.tx = r.bytes();
                            break;
                        case 2:
                            m.type = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestCheckTx;
        })();

        abci.RequestDeliverTx = (function () {

            /**
             * Properties of a RequestDeliverTx.
             * @memberof tendermint.abci
             * @interface IRequestDeliverTx
             * @property {Uint8Array|null} [tx] RequestDeliverTx tx
             */

            /**
             * Constructs a new RequestDeliverTx.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestDeliverTx.
             * @implements IRequestDeliverTx
             * @constructor
             * @param {tendermint.abci.IRequestDeliverTx=} [p] Properties to set
             */
            function RequestDeliverTx(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestDeliverTx tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.RequestDeliverTx
             * @instance
             */
            RequestDeliverTx.prototype.tx = $util.newBuffer([]);

            /**
             * Encodes the specified RequestDeliverTx message. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.IRequestDeliverTx} m RequestDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestDeliverTx.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tx != null && Object.hasOwnProperty.call(m, "tx"))
                    w.uint32(10).bytes(m.tx);
                return w;
            };

            /**
             * Decodes a RequestDeliverTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestDeliverTx.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestDeliverTx();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.tx = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestDeliverTx;
        })();

        abci.RequestEndBlock = (function () {

            /**
             * Properties of a RequestEndBlock.
             * @memberof tendermint.abci
             * @interface IRequestEndBlock
             * @property {Long|null} [height] RequestEndBlock height
             */

            /**
             * Constructs a new RequestEndBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestEndBlock.
             * @implements IRequestEndBlock
             * @constructor
             * @param {tendermint.abci.IRequestEndBlock=} [p] Properties to set
             */
            function RequestEndBlock(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestEndBlock height.
             * @member {Long} height
             * @memberof tendermint.abci.RequestEndBlock
             * @instance
             */
            RequestEndBlock.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified RequestEndBlock message. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.IRequestEndBlock} m RequestEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEndBlock.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(8).int64(m.height);
                return w;
            };

            /**
             * Decodes a RequestEndBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEndBlock.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestEndBlock();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.height = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestEndBlock;
        })();

        abci.RequestCommit = (function () {

            /**
             * Properties of a RequestCommit.
             * @memberof tendermint.abci
             * @interface IRequestCommit
             */

            /**
             * Constructs a new RequestCommit.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestCommit.
             * @implements IRequestCommit
             * @constructor
             * @param {tendermint.abci.IRequestCommit=} [p] Properties to set
             */
            function RequestCommit(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Encodes the specified RequestCommit message. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.IRequestCommit} m RequestCommit message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCommit.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                return w;
            };

            /**
             * Decodes a RequestCommit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCommit.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestCommit();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestCommit;
        })();

        abci.RequestListSnapshots = (function () {

            /**
             * Properties of a RequestListSnapshots.
             * @memberof tendermint.abci
             * @interface IRequestListSnapshots
             */

            /**
             * Constructs a new RequestListSnapshots.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestListSnapshots.
             * @implements IRequestListSnapshots
             * @constructor
             * @param {tendermint.abci.IRequestListSnapshots=} [p] Properties to set
             */
            function RequestListSnapshots(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Encodes the specified RequestListSnapshots message. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.IRequestListSnapshots} m RequestListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestListSnapshots.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                return w;
            };

            /**
             * Decodes a RequestListSnapshots message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestListSnapshots.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestListSnapshots();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestListSnapshots;
        })();

        abci.RequestOfferSnapshot = (function () {

            /**
             * Properties of a RequestOfferSnapshot.
             * @memberof tendermint.abci
             * @interface IRequestOfferSnapshot
             * @property {tendermint.abci.ISnapshot|null} [snapshot] RequestOfferSnapshot snapshot
             * @property {Uint8Array|null} [app_hash] RequestOfferSnapshot app_hash
             */

            /**
             * Constructs a new RequestOfferSnapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestOfferSnapshot.
             * @implements IRequestOfferSnapshot
             * @constructor
             * @param {tendermint.abci.IRequestOfferSnapshot=} [p] Properties to set
             */
            function RequestOfferSnapshot(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestOfferSnapshot snapshot.
             * @member {tendermint.abci.ISnapshot|null|undefined} snapshot
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             */
            RequestOfferSnapshot.prototype.snapshot = null;

            /**
             * RequestOfferSnapshot app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             */
            RequestOfferSnapshot.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified RequestOfferSnapshot message. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.IRequestOfferSnapshot} m RequestOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestOfferSnapshot.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.snapshot != null && Object.hasOwnProperty.call(m, "snapshot"))
                    $root.tendermint.abci.Snapshot.encode(m.snapshot, w.uint32(10).fork()).ldelim();
                if (m.app_hash != null && Object.hasOwnProperty.call(m, "app_hash"))
                    w.uint32(18).bytes(m.app_hash);
                return w;
            };

            /**
             * Decodes a RequestOfferSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestOfferSnapshot.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestOfferSnapshot();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.snapshot = $root.tendermint.abci.Snapshot.decode(r, r.uint32());
                            break;
                        case 2:
                            m.app_hash = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestOfferSnapshot;
        })();

        abci.RequestLoadSnapshotChunk = (function () {

            /**
             * Properties of a RequestLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @interface IRequestLoadSnapshotChunk
             * @property {Long|null} [height] RequestLoadSnapshotChunk height
             * @property {number|null} [format] RequestLoadSnapshotChunk format
             * @property {number|null} [chunk] RequestLoadSnapshotChunk chunk
             */

            /**
             * Constructs a new RequestLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestLoadSnapshotChunk.
             * @implements IRequestLoadSnapshotChunk
             * @constructor
             * @param {tendermint.abci.IRequestLoadSnapshotChunk=} [p] Properties to set
             */
            function RequestLoadSnapshotChunk(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestLoadSnapshotChunk height.
             * @member {Long} height
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * RequestLoadSnapshotChunk format.
             * @member {number} format
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.format = 0;

            /**
             * RequestLoadSnapshotChunk chunk.
             * @member {number} chunk
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.chunk = 0;

            /**
             * Encodes the specified RequestLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} m RequestLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestLoadSnapshotChunk.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(8).uint64(m.height);
                if (m.format != null && Object.hasOwnProperty.call(m, "format"))
                    w.uint32(16).uint32(m.format);
                if (m.chunk != null && Object.hasOwnProperty.call(m, "chunk"))
                    w.uint32(24).uint32(m.chunk);
                return w;
            };

            /**
             * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestLoadSnapshotChunk.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.height = r.uint64();
                            break;
                        case 2:
                            m.format = r.uint32();
                            break;
                        case 3:
                            m.chunk = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestLoadSnapshotChunk;
        })();

        abci.RequestApplySnapshotChunk = (function () {

            /**
             * Properties of a RequestApplySnapshotChunk.
             * @memberof tendermint.abci
             * @interface IRequestApplySnapshotChunk
             * @property {number|null} [index] RequestApplySnapshotChunk index
             * @property {Uint8Array|null} [chunk] RequestApplySnapshotChunk chunk
             * @property {string|null} [sender] RequestApplySnapshotChunk sender
             */

            /**
             * Constructs a new RequestApplySnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestApplySnapshotChunk.
             * @implements IRequestApplySnapshotChunk
             * @constructor
             * @param {tendermint.abci.IRequestApplySnapshotChunk=} [p] Properties to set
             */
            function RequestApplySnapshotChunk(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RequestApplySnapshotChunk index.
             * @member {number} index
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.index = 0;

            /**
             * RequestApplySnapshotChunk chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.chunk = $util.newBuffer([]);

            /**
             * RequestApplySnapshotChunk sender.
             * @member {string} sender
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.sender = "";

            /**
             * Encodes the specified RequestApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestApplySnapshotChunk} m RequestApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestApplySnapshotChunk.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                    w.uint32(8).uint32(m.index);
                if (m.chunk != null && Object.hasOwnProperty.call(m, "chunk"))
                    w.uint32(18).bytes(m.chunk);
                if (m.sender != null && Object.hasOwnProperty.call(m, "sender"))
                    w.uint32(26).string(m.sender);
                return w;
            };

            /**
             * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestApplySnapshotChunk.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.RequestApplySnapshotChunk();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.index = r.uint32();
                            break;
                        case 2:
                            m.chunk = r.bytes();
                            break;
                        case 3:
                            m.sender = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return RequestApplySnapshotChunk;
        })();

        abci.Response = (function () {

            /**
             * Properties of a Response.
             * @memberof tendermint.abci
             * @interface IResponse
             * @property {tendermint.abci.IResponseException|null} [exception] Response exception
             * @property {tendermint.abci.IResponseEcho|null} [echo] Response echo
             * @property {tendermint.abci.IResponseFlush|null} [flush] Response flush
             * @property {tendermint.abci.IResponseInfo|null} [info] Response info
             * @property {tendermint.abci.IResponseSetOption|null} [set_option] Response set_option
             * @property {tendermint.abci.IResponseInitChain|null} [init_chain] Response init_chain
             * @property {tendermint.abci.IResponseQuery|null} [query] Response query
             * @property {tendermint.abci.IResponseBeginBlock|null} [begin_block] Response begin_block
             * @property {tendermint.abci.IResponseCheckTx|null} [check_tx] Response check_tx
             * @property {tendermint.abci.IResponseDeliverTx|null} [deliver_tx] Response deliver_tx
             * @property {tendermint.abci.IResponseEndBlock|null} [end_block] Response end_block
             * @property {tendermint.abci.IResponseCommit|null} [commit] Response commit
             * @property {tendermint.abci.IResponseListSnapshots|null} [list_snapshots] Response list_snapshots
             * @property {tendermint.abci.IResponseOfferSnapshot|null} [offer_snapshot] Response offer_snapshot
             * @property {tendermint.abci.IResponseLoadSnapshotChunk|null} [load_snapshot_chunk] Response load_snapshot_chunk
             * @property {tendermint.abci.IResponseApplySnapshotChunk|null} [apply_snapshot_chunk] Response apply_snapshot_chunk
             */

            /**
             * Constructs a new Response.
             * @memberof tendermint.abci
             * @classdesc Represents a Response.
             * @implements IResponse
             * @constructor
             * @param {tendermint.abci.IResponse=} [p] Properties to set
             */
            function Response(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Response exception.
             * @member {tendermint.abci.IResponseException|null|undefined} exception
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.exception = null;

            /**
             * Response echo.
             * @member {tendermint.abci.IResponseEcho|null|undefined} echo
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.echo = null;

            /**
             * Response flush.
             * @member {tendermint.abci.IResponseFlush|null|undefined} flush
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.flush = null;

            /**
             * Response info.
             * @member {tendermint.abci.IResponseInfo|null|undefined} info
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.info = null;

            /**
             * Response set_option.
             * @member {tendermint.abci.IResponseSetOption|null|undefined} set_option
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.set_option = null;

            /**
             * Response init_chain.
             * @member {tendermint.abci.IResponseInitChain|null|undefined} init_chain
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.init_chain = null;

            /**
             * Response query.
             * @member {tendermint.abci.IResponseQuery|null|undefined} query
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.query = null;

            /**
             * Response begin_block.
             * @member {tendermint.abci.IResponseBeginBlock|null|undefined} begin_block
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.begin_block = null;

            /**
             * Response check_tx.
             * @member {tendermint.abci.IResponseCheckTx|null|undefined} check_tx
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.check_tx = null;

            /**
             * Response deliver_tx.
             * @member {tendermint.abci.IResponseDeliverTx|null|undefined} deliver_tx
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.deliver_tx = null;

            /**
             * Response end_block.
             * @member {tendermint.abci.IResponseEndBlock|null|undefined} end_block
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.end_block = null;

            /**
             * Response commit.
             * @member {tendermint.abci.IResponseCommit|null|undefined} commit
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.commit = null;

            /**
             * Response list_snapshots.
             * @member {tendermint.abci.IResponseListSnapshots|null|undefined} list_snapshots
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.list_snapshots = null;

            /**
             * Response offer_snapshot.
             * @member {tendermint.abci.IResponseOfferSnapshot|null|undefined} offer_snapshot
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.offer_snapshot = null;

            /**
             * Response load_snapshot_chunk.
             * @member {tendermint.abci.IResponseLoadSnapshotChunk|null|undefined} load_snapshot_chunk
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.load_snapshot_chunk = null;

            /**
             * Response apply_snapshot_chunk.
             * @member {tendermint.abci.IResponseApplySnapshotChunk|null|undefined} apply_snapshot_chunk
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.apply_snapshot_chunk = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Response value.
             * @member {"exception"|"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
             * @memberof tendermint.abci.Response
             * @instance
             */
            Object.defineProperty(Response.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["exception", "echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Response message. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.IResponse} m Response message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Response.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.exception != null && Object.hasOwnProperty.call(m, "exception"))
                    $root.tendermint.abci.ResponseException.encode(m.exception, w.uint32(10).fork()).ldelim();
                if (m.echo != null && Object.hasOwnProperty.call(m, "echo"))
                    $root.tendermint.abci.ResponseEcho.encode(m.echo, w.uint32(18).fork()).ldelim();
                if (m.flush != null && Object.hasOwnProperty.call(m, "flush"))
                    $root.tendermint.abci.ResponseFlush.encode(m.flush, w.uint32(26).fork()).ldelim();
                if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                    $root.tendermint.abci.ResponseInfo.encode(m.info, w.uint32(34).fork()).ldelim();
                if (m.set_option != null && Object.hasOwnProperty.call(m, "set_option"))
                    $root.tendermint.abci.ResponseSetOption.encode(m.set_option, w.uint32(42).fork()).ldelim();
                if (m.init_chain != null && Object.hasOwnProperty.call(m, "init_chain"))
                    $root.tendermint.abci.ResponseInitChain.encode(m.init_chain, w.uint32(50).fork()).ldelim();
                if (m.query != null && Object.hasOwnProperty.call(m, "query"))
                    $root.tendermint.abci.ResponseQuery.encode(m.query, w.uint32(58).fork()).ldelim();
                if (m.begin_block != null && Object.hasOwnProperty.call(m, "begin_block"))
                    $root.tendermint.abci.ResponseBeginBlock.encode(m.begin_block, w.uint32(66).fork()).ldelim();
                if (m.check_tx != null && Object.hasOwnProperty.call(m, "check_tx"))
                    $root.tendermint.abci.ResponseCheckTx.encode(m.check_tx, w.uint32(74).fork()).ldelim();
                if (m.deliver_tx != null && Object.hasOwnProperty.call(m, "deliver_tx"))
                    $root.tendermint.abci.ResponseDeliverTx.encode(m.deliver_tx, w.uint32(82).fork()).ldelim();
                if (m.end_block != null && Object.hasOwnProperty.call(m, "end_block"))
                    $root.tendermint.abci.ResponseEndBlock.encode(m.end_block, w.uint32(90).fork()).ldelim();
                if (m.commit != null && Object.hasOwnProperty.call(m, "commit"))
                    $root.tendermint.abci.ResponseCommit.encode(m.commit, w.uint32(98).fork()).ldelim();
                if (m.list_snapshots != null && Object.hasOwnProperty.call(m, "list_snapshots"))
                    $root.tendermint.abci.ResponseListSnapshots.encode(m.list_snapshots, w.uint32(106).fork()).ldelim();
                if (m.offer_snapshot != null && Object.hasOwnProperty.call(m, "offer_snapshot"))
                    $root.tendermint.abci.ResponseOfferSnapshot.encode(m.offer_snapshot, w.uint32(114).fork()).ldelim();
                if (m.load_snapshot_chunk != null && Object.hasOwnProperty.call(m, "load_snapshot_chunk"))
                    $root.tendermint.abci.ResponseLoadSnapshotChunk.encode(m.load_snapshot_chunk, w.uint32(122).fork()).ldelim();
                if (m.apply_snapshot_chunk != null && Object.hasOwnProperty.call(m, "apply_snapshot_chunk"))
                    $root.tendermint.abci.ResponseApplySnapshotChunk.encode(m.apply_snapshot_chunk, w.uint32(130).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Response message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Response.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.Response();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.exception = $root.tendermint.abci.ResponseException.decode(r, r.uint32());
                            break;
                        case 2:
                            m.echo = $root.tendermint.abci.ResponseEcho.decode(r, r.uint32());
                            break;
                        case 3:
                            m.flush = $root.tendermint.abci.ResponseFlush.decode(r, r.uint32());
                            break;
                        case 4:
                            m.info = $root.tendermint.abci.ResponseInfo.decode(r, r.uint32());
                            break;
                        case 5:
                            m.set_option = $root.tendermint.abci.ResponseSetOption.decode(r, r.uint32());
                            break;
                        case 6:
                            m.init_chain = $root.tendermint.abci.ResponseInitChain.decode(r, r.uint32());
                            break;
                        case 7:
                            m.query = $root.tendermint.abci.ResponseQuery.decode(r, r.uint32());
                            break;
                        case 8:
                            m.begin_block = $root.tendermint.abci.ResponseBeginBlock.decode(r, r.uint32());
                            break;
                        case 9:
                            m.check_tx = $root.tendermint.abci.ResponseCheckTx.decode(r, r.uint32());
                            break;
                        case 10:
                            m.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.decode(r, r.uint32());
                            break;
                        case 11:
                            m.end_block = $root.tendermint.abci.ResponseEndBlock.decode(r, r.uint32());
                            break;
                        case 12:
                            m.commit = $root.tendermint.abci.ResponseCommit.decode(r, r.uint32());
                            break;
                        case 13:
                            m.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.decode(r, r.uint32());
                            break;
                        case 14:
                            m.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.decode(r, r.uint32());
                            break;
                        case 15:
                            m.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.decode(r, r.uint32());
                            break;
                        case 16:
                            m.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Response;
        })();

        abci.ResponseException = (function () {

            /**
             * Properties of a ResponseException.
             * @memberof tendermint.abci
             * @interface IResponseException
             * @property {string|null} [error] ResponseException error
             */

            /**
             * Constructs a new ResponseException.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseException.
             * @implements IResponseException
             * @constructor
             * @param {tendermint.abci.IResponseException=} [p] Properties to set
             */
            function ResponseException(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseException error.
             * @member {string} error
             * @memberof tendermint.abci.ResponseException
             * @instance
             */
            ResponseException.prototype.error = "";

            /**
             * Encodes the specified ResponseException message. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.IResponseException} m ResponseException message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseException.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                    w.uint32(10).string(m.error);
                return w;
            };

            /**
             * Decodes a ResponseException message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseException} ResponseException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseException.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseException();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.error = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseException;
        })();

        abci.ResponseEcho = (function () {

            /**
             * Properties of a ResponseEcho.
             * @memberof tendermint.abci
             * @interface IResponseEcho
             * @property {string|null} [message] ResponseEcho message
             */

            /**
             * Constructs a new ResponseEcho.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseEcho.
             * @implements IResponseEcho
             * @constructor
             * @param {tendermint.abci.IResponseEcho=} [p] Properties to set
             */
            function ResponseEcho(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseEcho message.
             * @member {string} message
             * @memberof tendermint.abci.ResponseEcho
             * @instance
             */
            ResponseEcho.prototype.message = "";

            /**
             * Encodes the specified ResponseEcho message. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.IResponseEcho} m ResponseEcho message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEcho.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                    w.uint32(10).string(m.message);
                return w;
            };

            /**
             * Decodes a ResponseEcho message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEcho.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseEcho();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.message = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseEcho;
        })();

        abci.ResponseFlush = (function () {

            /**
             * Properties of a ResponseFlush.
             * @memberof tendermint.abci
             * @interface IResponseFlush
             */

            /**
             * Constructs a new ResponseFlush.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseFlush.
             * @implements IResponseFlush
             * @constructor
             * @param {tendermint.abci.IResponseFlush=} [p] Properties to set
             */
            function ResponseFlush(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Encodes the specified ResponseFlush message. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.IResponseFlush} m ResponseFlush message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseFlush.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                return w;
            };

            /**
             * Decodes a ResponseFlush message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseFlush.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseFlush();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseFlush;
        })();

        abci.ResponseInfo = (function () {

            /**
             * Properties of a ResponseInfo.
             * @memberof tendermint.abci
             * @interface IResponseInfo
             * @property {string|null} [data] ResponseInfo data
             * @property {string|null} [version] ResponseInfo version
             * @property {Long|null} [app_version] ResponseInfo app_version
             * @property {Long|null} [last_block_height] ResponseInfo last_block_height
             * @property {Uint8Array|null} [last_block_app_hash] ResponseInfo last_block_app_hash
             */

            /**
             * Constructs a new ResponseInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseInfo.
             * @implements IResponseInfo
             * @constructor
             * @param {tendermint.abci.IResponseInfo=} [p] Properties to set
             */
            function ResponseInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseInfo data.
             * @member {string} data
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.data = "";

            /**
             * ResponseInfo version.
             * @member {string} version
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.version = "";

            /**
             * ResponseInfo app_version.
             * @member {Long} app_version
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.app_version = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * ResponseInfo last_block_height.
             * @member {Long} last_block_height
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.last_block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseInfo last_block_app_hash.
             * @member {Uint8Array} last_block_app_hash
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.last_block_app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseInfo message. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.IResponseInfo} m ResponseInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(10).string(m.data);
                if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                    w.uint32(18).string(m.version);
                if (m.app_version != null && Object.hasOwnProperty.call(m, "app_version"))
                    w.uint32(24).uint64(m.app_version);
                if (m.last_block_height != null && Object.hasOwnProperty.call(m, "last_block_height"))
                    w.uint32(32).int64(m.last_block_height);
                if (m.last_block_app_hash != null && Object.hasOwnProperty.call(m, "last_block_app_hash"))
                    w.uint32(42).bytes(m.last_block_app_hash);
                return w;
            };

            /**
             * Decodes a ResponseInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.data = r.string();
                            break;
                        case 2:
                            m.version = r.string();
                            break;
                        case 3:
                            m.app_version = r.uint64();
                            break;
                        case 4:
                            m.last_block_height = r.int64();
                            break;
                        case 5:
                            m.last_block_app_hash = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseInfo;
        })();

        abci.ResponseSetOption = (function () {

            /**
             * Properties of a ResponseSetOption.
             * @memberof tendermint.abci
             * @interface IResponseSetOption
             * @property {number|null} [code] ResponseSetOption code
             * @property {string|null} [log] ResponseSetOption log
             * @property {string|null} [info] ResponseSetOption info
             */

            /**
             * Constructs a new ResponseSetOption.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseSetOption.
             * @implements IResponseSetOption
             * @constructor
             * @param {tendermint.abci.IResponseSetOption=} [p] Properties to set
             */
            function ResponseSetOption(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseSetOption code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.code = 0;

            /**
             * ResponseSetOption log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.log = "";

            /**
             * ResponseSetOption info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.info = "";

            /**
             * Encodes the specified ResponseSetOption message. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.IResponseSetOption} m ResponseSetOption message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseSetOption.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.code != null && Object.hasOwnProperty.call(m, "code"))
                    w.uint32(8).uint32(m.code);
                if (m.log != null && Object.hasOwnProperty.call(m, "log"))
                    w.uint32(26).string(m.log);
                if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                    w.uint32(34).string(m.info);
                return w;
            };

            /**
             * Decodes a ResponseSetOption message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseSetOption.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseSetOption();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.code = r.uint32();
                            break;
                        case 3:
                            m.log = r.string();
                            break;
                        case 4:
                            m.info = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseSetOption;
        })();

        abci.ResponseInitChain = (function () {

            /**
             * Properties of a ResponseInitChain.
             * @memberof tendermint.abci
             * @interface IResponseInitChain
             * @property {tendermint.abci.IConsensusParams|null} [consensus_params] ResponseInitChain consensus_params
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] ResponseInitChain validators
             * @property {Uint8Array|null} [app_hash] ResponseInitChain app_hash
             */

            /**
             * Constructs a new ResponseInitChain.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseInitChain.
             * @implements IResponseInitChain
             * @constructor
             * @param {tendermint.abci.IResponseInitChain=} [p] Properties to set
             */
            function ResponseInitChain(p) {
                this.validators = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseInitChain consensus_params.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.consensus_params = null;

            /**
             * ResponseInitChain validators.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.validators = $util.emptyArray;

            /**
             * ResponseInitChain app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseInitChain message. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.IResponseInitChain} m ResponseInitChain message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInitChain.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.consensus_params != null && Object.hasOwnProperty.call(m, "consensus_params"))
                    $root.tendermint.abci.ConsensusParams.encode(m.consensus_params, w.uint32(10).fork()).ldelim();
                if (m.validators != null && m.validators.length) {
                    for (var i = 0; i < m.validators.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(m.validators[i], w.uint32(18).fork()).ldelim();
                }
                if (m.app_hash != null && Object.hasOwnProperty.call(m, "app_hash"))
                    w.uint32(26).bytes(m.app_hash);
                return w;
            };

            /**
             * Decodes a ResponseInitChain message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInitChain.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseInitChain();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.consensus_params = $root.tendermint.abci.ConsensusParams.decode(r, r.uint32());
                            break;
                        case 2:
                            if (!(m.validators && m.validators.length))
                                m.validators = [];
                            m.validators.push($root.tendermint.abci.ValidatorUpdate.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.app_hash = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseInitChain;
        })();

        abci.ResponseQuery = (function () {

            /**
             * Properties of a ResponseQuery.
             * @memberof tendermint.abci
             * @interface IResponseQuery
             * @property {number|null} [code] ResponseQuery code
             * @property {string|null} [log] ResponseQuery log
             * @property {string|null} [info] ResponseQuery info
             * @property {Long|null} [index] ResponseQuery index
             * @property {Uint8Array|null} [key] ResponseQuery key
             * @property {Uint8Array|null} [value] ResponseQuery value
             * @property {tendermint.crypto.IProofOps|null} [proof_ops] ResponseQuery proof_ops
             * @property {Long|null} [height] ResponseQuery height
             * @property {string|null} [codespace] ResponseQuery codespace
             */

            /**
             * Constructs a new ResponseQuery.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseQuery.
             * @implements IResponseQuery
             * @constructor
             * @param {tendermint.abci.IResponseQuery=} [p] Properties to set
             */
            function ResponseQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseQuery code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.code = 0;

            /**
             * ResponseQuery log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.log = "";

            /**
             * ResponseQuery info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.info = "";

            /**
             * ResponseQuery index.
             * @member {Long} index
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.index = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseQuery key.
             * @member {Uint8Array} key
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.key = $util.newBuffer([]);

            /**
             * ResponseQuery value.
             * @member {Uint8Array} value
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.value = $util.newBuffer([]);

            /**
             * ResponseQuery proof_ops.
             * @member {tendermint.crypto.IProofOps|null|undefined} proof_ops
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.proof_ops = null;

            /**
             * ResponseQuery height.
             * @member {Long} height
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseQuery codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.codespace = "";

            /**
             * Encodes the specified ResponseQuery message. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.IResponseQuery} m ResponseQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.code != null && Object.hasOwnProperty.call(m, "code"))
                    w.uint32(8).uint32(m.code);
                if (m.log != null && Object.hasOwnProperty.call(m, "log"))
                    w.uint32(26).string(m.log);
                if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                    w.uint32(34).string(m.info);
                if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                    w.uint32(40).int64(m.index);
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    w.uint32(50).bytes(m.key);
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(58).bytes(m.value);
                if (m.proof_ops != null && Object.hasOwnProperty.call(m, "proof_ops"))
                    $root.tendermint.crypto.ProofOps.encode(m.proof_ops, w.uint32(66).fork()).ldelim();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(72).int64(m.height);
                if (m.codespace != null && Object.hasOwnProperty.call(m, "codespace"))
                    w.uint32(82).string(m.codespace);
                return w;
            };

            /**
             * Decodes a ResponseQuery message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.code = r.uint32();
                            break;
                        case 3:
                            m.log = r.string();
                            break;
                        case 4:
                            m.info = r.string();
                            break;
                        case 5:
                            m.index = r.int64();
                            break;
                        case 6:
                            m.key = r.bytes();
                            break;
                        case 7:
                            m.value = r.bytes();
                            break;
                        case 8:
                            m.proof_ops = $root.tendermint.crypto.ProofOps.decode(r, r.uint32());
                            break;
                        case 9:
                            m.height = r.int64();
                            break;
                        case 10:
                            m.codespace = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseQuery;
        })();

        abci.ResponseBeginBlock = (function () {

            /**
             * Properties of a ResponseBeginBlock.
             * @memberof tendermint.abci
             * @interface IResponseBeginBlock
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseBeginBlock events
             */

            /**
             * Constructs a new ResponseBeginBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseBeginBlock.
             * @implements IResponseBeginBlock
             * @constructor
             * @param {tendermint.abci.IResponseBeginBlock=} [p] Properties to set
             */
            function ResponseBeginBlock(p) {
                this.events = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseBeginBlock events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseBeginBlock
             * @instance
             */
            ResponseBeginBlock.prototype.events = $util.emptyArray;

            /**
             * Encodes the specified ResponseBeginBlock message. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.IResponseBeginBlock} m ResponseBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseBeginBlock.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.events != null && m.events.length) {
                    for (var i = 0; i < m.events.length; ++i)
                        $root.tendermint.abci.Event.encode(m.events[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ResponseBeginBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseBeginBlock.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseBeginBlock();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.events && m.events.length))
                                m.events = [];
                            m.events.push($root.tendermint.abci.Event.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseBeginBlock;
        })();

        abci.ResponseCheckTx = (function () {

            /**
             * Properties of a ResponseCheckTx.
             * @memberof tendermint.abci
             * @interface IResponseCheckTx
             * @property {number|null} [code] ResponseCheckTx code
             * @property {Uint8Array|null} [data] ResponseCheckTx data
             * @property {string|null} [log] ResponseCheckTx log
             * @property {string|null} [info] ResponseCheckTx info
             * @property {Long|null} [gas_wanted] ResponseCheckTx gas_wanted
             * @property {Long|null} [gas_used] ResponseCheckTx gas_used
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseCheckTx events
             * @property {string|null} [codespace] ResponseCheckTx codespace
             */

            /**
             * Constructs a new ResponseCheckTx.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseCheckTx.
             * @implements IResponseCheckTx
             * @constructor
             * @param {tendermint.abci.IResponseCheckTx=} [p] Properties to set
             */
            function ResponseCheckTx(p) {
                this.events = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseCheckTx code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.code = 0;

            /**
             * ResponseCheckTx data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.data = $util.newBuffer([]);

            /**
             * ResponseCheckTx log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.log = "";

            /**
             * ResponseCheckTx info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.info = "";

            /**
             * ResponseCheckTx gas_wanted.
             * @member {Long} gas_wanted
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseCheckTx gas_used.
             * @member {Long} gas_used
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseCheckTx events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.events = $util.emptyArray;

            /**
             * ResponseCheckTx codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.codespace = "";

            /**
             * Encodes the specified ResponseCheckTx message. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.IResponseCheckTx} m ResponseCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCheckTx.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.code != null && Object.hasOwnProperty.call(m, "code"))
                    w.uint32(8).uint32(m.code);
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(18).bytes(m.data);
                if (m.log != null && Object.hasOwnProperty.call(m, "log"))
                    w.uint32(26).string(m.log);
                if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                    w.uint32(34).string(m.info);
                if (m.gas_wanted != null && Object.hasOwnProperty.call(m, "gas_wanted"))
                    w.uint32(40).int64(m.gas_wanted);
                if (m.gas_used != null && Object.hasOwnProperty.call(m, "gas_used"))
                    w.uint32(48).int64(m.gas_used);
                if (m.events != null && m.events.length) {
                    for (var i = 0; i < m.events.length; ++i)
                        $root.tendermint.abci.Event.encode(m.events[i], w.uint32(58).fork()).ldelim();
                }
                if (m.codespace != null && Object.hasOwnProperty.call(m, "codespace"))
                    w.uint32(66).string(m.codespace);
                return w;
            };

            /**
             * Decodes a ResponseCheckTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCheckTx.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseCheckTx();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.code = r.uint32();
                            break;
                        case 2:
                            m.data = r.bytes();
                            break;
                        case 3:
                            m.log = r.string();
                            break;
                        case 4:
                            m.info = r.string();
                            break;
                        case 5:
                            m.gas_wanted = r.int64();
                            break;
                        case 6:
                            m.gas_used = r.int64();
                            break;
                        case 7:
                            if (!(m.events && m.events.length))
                                m.events = [];
                            m.events.push($root.tendermint.abci.Event.decode(r, r.uint32()));
                            break;
                        case 8:
                            m.codespace = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseCheckTx;
        })();

        abci.ResponseDeliverTx = (function () {

            /**
             * Properties of a ResponseDeliverTx.
             * @memberof tendermint.abci
             * @interface IResponseDeliverTx
             * @property {number|null} [code] ResponseDeliverTx code
             * @property {Uint8Array|null} [data] ResponseDeliverTx data
             * @property {string|null} [log] ResponseDeliverTx log
             * @property {string|null} [info] ResponseDeliverTx info
             * @property {Long|null} [gas_wanted] ResponseDeliverTx gas_wanted
             * @property {Long|null} [gas_used] ResponseDeliverTx gas_used
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseDeliverTx events
             * @property {string|null} [codespace] ResponseDeliverTx codespace
             */

            /**
             * Constructs a new ResponseDeliverTx.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseDeliverTx.
             * @implements IResponseDeliverTx
             * @constructor
             * @param {tendermint.abci.IResponseDeliverTx=} [p] Properties to set
             */
            function ResponseDeliverTx(p) {
                this.events = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseDeliverTx code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.code = 0;

            /**
             * ResponseDeliverTx data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.data = $util.newBuffer([]);

            /**
             * ResponseDeliverTx log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.log = "";

            /**
             * ResponseDeliverTx info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.info = "";

            /**
             * ResponseDeliverTx gas_wanted.
             * @member {Long} gas_wanted
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseDeliverTx gas_used.
             * @member {Long} gas_used
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * ResponseDeliverTx events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.events = $util.emptyArray;

            /**
             * ResponseDeliverTx codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.codespace = "";

            /**
             * Encodes the specified ResponseDeliverTx message. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.IResponseDeliverTx} m ResponseDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseDeliverTx.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.code != null && Object.hasOwnProperty.call(m, "code"))
                    w.uint32(8).uint32(m.code);
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(18).bytes(m.data);
                if (m.log != null && Object.hasOwnProperty.call(m, "log"))
                    w.uint32(26).string(m.log);
                if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                    w.uint32(34).string(m.info);
                if (m.gas_wanted != null && Object.hasOwnProperty.call(m, "gas_wanted"))
                    w.uint32(40).int64(m.gas_wanted);
                if (m.gas_used != null && Object.hasOwnProperty.call(m, "gas_used"))
                    w.uint32(48).int64(m.gas_used);
                if (m.events != null && m.events.length) {
                    for (var i = 0; i < m.events.length; ++i)
                        $root.tendermint.abci.Event.encode(m.events[i], w.uint32(58).fork()).ldelim();
                }
                if (m.codespace != null && Object.hasOwnProperty.call(m, "codespace"))
                    w.uint32(66).string(m.codespace);
                return w;
            };

            /**
             * Decodes a ResponseDeliverTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseDeliverTx.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseDeliverTx();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.code = r.uint32();
                            break;
                        case 2:
                            m.data = r.bytes();
                            break;
                        case 3:
                            m.log = r.string();
                            break;
                        case 4:
                            m.info = r.string();
                            break;
                        case 5:
                            m.gas_wanted = r.int64();
                            break;
                        case 6:
                            m.gas_used = r.int64();
                            break;
                        case 7:
                            if (!(m.events && m.events.length))
                                m.events = [];
                            m.events.push($root.tendermint.abci.Event.decode(r, r.uint32()));
                            break;
                        case 8:
                            m.codespace = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseDeliverTx;
        })();

        abci.ResponseEndBlock = (function () {

            /**
             * Properties of a ResponseEndBlock.
             * @memberof tendermint.abci
             * @interface IResponseEndBlock
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validator_updates] ResponseEndBlock validator_updates
             * @property {tendermint.abci.IConsensusParams|null} [consensus_param_updates] ResponseEndBlock consensus_param_updates
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseEndBlock events
             */

            /**
             * Constructs a new ResponseEndBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseEndBlock.
             * @implements IResponseEndBlock
             * @constructor
             * @param {tendermint.abci.IResponseEndBlock=} [p] Properties to set
             */
            function ResponseEndBlock(p) {
                this.validator_updates = [];
                this.events = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseEndBlock validator_updates.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validator_updates
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.validator_updates = $util.emptyArray;

            /**
             * ResponseEndBlock consensus_param_updates.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_param_updates
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.consensus_param_updates = null;

            /**
             * ResponseEndBlock events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.events = $util.emptyArray;

            /**
             * Encodes the specified ResponseEndBlock message. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.IResponseEndBlock} m ResponseEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEndBlock.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.validator_updates != null && m.validator_updates.length) {
                    for (var i = 0; i < m.validator_updates.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(m.validator_updates[i], w.uint32(10).fork()).ldelim();
                }
                if (m.consensus_param_updates != null && Object.hasOwnProperty.call(m, "consensus_param_updates"))
                    $root.tendermint.abci.ConsensusParams.encode(m.consensus_param_updates, w.uint32(18).fork()).ldelim();
                if (m.events != null && m.events.length) {
                    for (var i = 0; i < m.events.length; ++i)
                        $root.tendermint.abci.Event.encode(m.events[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ResponseEndBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEndBlock.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseEndBlock();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.validator_updates && m.validator_updates.length))
                                m.validator_updates = [];
                            m.validator_updates.push($root.tendermint.abci.ValidatorUpdate.decode(r, r.uint32()));
                            break;
                        case 2:
                            m.consensus_param_updates = $root.tendermint.abci.ConsensusParams.decode(r, r.uint32());
                            break;
                        case 3:
                            if (!(m.events && m.events.length))
                                m.events = [];
                            m.events.push($root.tendermint.abci.Event.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseEndBlock;
        })();

        abci.ResponseCommit = (function () {

            /**
             * Properties of a ResponseCommit.
             * @memberof tendermint.abci
             * @interface IResponseCommit
             * @property {Uint8Array|null} [data] ResponseCommit data
             * @property {Long|null} [retain_height] ResponseCommit retain_height
             */

            /**
             * Constructs a new ResponseCommit.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseCommit.
             * @implements IResponseCommit
             * @constructor
             * @param {tendermint.abci.IResponseCommit=} [p] Properties to set
             */
            function ResponseCommit(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseCommit data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             */
            ResponseCommit.prototype.data = $util.newBuffer([]);

            /**
             * ResponseCommit retain_height.
             * @member {Long} retain_height
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             */
            ResponseCommit.prototype.retain_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified ResponseCommit message. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.IResponseCommit} m ResponseCommit message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCommit.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(18).bytes(m.data);
                if (m.retain_height != null && Object.hasOwnProperty.call(m, "retain_height"))
                    w.uint32(24).int64(m.retain_height);
                return w;
            };

            /**
             * Decodes a ResponseCommit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCommit.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseCommit();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 2:
                            m.data = r.bytes();
                            break;
                        case 3:
                            m.retain_height = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseCommit;
        })();

        abci.ResponseListSnapshots = (function () {

            /**
             * Properties of a ResponseListSnapshots.
             * @memberof tendermint.abci
             * @interface IResponseListSnapshots
             * @property {Array.<tendermint.abci.ISnapshot>|null} [snapshots] ResponseListSnapshots snapshots
             */

            /**
             * Constructs a new ResponseListSnapshots.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseListSnapshots.
             * @implements IResponseListSnapshots
             * @constructor
             * @param {tendermint.abci.IResponseListSnapshots=} [p] Properties to set
             */
            function ResponseListSnapshots(p) {
                this.snapshots = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseListSnapshots snapshots.
             * @member {Array.<tendermint.abci.ISnapshot>} snapshots
             * @memberof tendermint.abci.ResponseListSnapshots
             * @instance
             */
            ResponseListSnapshots.prototype.snapshots = $util.emptyArray;

            /**
             * Encodes the specified ResponseListSnapshots message. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.IResponseListSnapshots} m ResponseListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseListSnapshots.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.snapshots != null && m.snapshots.length) {
                    for (var i = 0; i < m.snapshots.length; ++i)
                        $root.tendermint.abci.Snapshot.encode(m.snapshots[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ResponseListSnapshots message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseListSnapshots.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseListSnapshots();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.snapshots && m.snapshots.length))
                                m.snapshots = [];
                            m.snapshots.push($root.tendermint.abci.Snapshot.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseListSnapshots;
        })();

        abci.ResponseOfferSnapshot = (function () {

            /**
             * Properties of a ResponseOfferSnapshot.
             * @memberof tendermint.abci
             * @interface IResponseOfferSnapshot
             * @property {tendermint.abci.ResponseOfferSnapshot.Result|null} [result] ResponseOfferSnapshot result
             */

            /**
             * Constructs a new ResponseOfferSnapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseOfferSnapshot.
             * @implements IResponseOfferSnapshot
             * @constructor
             * @param {tendermint.abci.IResponseOfferSnapshot=} [p] Properties to set
             */
            function ResponseOfferSnapshot(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseOfferSnapshot result.
             * @member {tendermint.abci.ResponseOfferSnapshot.Result} result
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @instance
             */
            ResponseOfferSnapshot.prototype.result = 0;

            /**
             * Encodes the specified ResponseOfferSnapshot message. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.IResponseOfferSnapshot} m ResponseOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseOfferSnapshot.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                    w.uint32(8).int32(m.result);
                return w;
            };

            /**
             * Decodes a ResponseOfferSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseOfferSnapshot.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseOfferSnapshot();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.result = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            /**
             * Result enum.
             * @name tendermint.abci.ResponseOfferSnapshot.Result
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ACCEPT=1 ACCEPT value
             * @property {number} ABORT=2 ABORT value
             * @property {number} REJECT=3 REJECT value
             * @property {number} REJECT_FORMAT=4 REJECT_FORMAT value
             * @property {number} REJECT_SENDER=5 REJECT_SENDER value
             */
            ResponseOfferSnapshot.Result = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ACCEPT"] = 1;
                values[valuesById[2] = "ABORT"] = 2;
                values[valuesById[3] = "REJECT"] = 3;
                values[valuesById[4] = "REJECT_FORMAT"] = 4;
                values[valuesById[5] = "REJECT_SENDER"] = 5;
                return values;
            })();

            return ResponseOfferSnapshot;
        })();

        abci.ResponseLoadSnapshotChunk = (function () {

            /**
             * Properties of a ResponseLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @interface IResponseLoadSnapshotChunk
             * @property {Uint8Array|null} [chunk] ResponseLoadSnapshotChunk chunk
             */

            /**
             * Constructs a new ResponseLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseLoadSnapshotChunk.
             * @implements IResponseLoadSnapshotChunk
             * @constructor
             * @param {tendermint.abci.IResponseLoadSnapshotChunk=} [p] Properties to set
             */
            function ResponseLoadSnapshotChunk(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseLoadSnapshotChunk chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @instance
             */
            ResponseLoadSnapshotChunk.prototype.chunk = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseLoadSnapshotChunk} m ResponseLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseLoadSnapshotChunk.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.chunk != null && Object.hasOwnProperty.call(m, "chunk"))
                    w.uint32(10).bytes(m.chunk);
                return w;
            };

            /**
             * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseLoadSnapshotChunk.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.chunk = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ResponseLoadSnapshotChunk;
        })();

        abci.ResponseApplySnapshotChunk = (function () {

            /**
             * Properties of a ResponseApplySnapshotChunk.
             * @memberof tendermint.abci
             * @interface IResponseApplySnapshotChunk
             * @property {tendermint.abci.ResponseApplySnapshotChunk.Result|null} [result] ResponseApplySnapshotChunk result
             * @property {Array.<number>|null} [refetch_chunks] ResponseApplySnapshotChunk refetch_chunks
             * @property {Array.<string>|null} [reject_senders] ResponseApplySnapshotChunk reject_senders
             */

            /**
             * Constructs a new ResponseApplySnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseApplySnapshotChunk.
             * @implements IResponseApplySnapshotChunk
             * @constructor
             * @param {tendermint.abci.IResponseApplySnapshotChunk=} [p] Properties to set
             */
            function ResponseApplySnapshotChunk(p) {
                this.refetch_chunks = [];
                this.reject_senders = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseApplySnapshotChunk result.
             * @member {tendermint.abci.ResponseApplySnapshotChunk.Result} result
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.result = 0;

            /**
             * ResponseApplySnapshotChunk refetch_chunks.
             * @member {Array.<number>} refetch_chunks
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.refetch_chunks = $util.emptyArray;

            /**
             * ResponseApplySnapshotChunk reject_senders.
             * @member {Array.<string>} reject_senders
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.reject_senders = $util.emptyArray;

            /**
             * Encodes the specified ResponseApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseApplySnapshotChunk} m ResponseApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseApplySnapshotChunk.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                    w.uint32(8).int32(m.result);
                if (m.refetch_chunks != null && m.refetch_chunks.length) {
                    w.uint32(18).fork();
                    for (var i = 0; i < m.refetch_chunks.length; ++i)
                        w.uint32(m.refetch_chunks[i]);
                    w.ldelim();
                }
                if (m.reject_senders != null && m.reject_senders.length) {
                    for (var i = 0; i < m.reject_senders.length; ++i)
                        w.uint32(26).string(m.reject_senders[i]);
                }
                return w;
            };

            /**
             * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseApplySnapshotChunk.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.result = r.int32();
                            break;
                        case 2:
                            if (!(m.refetch_chunks && m.refetch_chunks.length))
                                m.refetch_chunks = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2)
                                    m.refetch_chunks.push(r.uint32());
                            } else
                                m.refetch_chunks.push(r.uint32());
                            break;
                        case 3:
                            if (!(m.reject_senders && m.reject_senders.length))
                                m.reject_senders = [];
                            m.reject_senders.push(r.string());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            /**
             * Result enum.
             * @name tendermint.abci.ResponseApplySnapshotChunk.Result
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ACCEPT=1 ACCEPT value
             * @property {number} ABORT=2 ABORT value
             * @property {number} RETRY=3 RETRY value
             * @property {number} RETRY_SNAPSHOT=4 RETRY_SNAPSHOT value
             * @property {number} REJECT_SNAPSHOT=5 REJECT_SNAPSHOT value
             */
            ResponseApplySnapshotChunk.Result = (function () {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ACCEPT"] = 1;
                values[valuesById[2] = "ABORT"] = 2;
                values[valuesById[3] = "RETRY"] = 3;
                values[valuesById[4] = "RETRY_SNAPSHOT"] = 4;
                values[valuesById[5] = "REJECT_SNAPSHOT"] = 5;
                return values;
            })();

            return ResponseApplySnapshotChunk;
        })();

        abci.ConsensusParams = (function () {

            /**
             * Properties of a ConsensusParams.
             * @memberof tendermint.abci
             * @interface IConsensusParams
             * @property {tendermint.abci.IBlockParams|null} [block] ConsensusParams block
             * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
             * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
             * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
             */

            /**
             * Constructs a new ConsensusParams.
             * @memberof tendermint.abci
             * @classdesc Represents a ConsensusParams.
             * @implements IConsensusParams
             * @constructor
             * @param {tendermint.abci.IConsensusParams=} [p] Properties to set
             */
            function ConsensusParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusParams block.
             * @member {tendermint.abci.IBlockParams|null|undefined} block
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.block = null;

            /**
             * ConsensusParams evidence.
             * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.evidence = null;

            /**
             * ConsensusParams validator.
             * @member {tendermint.types.IValidatorParams|null|undefined} validator
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.validator = null;

            /**
             * ConsensusParams version.
             * @member {tendermint.types.IVersionParams|null|undefined} version
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.version = null;

            /**
             * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.IConsensusParams} m ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.block != null && Object.hasOwnProperty.call(m, "block"))
                    $root.tendermint.abci.BlockParams.encode(m.block, w.uint32(10).fork()).ldelim();
                if (m.evidence != null && Object.hasOwnProperty.call(m, "evidence"))
                    $root.tendermint.types.EvidenceParams.encode(m.evidence, w.uint32(18).fork()).ldelim();
                if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                    $root.tendermint.types.ValidatorParams.encode(m.validator, w.uint32(26).fork()).ldelim();
                if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                    $root.tendermint.types.VersionParams.encode(m.version, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ConsensusParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.block = $root.tendermint.abci.BlockParams.decode(r, r.uint32());
                            break;
                        case 2:
                            m.evidence = $root.tendermint.types.EvidenceParams.decode(r, r.uint32());
                            break;
                        case 3:
                            m.validator = $root.tendermint.types.ValidatorParams.decode(r, r.uint32());
                            break;
                        case 4:
                            m.version = $root.tendermint.types.VersionParams.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ConsensusParams;
        })();

        abci.BlockParams = (function () {

            /**
             * Properties of a BlockParams.
             * @memberof tendermint.abci
             * @interface IBlockParams
             * @property {Long|null} [max_bytes] BlockParams max_bytes
             * @property {Long|null} [max_gas] BlockParams max_gas
             */

            /**
             * Constructs a new BlockParams.
             * @memberof tendermint.abci
             * @classdesc Represents a BlockParams.
             * @implements IBlockParams
             * @constructor
             * @param {tendermint.abci.IBlockParams=} [p] Properties to set
             */
            function BlockParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * BlockParams max_bytes.
             * @member {Long} max_bytes
             * @memberof tendermint.abci.BlockParams
             * @instance
             */
            BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * BlockParams max_gas.
             * @member {Long} max_gas
             * @memberof tendermint.abci.BlockParams
             * @instance
             */
            BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.IBlockParams} m BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.max_bytes != null && Object.hasOwnProperty.call(m, "max_bytes"))
                    w.uint32(8).int64(m.max_bytes);
                if (m.max_gas != null && Object.hasOwnProperty.call(m, "max_gas"))
                    w.uint32(16).int64(m.max_gas);
                return w;
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.BlockParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.max_bytes = r.int64();
                            break;
                        case 2:
                            m.max_gas = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return BlockParams;
        })();

        abci.LastCommitInfo = (function () {

            /**
             * Properties of a LastCommitInfo.
             * @memberof tendermint.abci
             * @interface ILastCommitInfo
             * @property {number|null} [round] LastCommitInfo round
             * @property {Array.<tendermint.abci.IVoteInfo>|null} [votes] LastCommitInfo votes
             */

            /**
             * Constructs a new LastCommitInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a LastCommitInfo.
             * @implements ILastCommitInfo
             * @constructor
             * @param {tendermint.abci.ILastCommitInfo=} [p] Properties to set
             */
            function LastCommitInfo(p) {
                this.votes = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * LastCommitInfo round.
             * @member {number} round
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             */
            LastCommitInfo.prototype.round = 0;

            /**
             * LastCommitInfo votes.
             * @member {Array.<tendermint.abci.IVoteInfo>} votes
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             */
            LastCommitInfo.prototype.votes = $util.emptyArray;

            /**
             * Encodes the specified LastCommitInfo message. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.ILastCommitInfo} m LastCommitInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastCommitInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.round != null && Object.hasOwnProperty.call(m, "round"))
                    w.uint32(8).int32(m.round);
                if (m.votes != null && m.votes.length) {
                    for (var i = 0; i < m.votes.length; ++i)
                        $root.tendermint.abci.VoteInfo.encode(m.votes[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a LastCommitInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastCommitInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.LastCommitInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.round = r.int32();
                            break;
                        case 2:
                            if (!(m.votes && m.votes.length))
                                m.votes = [];
                            m.votes.push($root.tendermint.abci.VoteInfo.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return LastCommitInfo;
        })();

        abci.Event = (function () {

            /**
             * Properties of an Event.
             * @memberof tendermint.abci
             * @interface IEvent
             * @property {string|null} [type] Event type
             * @property {Array.<tendermint.abci.IEventAttribute>|null} [attributes] Event attributes
             */

            /**
             * Constructs a new Event.
             * @memberof tendermint.abci
             * @classdesc Represents an Event.
             * @implements IEvent
             * @constructor
             * @param {tendermint.abci.IEvent=} [p] Properties to set
             */
            function Event(p) {
                this.attributes = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Event type.
             * @member {string} type
             * @memberof tendermint.abci.Event
             * @instance
             */
            Event.prototype.type = "";

            /**
             * Event attributes.
             * @member {Array.<tendermint.abci.IEventAttribute>} attributes
             * @memberof tendermint.abci.Event
             * @instance
             */
            Event.prototype.attributes = $util.emptyArray;

            /**
             * Encodes the specified Event message. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.IEvent} m Event message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Event.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(10).string(m.type);
                if (m.attributes != null && m.attributes.length) {
                    for (var i = 0; i < m.attributes.length; ++i)
                        $root.tendermint.abci.EventAttribute.encode(m.attributes[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an Event message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Event
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.Event} Event
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Event.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.Event();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.type = r.string();
                            break;
                        case 2:
                            if (!(m.attributes && m.attributes.length))
                                m.attributes = [];
                            m.attributes.push($root.tendermint.abci.EventAttribute.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Event;
        })();

        abci.EventAttribute = (function () {

            /**
             * Properties of an EventAttribute.
             * @memberof tendermint.abci
             * @interface IEventAttribute
             * @property {Uint8Array|null} [key] EventAttribute key
             * @property {Uint8Array|null} [value] EventAttribute value
             * @property {boolean|null} [index] EventAttribute index
             */

            /**
             * Constructs a new EventAttribute.
             * @memberof tendermint.abci
             * @classdesc Represents an EventAttribute.
             * @implements IEventAttribute
             * @constructor
             * @param {tendermint.abci.IEventAttribute=} [p] Properties to set
             */
            function EventAttribute(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EventAttribute key.
             * @member {Uint8Array} key
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.key = $util.newBuffer([]);

            /**
             * EventAttribute value.
             * @member {Uint8Array} value
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.value = $util.newBuffer([]);

            /**
             * EventAttribute index.
             * @member {boolean} index
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.index = false;

            /**
             * Encodes the specified EventAttribute message. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.IEventAttribute} m EventAttribute message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAttribute.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    w.uint32(10).bytes(m.key);
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(18).bytes(m.value);
                if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                    w.uint32(24).bool(m.index);
                return w;
            };

            /**
             * Decodes an EventAttribute message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAttribute.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.EventAttribute();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.key = r.bytes();
                            break;
                        case 2:
                            m.value = r.bytes();
                            break;
                        case 3:
                            m.index = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EventAttribute;
        })();

        abci.TxResult = (function () {

            /**
             * Properties of a TxResult.
             * @memberof tendermint.abci
             * @interface ITxResult
             * @property {Long|null} [height] TxResult height
             * @property {number|null} [index] TxResult index
             * @property {Uint8Array|null} [tx] TxResult tx
             * @property {tendermint.abci.IResponseDeliverTx|null} [result] TxResult result
             */

            /**
             * Constructs a new TxResult.
             * @memberof tendermint.abci
             * @classdesc Represents a TxResult.
             * @implements ITxResult
             * @constructor
             * @param {tendermint.abci.ITxResult=} [p] Properties to set
             */
            function TxResult(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TxResult height.
             * @member {Long} height
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * TxResult index.
             * @member {number} index
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.index = 0;

            /**
             * TxResult tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.tx = $util.newBuffer([]);

            /**
             * TxResult result.
             * @member {tendermint.abci.IResponseDeliverTx|null|undefined} result
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.result = null;

            /**
             * Encodes the specified TxResult message. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.ITxResult} m TxResult message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxResult.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(8).int64(m.height);
                if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                    w.uint32(16).uint32(m.index);
                if (m.tx != null && Object.hasOwnProperty.call(m, "tx"))
                    w.uint32(26).bytes(m.tx);
                if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                    $root.tendermint.abci.ResponseDeliverTx.encode(m.result, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TxResult message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.TxResult} TxResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxResult.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.TxResult();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.height = r.int64();
                            break;
                        case 2:
                            m.index = r.uint32();
                            break;
                        case 3:
                            m.tx = r.bytes();
                            break;
                        case 4:
                            m.result = $root.tendermint.abci.ResponseDeliverTx.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return TxResult;
        })();

        abci.Validator = (function () {

            /**
             * Properties of a Validator.
             * @memberof tendermint.abci
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {Long|null} [power] Validator power
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.abci
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.abci.IValidator=} [p] Properties to set
             */
            function Validator(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.abci.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator power.
             * @member {Long} power
             * @memberof tendermint.abci.Validator
             * @instance
             */
            Validator.prototype.power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.IValidator} m Validator message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                    w.uint32(10).bytes(m.address);
                if (m.power != null && Object.hasOwnProperty.call(m, "power"))
                    w.uint32(24).int64(m.power);
                return w;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.Validator();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 3:
                            m.power = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Validator;
        })();

        abci.ValidatorUpdate = (function () {

            /**
             * Properties of a ValidatorUpdate.
             * @memberof tendermint.abci
             * @interface IValidatorUpdate
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] ValidatorUpdate pub_key
             * @property {Long|null} [power] ValidatorUpdate power
             */

            /**
             * Constructs a new ValidatorUpdate.
             * @memberof tendermint.abci
             * @classdesc Represents a ValidatorUpdate.
             * @implements IValidatorUpdate
             * @constructor
             * @param {tendermint.abci.IValidatorUpdate=} [p] Properties to set
             */
            function ValidatorUpdate(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ValidatorUpdate pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             */
            ValidatorUpdate.prototype.pub_key = null;

            /**
             * ValidatorUpdate power.
             * @member {Long} power
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             */
            ValidatorUpdate.prototype.power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified ValidatorUpdate message. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.IValidatorUpdate} m ValidatorUpdate message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorUpdate.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.pub_key != null && Object.hasOwnProperty.call(m, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(m.pub_key, w.uint32(10).fork()).ldelim();
                if (m.power != null && Object.hasOwnProperty.call(m, "power"))
                    w.uint32(16).int64(m.power);
                return w;
            };

            /**
             * Decodes a ValidatorUpdate message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorUpdate.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.ValidatorUpdate();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.pub_key = $root.tendermint.crypto.PublicKey.decode(r, r.uint32());
                            break;
                        case 2:
                            m.power = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ValidatorUpdate;
        })();

        abci.VoteInfo = (function () {

            /**
             * Properties of a VoteInfo.
             * @memberof tendermint.abci
             * @interface IVoteInfo
             * @property {tendermint.abci.IValidator|null} [validator] VoteInfo validator
             * @property {boolean|null} [signed_last_block] VoteInfo signed_last_block
             */

            /**
             * Constructs a new VoteInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a VoteInfo.
             * @implements IVoteInfo
             * @constructor
             * @param {tendermint.abci.IVoteInfo=} [p] Properties to set
             */
            function VoteInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * VoteInfo validator.
             * @member {tendermint.abci.IValidator|null|undefined} validator
             * @memberof tendermint.abci.VoteInfo
             * @instance
             */
            VoteInfo.prototype.validator = null;

            /**
             * VoteInfo signed_last_block.
             * @member {boolean} signed_last_block
             * @memberof tendermint.abci.VoteInfo
             * @instance
             */
            VoteInfo.prototype.signed_last_block = false;

            /**
             * Encodes the specified VoteInfo message. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.IVoteInfo} m VoteInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                    $root.tendermint.abci.Validator.encode(m.validator, w.uint32(10).fork()).ldelim();
                if (m.signed_last_block != null && Object.hasOwnProperty.call(m, "signed_last_block"))
                    w.uint32(16).bool(m.signed_last_block);
                return w;
            };

            /**
             * Decodes a VoteInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.VoteInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.validator = $root.tendermint.abci.Validator.decode(r, r.uint32());
                            break;
                        case 2:
                            m.signed_last_block = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return VoteInfo;
        })();

        /**
         * EvidenceType enum.
         * @name tendermint.abci.EvidenceType
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} DUPLICATE_VOTE=1 DUPLICATE_VOTE value
         * @property {number} LIGHT_CLIENT_ATTACK=2 LIGHT_CLIENT_ATTACK value
         */
        abci.EvidenceType = (function () {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "DUPLICATE_VOTE"] = 1;
            values[valuesById[2] = "LIGHT_CLIENT_ATTACK"] = 2;
            return values;
        })();

        abci.Evidence = (function () {

            /**
             * Properties of an Evidence.
             * @memberof tendermint.abci
             * @interface IEvidence
             * @property {tendermint.abci.EvidenceType|null} [type] Evidence type
             * @property {tendermint.abci.IValidator|null} [validator] Evidence validator
             * @property {Long|null} [height] Evidence height
             * @property {google.protobuf.ITimestamp|null} [time] Evidence time
             * @property {Long|null} [total_voting_power] Evidence total_voting_power
             */

            /**
             * Constructs a new Evidence.
             * @memberof tendermint.abci
             * @classdesc Represents an Evidence.
             * @implements IEvidence
             * @constructor
             * @param {tendermint.abci.IEvidence=} [p] Properties to set
             */
            function Evidence(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Evidence type.
             * @member {tendermint.abci.EvidenceType} type
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.type = 0;

            /**
             * Evidence validator.
             * @member {tendermint.abci.IValidator|null|undefined} validator
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.validator = null;

            /**
             * Evidence height.
             * @member {Long} height
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Evidence time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.time = null;

            /**
             * Evidence total_voting_power.
             * @member {Long} total_voting_power
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified Evidence message. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.IEvidence} m Evidence message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(8).int32(m.type);
                if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                    $root.tendermint.abci.Validator.encode(m.validator, w.uint32(18).fork()).ldelim();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(24).int64(m.height);
                if (m.time != null && Object.hasOwnProperty.call(m, "time"))
                    $root.google.protobuf.Timestamp.encode(m.time, w.uint32(34).fork()).ldelim();
                if (m.total_voting_power != null && Object.hasOwnProperty.call(m, "total_voting_power"))
                    w.uint32(40).int64(m.total_voting_power);
                return w;
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.Evidence();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        case 2:
                            m.validator = $root.tendermint.abci.Validator.decode(r, r.uint32());
                            break;
                        case 3:
                            m.height = r.int64();
                            break;
                        case 4:
                            m.time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        case 5:
                            m.total_voting_power = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Evidence;
        })();

        abci.Snapshot = (function () {

            /**
             * Properties of a Snapshot.
             * @memberof tendermint.abci
             * @interface ISnapshot
             * @property {Long|null} [height] Snapshot height
             * @property {number|null} [format] Snapshot format
             * @property {number|null} [chunks] Snapshot chunks
             * @property {Uint8Array|null} [hash] Snapshot hash
             * @property {Uint8Array|null} [metadata] Snapshot metadata
             */

            /**
             * Constructs a new Snapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a Snapshot.
             * @implements ISnapshot
             * @constructor
             * @param {tendermint.abci.ISnapshot=} [p] Properties to set
             */
            function Snapshot(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Snapshot height.
             * @member {Long} height
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * Snapshot format.
             * @member {number} format
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.format = 0;

            /**
             * Snapshot chunks.
             * @member {number} chunks
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.chunks = 0;

            /**
             * Snapshot hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.hash = $util.newBuffer([]);

            /**
             * Snapshot metadata.
             * @member {Uint8Array} metadata
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.metadata = $util.newBuffer([]);

            /**
             * Encodes the specified Snapshot message. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.ISnapshot} m Snapshot message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Snapshot.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(8).uint64(m.height);
                if (m.format != null && Object.hasOwnProperty.call(m, "format"))
                    w.uint32(16).uint32(m.format);
                if (m.chunks != null && Object.hasOwnProperty.call(m, "chunks"))
                    w.uint32(24).uint32(m.chunks);
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(34).bytes(m.hash);
                if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata"))
                    w.uint32(42).bytes(m.metadata);
                return w;
            };

            /**
             * Decodes a Snapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.abci.Snapshot} Snapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Snapshot.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.abci.Snapshot();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.height = r.uint64();
                            break;
                        case 2:
                            m.format = r.uint32();
                            break;
                        case 3:
                            m.chunks = r.uint32();
                            break;
                        case 4:
                            m.hash = r.bytes();
                            break;
                        case 5:
                            m.metadata = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Snapshot;
        })();

        return abci;
    })();

    tendermint.crypto = (function () {

        /**
         * Namespace crypto.
         * @memberof tendermint
         * @namespace
         */
        const crypto = {};

        crypto.PublicKey = (function () {

            /**
             * Properties of a PublicKey.
             * @memberof tendermint.crypto
             * @interface IPublicKey
             * @property {Uint8Array|null} [ed25519] PublicKey ed25519
             * @property {Uint8Array|null} [secp256k1] PublicKey secp256k1
             */

            /**
             * Constructs a new PublicKey.
             * @memberof tendermint.crypto
             * @classdesc Represents a PublicKey.
             * @implements IPublicKey
             * @constructor
             * @param {tendermint.crypto.IPublicKey=} [p] Properties to set
             */
            function PublicKey(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * PublicKey ed25519.
             * @member {Uint8Array|null|undefined} ed25519
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.ed25519 = null;

            /**
             * PublicKey secp256k1.
             * @member {Uint8Array|null|undefined} secp256k1
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.secp256k1 = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * PublicKey sum.
             * @member {"ed25519"|"secp256k1"|undefined} sum
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            Object.defineProperty(PublicKey.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["ed25519", "secp256k1"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified PublicKey message. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} m PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.ed25519 != null && Object.hasOwnProperty.call(m, "ed25519"))
                    w.uint32(10).bytes(m.ed25519);
                if (m.secp256k1 != null && Object.hasOwnProperty.call(m, "secp256k1"))
                    w.uint32(18).bytes(m.secp256k1);
                return w;
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.crypto.PublicKey();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.ed25519 = r.bytes();
                            break;
                        case 2:
                            m.secp256k1 = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return PublicKey;
        })();

        crypto.Proof = (function () {

            /**
             * Properties of a Proof.
             * @memberof tendermint.crypto
             * @interface IProof
             * @property {Long|null} [total] Proof total
             * @property {Long|null} [index] Proof index
             * @property {Uint8Array|null} [leaf_hash] Proof leaf_hash
             * @property {Array.<Uint8Array>|null} [aunts] Proof aunts
             */

            /**
             * Constructs a new Proof.
             * @memberof tendermint.crypto
             * @classdesc Represents a Proof.
             * @implements IProof
             * @constructor
             * @param {tendermint.crypto.IProof=} [p] Properties to set
             */
            function Proof(p) {
                this.aunts = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Proof total.
             * @member {Long} total
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.total = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Proof index.
             * @member {Long} index
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.index = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Proof leaf_hash.
             * @member {Uint8Array} leaf_hash
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.leaf_hash = $util.newBuffer([]);

            /**
             * Proof aunts.
             * @member {Array.<Uint8Array>} aunts
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.aunts = $util.emptyArray;

            /**
             * Encodes the specified Proof message. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} m Proof message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.total != null && Object.hasOwnProperty.call(m, "total"))
                    w.uint32(8).int64(m.total);
                if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                    w.uint32(16).int64(m.index);
                if (m.leaf_hash != null && Object.hasOwnProperty.call(m, "leaf_hash"))
                    w.uint32(26).bytes(m.leaf_hash);
                if (m.aunts != null && m.aunts.length) {
                    for (var i = 0; i < m.aunts.length; ++i)
                        w.uint32(34).bytes(m.aunts[i]);
                }
                return w;
            };

            /**
             * Decodes a Proof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.crypto.Proof();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.total = r.int64();
                            break;
                        case 2:
                            m.index = r.int64();
                            break;
                        case 3:
                            m.leaf_hash = r.bytes();
                            break;
                        case 4:
                            if (!(m.aunts && m.aunts.length))
                                m.aunts = [];
                            m.aunts.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Proof;
        })();

        crypto.ValueOp = (function () {

            /**
             * Properties of a ValueOp.
             * @memberof tendermint.crypto
             * @interface IValueOp
             * @property {Uint8Array|null} [key] ValueOp key
             * @property {tendermint.crypto.IProof|null} [proof] ValueOp proof
             */

            /**
             * Constructs a new ValueOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ValueOp.
             * @implements IValueOp
             * @constructor
             * @param {tendermint.crypto.IValueOp=} [p] Properties to set
             */
            function ValueOp(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ValueOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.key = $util.newBuffer([]);

            /**
             * ValueOp proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.proof = null;

            /**
             * Encodes the specified ValueOp message. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} m ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    w.uint32(10).bytes(m.key);
                if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                    $root.tendermint.crypto.Proof.encode(m.proof, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.crypto.ValueOp();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.key = r.bytes();
                            break;
                        case 2:
                            m.proof = $root.tendermint.crypto.Proof.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ValueOp;
        })();

        crypto.DominoOp = (function () {

            /**
             * Properties of a DominoOp.
             * @memberof tendermint.crypto
             * @interface IDominoOp
             * @property {string|null} [key] DominoOp key
             * @property {string|null} [input] DominoOp input
             * @property {string|null} [output] DominoOp output
             */

            /**
             * Constructs a new DominoOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a DominoOp.
             * @implements IDominoOp
             * @constructor
             * @param {tendermint.crypto.IDominoOp=} [p] Properties to set
             */
            function DominoOp(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * DominoOp key.
             * @member {string} key
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.key = "";

            /**
             * DominoOp input.
             * @member {string} input
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.input = "";

            /**
             * DominoOp output.
             * @member {string} output
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.output = "";

            /**
             * Encodes the specified DominoOp message. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} m DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    w.uint32(10).string(m.key);
                if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                    w.uint32(18).string(m.input);
                if (m.output != null && Object.hasOwnProperty.call(m, "output"))
                    w.uint32(26).string(m.output);
                return w;
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.crypto.DominoOp();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.key = r.string();
                            break;
                        case 2:
                            m.input = r.string();
                            break;
                        case 3:
                            m.output = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return DominoOp;
        })();

        crypto.ProofOp = (function () {

            /**
             * Properties of a ProofOp.
             * @memberof tendermint.crypto
             * @interface IProofOp
             * @property {string|null} [type] ProofOp type
             * @property {Uint8Array|null} [key] ProofOp key
             * @property {Uint8Array|null} [data] ProofOp data
             */

            /**
             * Constructs a new ProofOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOp.
             * @implements IProofOp
             * @constructor
             * @param {tendermint.crypto.IProofOp=} [p] Properties to set
             */
            function ProofOp(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ProofOp type.
             * @member {string} type
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.type = "";

            /**
             * ProofOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.key = $util.newBuffer([]);

            /**
             * ProofOp data.
             * @member {Uint8Array} data
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.data = $util.newBuffer([]);

            /**
             * Encodes the specified ProofOp message. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} m ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(10).string(m.type);
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    w.uint32(18).bytes(m.key);
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(26).bytes(m.data);
                return w;
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.crypto.ProofOp();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.type = r.string();
                            break;
                        case 2:
                            m.key = r.bytes();
                            break;
                        case 3:
                            m.data = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ProofOp;
        })();

        crypto.ProofOps = (function () {

            /**
             * Properties of a ProofOps.
             * @memberof tendermint.crypto
             * @interface IProofOps
             * @property {Array.<tendermint.crypto.IProofOp>|null} [ops] ProofOps ops
             */

            /**
             * Constructs a new ProofOps.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOps.
             * @implements IProofOps
             * @constructor
             * @param {tendermint.crypto.IProofOps=} [p] Properties to set
             */
            function ProofOps(p) {
                this.ops = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ProofOps ops.
             * @member {Array.<tendermint.crypto.IProofOp>} ops
             * @memberof tendermint.crypto.ProofOps
             * @instance
             */
            ProofOps.prototype.ops = $util.emptyArray;

            /**
             * Encodes the specified ProofOps message. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} m ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.ops != null && m.ops.length) {
                    for (var i = 0; i < m.ops.length; ++i)
                        $root.tendermint.crypto.ProofOp.encode(m.ops[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.crypto.ProofOps();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.ops && m.ops.length))
                                m.ops = [];
                            m.ops.push($root.tendermint.crypto.ProofOp.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ProofOps;
        })();

        return crypto;
    })();

    tendermint.libs = (function () {

        /**
         * Namespace libs.
         * @memberof tendermint
         * @namespace
         */
        const libs = {};

        libs.bits = (function () {

            /**
             * Namespace bits.
             * @memberof tendermint.libs
             * @namespace
             */
            const bits = {};

            bits.BitArray = (function () {

                /**
                 * Properties of a BitArray.
                 * @memberof tendermint.libs.bits
                 * @interface IBitArray
                 * @property {Long|null} [bits] BitArray bits
                 * @property {Array.<Long>|null} [elems] BitArray elems
                 */

                /**
                 * Constructs a new BitArray.
                 * @memberof tendermint.libs.bits
                 * @classdesc Represents a BitArray.
                 * @implements IBitArray
                 * @constructor
                 * @param {tendermint.libs.bits.IBitArray=} [p] Properties to set
                 */
                function BitArray(p) {
                    this.elems = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BitArray bits.
                 * @member {Long} bits
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.bits = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * BitArray elems.
                 * @member {Array.<Long>} elems
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.elems = $util.emptyArray;

                /**
                 * Encodes the specified BitArray message. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} m BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.bits != null && Object.hasOwnProperty.call(m, "bits"))
                        w.uint32(8).int64(m.bits);
                    if (m.elems != null && m.elems.length) {
                        w.uint32(18).fork();
                        for (var i = 0; i < m.elems.length; ++i)
                            w.uint64(m.elems[i]);
                        w.ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.libs.bits.BitArray();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.bits = r.int64();
                                break;
                            case 2:
                                if (!(m.elems && m.elems.length))
                                    m.elems = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.elems.push(r.uint64());
                                } else
                                    m.elems.push(r.uint64());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BitArray;
            })();

            return bits;
        })();

        return libs;
    })();

    tendermint.p2p = (function () {

        /**
         * Namespace p2p.
         * @memberof tendermint
         * @namespace
         */
        const p2p = {};

        p2p.NetAddress = (function () {

            /**
             * Properties of a NetAddress.
             * @memberof tendermint.p2p
             * @interface INetAddress
             * @property {string|null} [id] NetAddress id
             * @property {string|null} [ip] NetAddress ip
             * @property {number|null} [port] NetAddress port
             */

            /**
             * Constructs a new NetAddress.
             * @memberof tendermint.p2p
             * @classdesc Represents a NetAddress.
             * @implements INetAddress
             * @constructor
             * @param {tendermint.p2p.INetAddress=} [p] Properties to set
             */
            function NetAddress(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * NetAddress id.
             * @member {string} id
             * @memberof tendermint.p2p.NetAddress
             * @instance
             */
            NetAddress.prototype.id = "";

            /**
             * NetAddress ip.
             * @member {string} ip
             * @memberof tendermint.p2p.NetAddress
             * @instance
             */
            NetAddress.prototype.ip = "";

            /**
             * NetAddress port.
             * @member {number} port
             * @memberof tendermint.p2p.NetAddress
             * @instance
             */
            NetAddress.prototype.port = 0;

            /**
             * Encodes the specified NetAddress message. Does not implicitly {@link tendermint.p2p.NetAddress.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {tendermint.p2p.INetAddress} m NetAddress message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NetAddress.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                    w.uint32(10).string(m.id);
                if (m.ip != null && Object.hasOwnProperty.call(m, "ip"))
                    w.uint32(18).string(m.ip);
                if (m.port != null && Object.hasOwnProperty.call(m, "port"))
                    w.uint32(24).uint32(m.port);
                return w;
            };

            /**
             * Decodes a NetAddress message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.p2p.NetAddress} NetAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NetAddress.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.p2p.NetAddress();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.id = r.string();
                            break;
                        case 2:
                            m.ip = r.string();
                            break;
                        case 3:
                            m.port = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return NetAddress;
        })();

        p2p.ProtocolVersion = (function () {

            /**
             * Properties of a ProtocolVersion.
             * @memberof tendermint.p2p
             * @interface IProtocolVersion
             * @property {Long|null} [p2p] ProtocolVersion p2p
             * @property {Long|null} [block] ProtocolVersion block
             * @property {Long|null} [app] ProtocolVersion app
             */

            /**
             * Constructs a new ProtocolVersion.
             * @memberof tendermint.p2p
             * @classdesc Represents a ProtocolVersion.
             * @implements IProtocolVersion
             * @constructor
             * @param {tendermint.p2p.IProtocolVersion=} [p] Properties to set
             */
            function ProtocolVersion(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ProtocolVersion p2p.
             * @member {Long} p2p
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             */
            ProtocolVersion.prototype.p2p = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * ProtocolVersion block.
             * @member {Long} block
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             */
            ProtocolVersion.prototype.block = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * ProtocolVersion app.
             * @member {Long} app
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             */
            ProtocolVersion.prototype.app = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * Encodes the specified ProtocolVersion message. Does not implicitly {@link tendermint.p2p.ProtocolVersion.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {tendermint.p2p.IProtocolVersion} m ProtocolVersion message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolVersion.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.p2p != null && Object.hasOwnProperty.call(m, "p2p"))
                    w.uint32(8).uint64(m.p2p);
                if (m.block != null && Object.hasOwnProperty.call(m, "block"))
                    w.uint32(16).uint64(m.block);
                if (m.app != null && Object.hasOwnProperty.call(m, "app"))
                    w.uint32(24).uint64(m.app);
                return w;
            };

            /**
             * Decodes a ProtocolVersion message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.p2p.ProtocolVersion} ProtocolVersion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolVersion.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.p2p.ProtocolVersion();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.p2p = r.uint64();
                            break;
                        case 2:
                            m.block = r.uint64();
                            break;
                        case 3:
                            m.app = r.uint64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ProtocolVersion;
        })();

        p2p.DefaultNodeInfo = (function () {

            /**
             * Properties of a DefaultNodeInfo.
             * @memberof tendermint.p2p
             * @interface IDefaultNodeInfo
             * @property {tendermint.p2p.IProtocolVersion|null} [protocol_version] DefaultNodeInfo protocol_version
             * @property {string|null} [default_node_id] DefaultNodeInfo default_node_id
             * @property {string|null} [listen_addr] DefaultNodeInfo listen_addr
             * @property {string|null} [network] DefaultNodeInfo network
             * @property {string|null} [version] DefaultNodeInfo version
             * @property {Uint8Array|null} [channels] DefaultNodeInfo channels
             * @property {string|null} [moniker] DefaultNodeInfo moniker
             * @property {tendermint.p2p.IDefaultNodeInfoOther|null} [other] DefaultNodeInfo other
             */

            /**
             * Constructs a new DefaultNodeInfo.
             * @memberof tendermint.p2p
             * @classdesc Represents a DefaultNodeInfo.
             * @implements IDefaultNodeInfo
             * @constructor
             * @param {tendermint.p2p.IDefaultNodeInfo=} [p] Properties to set
             */
            function DefaultNodeInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * DefaultNodeInfo protocol_version.
             * @member {tendermint.p2p.IProtocolVersion|null|undefined} protocol_version
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.protocol_version = null;

            /**
             * DefaultNodeInfo default_node_id.
             * @member {string} default_node_id
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.default_node_id = "";

            /**
             * DefaultNodeInfo listen_addr.
             * @member {string} listen_addr
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.listen_addr = "";

            /**
             * DefaultNodeInfo network.
             * @member {string} network
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.network = "";

            /**
             * DefaultNodeInfo version.
             * @member {string} version
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.version = "";

            /**
             * DefaultNodeInfo channels.
             * @member {Uint8Array} channels
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.channels = $util.newBuffer([]);

            /**
             * DefaultNodeInfo moniker.
             * @member {string} moniker
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.moniker = "";

            /**
             * DefaultNodeInfo other.
             * @member {tendermint.p2p.IDefaultNodeInfoOther|null|undefined} other
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.other = null;

            /**
             * Encodes the specified DefaultNodeInfo message. Does not implicitly {@link tendermint.p2p.DefaultNodeInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {tendermint.p2p.IDefaultNodeInfo} m DefaultNodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DefaultNodeInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.protocol_version != null && Object.hasOwnProperty.call(m, "protocol_version"))
                    $root.tendermint.p2p.ProtocolVersion.encode(m.protocol_version, w.uint32(10).fork()).ldelim();
                if (m.default_node_id != null && Object.hasOwnProperty.call(m, "default_node_id"))
                    w.uint32(18).string(m.default_node_id);
                if (m.listen_addr != null && Object.hasOwnProperty.call(m, "listen_addr"))
                    w.uint32(26).string(m.listen_addr);
                if (m.network != null && Object.hasOwnProperty.call(m, "network"))
                    w.uint32(34).string(m.network);
                if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                    w.uint32(42).string(m.version);
                if (m.channels != null && Object.hasOwnProperty.call(m, "channels"))
                    w.uint32(50).bytes(m.channels);
                if (m.moniker != null && Object.hasOwnProperty.call(m, "moniker"))
                    w.uint32(58).string(m.moniker);
                if (m.other != null && Object.hasOwnProperty.call(m, "other"))
                    $root.tendermint.p2p.DefaultNodeInfoOther.encode(m.other, w.uint32(66).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a DefaultNodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.p2p.DefaultNodeInfo} DefaultNodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DefaultNodeInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.p2p.DefaultNodeInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.protocol_version = $root.tendermint.p2p.ProtocolVersion.decode(r, r.uint32());
                            break;
                        case 2:
                            m.default_node_id = r.string();
                            break;
                        case 3:
                            m.listen_addr = r.string();
                            break;
                        case 4:
                            m.network = r.string();
                            break;
                        case 5:
                            m.version = r.string();
                            break;
                        case 6:
                            m.channels = r.bytes();
                            break;
                        case 7:
                            m.moniker = r.string();
                            break;
                        case 8:
                            m.other = $root.tendermint.p2p.DefaultNodeInfoOther.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return DefaultNodeInfo;
        })();

        p2p.DefaultNodeInfoOther = (function () {

            /**
             * Properties of a DefaultNodeInfoOther.
             * @memberof tendermint.p2p
             * @interface IDefaultNodeInfoOther
             * @property {string|null} [tx_index] DefaultNodeInfoOther tx_index
             * @property {string|null} [rpc_address] DefaultNodeInfoOther rpc_address
             */

            /**
             * Constructs a new DefaultNodeInfoOther.
             * @memberof tendermint.p2p
             * @classdesc Represents a DefaultNodeInfoOther.
             * @implements IDefaultNodeInfoOther
             * @constructor
             * @param {tendermint.p2p.IDefaultNodeInfoOther=} [p] Properties to set
             */
            function DefaultNodeInfoOther(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * DefaultNodeInfoOther tx_index.
             * @member {string} tx_index
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @instance
             */
            DefaultNodeInfoOther.prototype.tx_index = "";

            /**
             * DefaultNodeInfoOther rpc_address.
             * @member {string} rpc_address
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @instance
             */
            DefaultNodeInfoOther.prototype.rpc_address = "";

            /**
             * Encodes the specified DefaultNodeInfoOther message. Does not implicitly {@link tendermint.p2p.DefaultNodeInfoOther.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {tendermint.p2p.IDefaultNodeInfoOther} m DefaultNodeInfoOther message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DefaultNodeInfoOther.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tx_index != null && Object.hasOwnProperty.call(m, "tx_index"))
                    w.uint32(10).string(m.tx_index);
                if (m.rpc_address != null && Object.hasOwnProperty.call(m, "rpc_address"))
                    w.uint32(18).string(m.rpc_address);
                return w;
            };

            /**
             * Decodes a DefaultNodeInfoOther message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.p2p.DefaultNodeInfoOther} DefaultNodeInfoOther
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DefaultNodeInfoOther.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.p2p.DefaultNodeInfoOther();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.tx_index = r.string();
                            break;
                        case 2:
                            m.rpc_address = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return DefaultNodeInfoOther;
        })();

        return p2p;
    })();

    tendermint.types = (function () {

        /**
         * Namespace types.
         * @memberof tendermint
         * @namespace
         */
        const types = {};

        types.ConsensusParams = (function () {

            /**
             * Properties of a ConsensusParams.
             * @memberof tendermint.types
             * @interface IConsensusParams
             * @property {tendermint.types.IBlockParams|null} [block] ConsensusParams block
             * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
             * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
             * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
             */

            /**
             * Constructs a new ConsensusParams.
             * @memberof tendermint.types
             * @classdesc Represents a ConsensusParams.
             * @implements IConsensusParams
             * @constructor
             * @param {tendermint.types.IConsensusParams=} [p] Properties to set
             */
            function ConsensusParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusParams block.
             * @member {tendermint.types.IBlockParams|null|undefined} block
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.block = null;

            /**
             * ConsensusParams evidence.
             * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.evidence = null;

            /**
             * ConsensusParams validator.
             * @member {tendermint.types.IValidatorParams|null|undefined} validator
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.validator = null;

            /**
             * ConsensusParams version.
             * @member {tendermint.types.IVersionParams|null|undefined} version
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.version = null;

            /**
             * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.IConsensusParams} m ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.block != null && Object.hasOwnProperty.call(m, "block"))
                    $root.tendermint.types.BlockParams.encode(m.block, w.uint32(10).fork()).ldelim();
                if (m.evidence != null && Object.hasOwnProperty.call(m, "evidence"))
                    $root.tendermint.types.EvidenceParams.encode(m.evidence, w.uint32(18).fork()).ldelim();
                if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                    $root.tendermint.types.ValidatorParams.encode(m.validator, w.uint32(26).fork()).ldelim();
                if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                    $root.tendermint.types.VersionParams.encode(m.version, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.ConsensusParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.block = $root.tendermint.types.BlockParams.decode(r, r.uint32());
                            break;
                        case 2:
                            m.evidence = $root.tendermint.types.EvidenceParams.decode(r, r.uint32());
                            break;
                        case 3:
                            m.validator = $root.tendermint.types.ValidatorParams.decode(r, r.uint32());
                            break;
                        case 4:
                            m.version = $root.tendermint.types.VersionParams.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ConsensusParams;
        })();

        types.BlockParams = (function () {

            /**
             * Properties of a BlockParams.
             * @memberof tendermint.types
             * @interface IBlockParams
             * @property {Long|null} [max_bytes] BlockParams max_bytes
             * @property {Long|null} [max_gas] BlockParams max_gas
             * @property {Long|null} [time_iota_ms] BlockParams time_iota_ms
             */

            /**
             * Constructs a new BlockParams.
             * @memberof tendermint.types
             * @classdesc Represents a BlockParams.
             * @implements IBlockParams
             * @constructor
             * @param {tendermint.types.IBlockParams=} [p] Properties to set
             */
            function BlockParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * BlockParams max_bytes.
             * @member {Long} max_bytes
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * BlockParams max_gas.
             * @member {Long} max_gas
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * BlockParams time_iota_ms.
             * @member {Long} time_iota_ms
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.time_iota_ms = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.IBlockParams} m BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.max_bytes != null && Object.hasOwnProperty.call(m, "max_bytes"))
                    w.uint32(8).int64(m.max_bytes);
                if (m.max_gas != null && Object.hasOwnProperty.call(m, "max_gas"))
                    w.uint32(16).int64(m.max_gas);
                if (m.time_iota_ms != null && Object.hasOwnProperty.call(m, "time_iota_ms"))
                    w.uint32(24).int64(m.time_iota_ms);
                return w;
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.BlockParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.max_bytes = r.int64();
                            break;
                        case 2:
                            m.max_gas = r.int64();
                            break;
                        case 3:
                            m.time_iota_ms = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return BlockParams;
        })();

        types.EvidenceParams = (function () {

            /**
             * Properties of an EvidenceParams.
             * @memberof tendermint.types
             * @interface IEvidenceParams
             * @property {Long|null} [max_age_num_blocks] EvidenceParams max_age_num_blocks
             * @property {google.protobuf.IDuration|null} [max_age_duration] EvidenceParams max_age_duration
             * @property {Long|null} [max_bytes] EvidenceParams max_bytes
             */

            /**
             * Constructs a new EvidenceParams.
             * @memberof tendermint.types
             * @classdesc Represents an EvidenceParams.
             * @implements IEvidenceParams
             * @constructor
             * @param {tendermint.types.IEvidenceParams=} [p] Properties to set
             */
            function EvidenceParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EvidenceParams max_age_num_blocks.
             * @member {Long} max_age_num_blocks
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_age_num_blocks = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * EvidenceParams max_age_duration.
             * @member {google.protobuf.IDuration|null|undefined} max_age_duration
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_age_duration = null;

            /**
             * EvidenceParams max_bytes.
             * @member {Long} max_bytes
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified EvidenceParams message. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.IEvidenceParams} m EvidenceParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.max_age_num_blocks != null && Object.hasOwnProperty.call(m, "max_age_num_blocks"))
                    w.uint32(8).int64(m.max_age_num_blocks);
                if (m.max_age_duration != null && Object.hasOwnProperty.call(m, "max_age_duration"))
                    $root.google.protobuf.Duration.encode(m.max_age_duration, w.uint32(18).fork()).ldelim();
                if (m.max_bytes != null && Object.hasOwnProperty.call(m, "max_bytes"))
                    w.uint32(24).int64(m.max_bytes);
                return w;
            };

            /**
             * Decodes an EvidenceParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.EvidenceParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.max_age_num_blocks = r.int64();
                            break;
                        case 2:
                            m.max_age_duration = $root.google.protobuf.Duration.decode(r, r.uint32());
                            break;
                        case 3:
                            m.max_bytes = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EvidenceParams;
        })();

        types.ValidatorParams = (function () {

            /**
             * Properties of a ValidatorParams.
             * @memberof tendermint.types
             * @interface IValidatorParams
             * @property {Array.<string>|null} [pub_key_types] ValidatorParams pub_key_types
             */

            /**
             * Constructs a new ValidatorParams.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorParams.
             * @implements IValidatorParams
             * @constructor
             * @param {tendermint.types.IValidatorParams=} [p] Properties to set
             */
            function ValidatorParams(p) {
                this.pub_key_types = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ValidatorParams pub_key_types.
             * @member {Array.<string>} pub_key_types
             * @memberof tendermint.types.ValidatorParams
             * @instance
             */
            ValidatorParams.prototype.pub_key_types = $util.emptyArray;

            /**
             * Encodes the specified ValidatorParams message. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.IValidatorParams} m ValidatorParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.pub_key_types != null && m.pub_key_types.length) {
                    for (var i = 0; i < m.pub_key_types.length; ++i)
                        w.uint32(10).string(m.pub_key_types[i]);
                }
                return w;
            };

            /**
             * Decodes a ValidatorParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.ValidatorParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.pub_key_types && m.pub_key_types.length))
                                m.pub_key_types = [];
                            m.pub_key_types.push(r.string());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ValidatorParams;
        })();

        types.VersionParams = (function () {

            /**
             * Properties of a VersionParams.
             * @memberof tendermint.types
             * @interface IVersionParams
             * @property {Long|null} [app_version] VersionParams app_version
             */

            /**
             * Constructs a new VersionParams.
             * @memberof tendermint.types
             * @classdesc Represents a VersionParams.
             * @implements IVersionParams
             * @constructor
             * @param {tendermint.types.IVersionParams=} [p] Properties to set
             */
            function VersionParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * VersionParams app_version.
             * @member {Long} app_version
             * @memberof tendermint.types.VersionParams
             * @instance
             */
            VersionParams.prototype.app_version = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * Encodes the specified VersionParams message. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.IVersionParams} m VersionParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VersionParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.app_version != null && Object.hasOwnProperty.call(m, "app_version"))
                    w.uint32(8).uint64(m.app_version);
                return w;
            };

            /**
             * Decodes a VersionParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.VersionParams} VersionParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VersionParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.VersionParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.app_version = r.uint64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return VersionParams;
        })();

        types.HashedParams = (function () {

            /**
             * Properties of a HashedParams.
             * @memberof tendermint.types
             * @interface IHashedParams
             * @property {Long|null} [block_max_bytes] HashedParams block_max_bytes
             * @property {Long|null} [block_max_gas] HashedParams block_max_gas
             */

            /**
             * Constructs a new HashedParams.
             * @memberof tendermint.types
             * @classdesc Represents a HashedParams.
             * @implements IHashedParams
             * @constructor
             * @param {tendermint.types.IHashedParams=} [p] Properties to set
             */
            function HashedParams(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * HashedParams block_max_bytes.
             * @member {Long} block_max_bytes
             * @memberof tendermint.types.HashedParams
             * @instance
             */
            HashedParams.prototype.block_max_bytes = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * HashedParams block_max_gas.
             * @member {Long} block_max_gas
             * @memberof tendermint.types.HashedParams
             * @instance
             */
            HashedParams.prototype.block_max_gas = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified HashedParams message. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.IHashedParams} m HashedParams message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HashedParams.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.block_max_bytes != null && Object.hasOwnProperty.call(m, "block_max_bytes"))
                    w.uint32(8).int64(m.block_max_bytes);
                if (m.block_max_gas != null && Object.hasOwnProperty.call(m, "block_max_gas"))
                    w.uint32(16).int64(m.block_max_gas);
                return w;
            };

            /**
             * Decodes a HashedParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.HashedParams} HashedParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HashedParams.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.HashedParams();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.block_max_bytes = r.int64();
                            break;
                        case 2:
                            m.block_max_gas = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return HashedParams;
        })();

        types.Evidence = (function () {

            /**
             * Properties of an Evidence.
             * @memberof tendermint.types
             * @interface IEvidence
             * @property {tendermint.types.IDuplicateVoteEvidence|null} [duplicate_vote_evidence] Evidence duplicate_vote_evidence
             * @property {tendermint.types.ILightClientAttackEvidence|null} [light_client_attack_evidence] Evidence light_client_attack_evidence
             */

            /**
             * Constructs a new Evidence.
             * @memberof tendermint.types
             * @classdesc Represents an Evidence.
             * @implements IEvidence
             * @constructor
             * @param {tendermint.types.IEvidence=} [p] Properties to set
             */
            function Evidence(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Evidence duplicate_vote_evidence.
             * @member {tendermint.types.IDuplicateVoteEvidence|null|undefined} duplicate_vote_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.duplicate_vote_evidence = null;

            /**
             * Evidence light_client_attack_evidence.
             * @member {tendermint.types.ILightClientAttackEvidence|null|undefined} light_client_attack_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.light_client_attack_evidence = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Evidence sum.
             * @member {"duplicate_vote_evidence"|"light_client_attack_evidence"|undefined} sum
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Object.defineProperty(Evidence.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["duplicate_vote_evidence", "light_client_attack_evidence"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Evidence message. Does not implicitly {@link tendermint.types.Evidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.IEvidence} m Evidence message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.duplicate_vote_evidence != null && Object.hasOwnProperty.call(m, "duplicate_vote_evidence"))
                    $root.tendermint.types.DuplicateVoteEvidence.encode(m.duplicate_vote_evidence, w.uint32(10).fork()).ldelim();
                if (m.light_client_attack_evidence != null && Object.hasOwnProperty.call(m, "light_client_attack_evidence"))
                    $root.tendermint.types.LightClientAttackEvidence.encode(m.light_client_attack_evidence, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Evidence();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.decode(r, r.uint32());
                            break;
                        case 2:
                            m.light_client_attack_evidence = $root.tendermint.types.LightClientAttackEvidence.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Evidence;
        })();

        types.DuplicateVoteEvidence = (function () {

            /**
             * Properties of a DuplicateVoteEvidence.
             * @memberof tendermint.types
             * @interface IDuplicateVoteEvidence
             * @property {tendermint.types.IVote|null} [vote_a] DuplicateVoteEvidence vote_a
             * @property {tendermint.types.IVote|null} [vote_b] DuplicateVoteEvidence vote_b
             * @property {Long|null} [total_voting_power] DuplicateVoteEvidence total_voting_power
             * @property {Long|null} [validator_power] DuplicateVoteEvidence validator_power
             * @property {google.protobuf.ITimestamp|null} [timestamp] DuplicateVoteEvidence timestamp
             */

            /**
             * Constructs a new DuplicateVoteEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a DuplicateVoteEvidence.
             * @implements IDuplicateVoteEvidence
             * @constructor
             * @param {tendermint.types.IDuplicateVoteEvidence=} [p] Properties to set
             */
            function DuplicateVoteEvidence(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * DuplicateVoteEvidence vote_a.
             * @member {tendermint.types.IVote|null|undefined} vote_a
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.vote_a = null;

            /**
             * DuplicateVoteEvidence vote_b.
             * @member {tendermint.types.IVote|null|undefined} vote_b
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.vote_b = null;

            /**
             * DuplicateVoteEvidence total_voting_power.
             * @member {Long} total_voting_power
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * DuplicateVoteEvidence validator_power.
             * @member {Long} validator_power
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.validator_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * DuplicateVoteEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified DuplicateVoteEvidence message. Does not implicitly {@link tendermint.types.DuplicateVoteEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.IDuplicateVoteEvidence} m DuplicateVoteEvidence message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DuplicateVoteEvidence.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.vote_a != null && Object.hasOwnProperty.call(m, "vote_a"))
                    $root.tendermint.types.Vote.encode(m.vote_a, w.uint32(10).fork()).ldelim();
                if (m.vote_b != null && Object.hasOwnProperty.call(m, "vote_b"))
                    $root.tendermint.types.Vote.encode(m.vote_b, w.uint32(18).fork()).ldelim();
                if (m.total_voting_power != null && Object.hasOwnProperty.call(m, "total_voting_power"))
                    w.uint32(24).int64(m.total_voting_power);
                if (m.validator_power != null && Object.hasOwnProperty.call(m, "validator_power"))
                    w.uint32(32).int64(m.validator_power);
                if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(42).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a DuplicateVoteEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DuplicateVoteEvidence.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.DuplicateVoteEvidence();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.vote_a = $root.tendermint.types.Vote.decode(r, r.uint32());
                            break;
                        case 2:
                            m.vote_b = $root.tendermint.types.Vote.decode(r, r.uint32());
                            break;
                        case 3:
                            m.total_voting_power = r.int64();
                            break;
                        case 4:
                            m.validator_power = r.int64();
                            break;
                        case 5:
                            m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return DuplicateVoteEvidence;
        })();

        types.LightClientAttackEvidence = (function () {

            /**
             * Properties of a LightClientAttackEvidence.
             * @memberof tendermint.types
             * @interface ILightClientAttackEvidence
             * @property {tendermint.types.ILightBlock|null} [conflicting_block] LightClientAttackEvidence conflicting_block
             * @property {Long|null} [common_height] LightClientAttackEvidence common_height
             * @property {Array.<tendermint.types.IValidator>|null} [byzantine_validators] LightClientAttackEvidence byzantine_validators
             * @property {Long|null} [total_voting_power] LightClientAttackEvidence total_voting_power
             * @property {google.protobuf.ITimestamp|null} [timestamp] LightClientAttackEvidence timestamp
             */

            /**
             * Constructs a new LightClientAttackEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a LightClientAttackEvidence.
             * @implements ILightClientAttackEvidence
             * @constructor
             * @param {tendermint.types.ILightClientAttackEvidence=} [p] Properties to set
             */
            function LightClientAttackEvidence(p) {
                this.byzantine_validators = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * LightClientAttackEvidence conflicting_block.
             * @member {tendermint.types.ILightBlock|null|undefined} conflicting_block
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.conflicting_block = null;

            /**
             * LightClientAttackEvidence common_height.
             * @member {Long} common_height
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.common_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * LightClientAttackEvidence byzantine_validators.
             * @member {Array.<tendermint.types.IValidator>} byzantine_validators
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.byzantine_validators = $util.emptyArray;

            /**
             * LightClientAttackEvidence total_voting_power.
             * @member {Long} total_voting_power
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * LightClientAttackEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified LightClientAttackEvidence message. Does not implicitly {@link tendermint.types.LightClientAttackEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {tendermint.types.ILightClientAttackEvidence} m LightClientAttackEvidence message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightClientAttackEvidence.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.conflicting_block != null && Object.hasOwnProperty.call(m, "conflicting_block"))
                    $root.tendermint.types.LightBlock.encode(m.conflicting_block, w.uint32(10).fork()).ldelim();
                if (m.common_height != null && Object.hasOwnProperty.call(m, "common_height"))
                    w.uint32(16).int64(m.common_height);
                if (m.byzantine_validators != null && m.byzantine_validators.length) {
                    for (var i = 0; i < m.byzantine_validators.length; ++i)
                        $root.tendermint.types.Validator.encode(m.byzantine_validators[i], w.uint32(26).fork()).ldelim();
                }
                if (m.total_voting_power != null && Object.hasOwnProperty.call(m, "total_voting_power"))
                    w.uint32(32).int64(m.total_voting_power);
                if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(42).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a LightClientAttackEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.LightClientAttackEvidence} LightClientAttackEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightClientAttackEvidence.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.LightClientAttackEvidence();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.conflicting_block = $root.tendermint.types.LightBlock.decode(r, r.uint32());
                            break;
                        case 2:
                            m.common_height = r.int64();
                            break;
                        case 3:
                            if (!(m.byzantine_validators && m.byzantine_validators.length))
                                m.byzantine_validators = [];
                            m.byzantine_validators.push($root.tendermint.types.Validator.decode(r, r.uint32()));
                            break;
                        case 4:
                            m.total_voting_power = r.int64();
                            break;
                        case 5:
                            m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return LightClientAttackEvidence;
        })();

        types.EvidenceList = (function () {

            /**
             * Properties of an EvidenceList.
             * @memberof tendermint.types
             * @interface IEvidenceList
             * @property {Array.<tendermint.types.IEvidence>|null} [evidence] EvidenceList evidence
             */

            /**
             * Constructs a new EvidenceList.
             * @memberof tendermint.types
             * @classdesc Represents an EvidenceList.
             * @implements IEvidenceList
             * @constructor
             * @param {tendermint.types.IEvidenceList=} [p] Properties to set
             */
            function EvidenceList(p) {
                this.evidence = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EvidenceList evidence.
             * @member {Array.<tendermint.types.IEvidence>} evidence
             * @memberof tendermint.types.EvidenceList
             * @instance
             */
            EvidenceList.prototype.evidence = $util.emptyArray;

            /**
             * Encodes the specified EvidenceList message. Does not implicitly {@link tendermint.types.EvidenceList.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {tendermint.types.IEvidenceList} m EvidenceList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.evidence != null && m.evidence.length) {
                    for (var i = 0; i < m.evidence.length; ++i)
                        $root.tendermint.types.Evidence.encode(m.evidence[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an EvidenceList message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.EvidenceList} EvidenceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.EvidenceList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.evidence && m.evidence.length))
                                m.evidence = [];
                            m.evidence.push($root.tendermint.types.Evidence.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return EvidenceList;
        })();

        types.Block = (function () {

            /**
             * Properties of a Block.
             * @memberof tendermint.types
             * @interface IBlock
             * @property {tendermint.types.IHeader|null} [header] Block header
             * @property {tendermint.types.IData|null} [data] Block data
             * @property {tendermint.types.IEvidenceList|null} [evidence] Block evidence
             * @property {tendermint.types.ICommit|null} [last_commit] Block last_commit
             */

            /**
             * Constructs a new Block.
             * @memberof tendermint.types
             * @classdesc Represents a Block.
             * @implements IBlock
             * @constructor
             * @param {tendermint.types.IBlock=} [p] Properties to set
             */
            function Block(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Block header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.header = null;

            /**
             * Block data.
             * @member {tendermint.types.IData|null|undefined} data
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.data = null;

            /**
             * Block evidence.
             * @member {tendermint.types.IEvidenceList|null|undefined} evidence
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.evidence = null;

            /**
             * Block last_commit.
             * @member {tendermint.types.ICommit|null|undefined} last_commit
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.last_commit = null;

            /**
             * Encodes the specified Block message. Does not implicitly {@link tendermint.types.Block.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Block
             * @static
             * @param {tendermint.types.IBlock} m Block message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Block.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.tendermint.types.Header.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    $root.tendermint.types.Data.encode(m.data, w.uint32(18).fork()).ldelim();
                if (m.evidence != null && Object.hasOwnProperty.call(m, "evidence"))
                    $root.tendermint.types.EvidenceList.encode(m.evidence, w.uint32(26).fork()).ldelim();
                if (m.last_commit != null && Object.hasOwnProperty.call(m, "last_commit"))
                    $root.tendermint.types.Commit.encode(m.last_commit, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Block message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Block
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Block} Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Block.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Block();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.header = $root.tendermint.types.Header.decode(r, r.uint32());
                            break;
                        case 2:
                            m.data = $root.tendermint.types.Data.decode(r, r.uint32());
                            break;
                        case 3:
                            m.evidence = $root.tendermint.types.EvidenceList.decode(r, r.uint32());
                            break;
                        case 4:
                            m.last_commit = $root.tendermint.types.Commit.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Block;
        })();

        types.ValidatorSet = (function () {

            /**
             * Properties of a ValidatorSet.
             * @memberof tendermint.types
             * @interface IValidatorSet
             * @property {Array.<tendermint.types.IValidator>|null} [validators] ValidatorSet validators
             * @property {tendermint.types.IValidator|null} [proposer] ValidatorSet proposer
             * @property {Long|null} [total_voting_power] ValidatorSet total_voting_power
             */

            /**
             * Constructs a new ValidatorSet.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorSet.
             * @implements IValidatorSet
             * @constructor
             * @param {tendermint.types.IValidatorSet=} [p] Properties to set
             */
            function ValidatorSet(p) {
                this.validators = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ValidatorSet validators.
             * @member {Array.<tendermint.types.IValidator>} validators
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.validators = $util.emptyArray;

            /**
             * ValidatorSet proposer.
             * @member {tendermint.types.IValidator|null|undefined} proposer
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.proposer = null;

            /**
             * ValidatorSet total_voting_power.
             * @member {Long} total_voting_power
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified ValidatorSet message. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} m ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.validators != null && m.validators.length) {
                    for (var i = 0; i < m.validators.length; ++i)
                        $root.tendermint.types.Validator.encode(m.validators[i], w.uint32(10).fork()).ldelim();
                }
                if (m.proposer != null && Object.hasOwnProperty.call(m, "proposer"))
                    $root.tendermint.types.Validator.encode(m.proposer, w.uint32(18).fork()).ldelim();
                if (m.total_voting_power != null && Object.hasOwnProperty.call(m, "total_voting_power"))
                    w.uint32(24).int64(m.total_voting_power);
                return w;
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.ValidatorSet();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.validators && m.validators.length))
                                m.validators = [];
                            m.validators.push($root.tendermint.types.Validator.decode(r, r.uint32()));
                            break;
                        case 2:
                            m.proposer = $root.tendermint.types.Validator.decode(r, r.uint32());
                            break;
                        case 3:
                            m.total_voting_power = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ValidatorSet;
        })();

        types.Validator = (function () {

            /**
             * Properties of a Validator.
             * @memberof tendermint.types
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] Validator pub_key
             * @property {Long|null} [voting_power] Validator voting_power
             * @property {Long|null} [proposer_priority] Validator proposer_priority
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.types
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.types.IValidator=} [p] Properties to set
             */
            function Validator(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.pub_key = null;

            /**
             * Validator voting_power.
             * @member {Long} voting_power
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Validator proposer_priority.
             * @member {Long} proposer_priority
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.proposer_priority = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} m Validator message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                    w.uint32(10).bytes(m.address);
                if (m.pub_key != null && Object.hasOwnProperty.call(m, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(m.pub_key, w.uint32(18).fork()).ldelim();
                if (m.voting_power != null && Object.hasOwnProperty.call(m, "voting_power"))
                    w.uint32(24).int64(m.voting_power);
                if (m.proposer_priority != null && Object.hasOwnProperty.call(m, "proposer_priority"))
                    w.uint32(32).int64(m.proposer_priority);
                return w;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Validator();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.pub_key = $root.tendermint.crypto.PublicKey.decode(r, r.uint32());
                            break;
                        case 3:
                            m.voting_power = r.int64();
                            break;
                        case 4:
                            m.proposer_priority = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Validator;
        })();

        types.SimpleValidator = (function () {

            /**
             * Properties of a SimpleValidator.
             * @memberof tendermint.types
             * @interface ISimpleValidator
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] SimpleValidator pub_key
             * @property {Long|null} [voting_power] SimpleValidator voting_power
             */

            /**
             * Constructs a new SimpleValidator.
             * @memberof tendermint.types
             * @classdesc Represents a SimpleValidator.
             * @implements ISimpleValidator
             * @constructor
             * @param {tendermint.types.ISimpleValidator=} [p] Properties to set
             */
            function SimpleValidator(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SimpleValidator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.pub_key = null;

            /**
             * SimpleValidator voting_power.
             * @member {Long} voting_power
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified SimpleValidator message. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} m SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.pub_key != null && Object.hasOwnProperty.call(m, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(m.pub_key, w.uint32(10).fork()).ldelim();
                if (m.voting_power != null && Object.hasOwnProperty.call(m, "voting_power"))
                    w.uint32(16).int64(m.voting_power);
                return w;
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.SimpleValidator();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.pub_key = $root.tendermint.crypto.PublicKey.decode(r, r.uint32());
                            break;
                        case 2:
                            m.voting_power = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return SimpleValidator;
        })();

        /**
         * BlockIDFlag enum.
         * @name tendermint.types.BlockIDFlag
         * @enum {number}
         * @property {number} BLOCK_ID_FLAG_UNKNOWN=0 BLOCK_ID_FLAG_UNKNOWN value
         * @property {number} BLOCK_ID_FLAG_ABSENT=1 BLOCK_ID_FLAG_ABSENT value
         * @property {number} BLOCK_ID_FLAG_COMMIT=2 BLOCK_ID_FLAG_COMMIT value
         * @property {number} BLOCK_ID_FLAG_NIL=3 BLOCK_ID_FLAG_NIL value
         */
        types.BlockIDFlag = (function () {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BLOCK_ID_FLAG_UNKNOWN"] = 0;
            values[valuesById[1] = "BLOCK_ID_FLAG_ABSENT"] = 1;
            values[valuesById[2] = "BLOCK_ID_FLAG_COMMIT"] = 2;
            values[valuesById[3] = "BLOCK_ID_FLAG_NIL"] = 3;
            return values;
        })();

        /**
         * SignedMsgType enum.
         * @name tendermint.types.SignedMsgType
         * @enum {number}
         * @property {number} SIGNED_MSG_TYPE_UNKNOWN=0 SIGNED_MSG_TYPE_UNKNOWN value
         * @property {number} SIGNED_MSG_TYPE_PREVOTE=1 SIGNED_MSG_TYPE_PREVOTE value
         * @property {number} SIGNED_MSG_TYPE_PRECOMMIT=2 SIGNED_MSG_TYPE_PRECOMMIT value
         * @property {number} SIGNED_MSG_TYPE_PROPOSAL=32 SIGNED_MSG_TYPE_PROPOSAL value
         */
        types.SignedMsgType = (function () {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SIGNED_MSG_TYPE_UNKNOWN"] = 0;
            values[valuesById[1] = "SIGNED_MSG_TYPE_PREVOTE"] = 1;
            values[valuesById[2] = "SIGNED_MSG_TYPE_PRECOMMIT"] = 2;
            values[valuesById[32] = "SIGNED_MSG_TYPE_PROPOSAL"] = 32;
            return values;
        })();

        types.PartSetHeader = (function () {

            /**
             * Properties of a PartSetHeader.
             * @memberof tendermint.types
             * @interface IPartSetHeader
             * @property {number|null} [total] PartSetHeader total
             * @property {Uint8Array|null} [hash] PartSetHeader hash
             */

            /**
             * Constructs a new PartSetHeader.
             * @memberof tendermint.types
             * @classdesc Represents a PartSetHeader.
             * @implements IPartSetHeader
             * @constructor
             * @param {tendermint.types.IPartSetHeader=} [p] Properties to set
             */
            function PartSetHeader(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * PartSetHeader total.
             * @member {number} total
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.total = 0;

            /**
             * PartSetHeader hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified PartSetHeader message. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} m PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.total != null && Object.hasOwnProperty.call(m, "total"))
                    w.uint32(8).uint32(m.total);
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(18).bytes(m.hash);
                return w;
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.PartSetHeader();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.total = r.uint32();
                            break;
                        case 2:
                            m.hash = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return PartSetHeader;
        })();

        types.Part = (function () {

            /**
             * Properties of a Part.
             * @memberof tendermint.types
             * @interface IPart
             * @property {number|null} [index] Part index
             * @property {Uint8Array|null} [bytes] Part bytes
             * @property {tendermint.crypto.IProof|null} [proof] Part proof
             */

            /**
             * Constructs a new Part.
             * @memberof tendermint.types
             * @classdesc Represents a Part.
             * @implements IPart
             * @constructor
             * @param {tendermint.types.IPart=} [p] Properties to set
             */
            function Part(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Part index.
             * @member {number} index
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.index = 0;

            /**
             * Part bytes.
             * @member {Uint8Array} bytes
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.bytes = $util.newBuffer([]);

            /**
             * Part proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.proof = null;

            /**
             * Encodes the specified Part message. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} m Part message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                    w.uint32(8).uint32(m.index);
                if (m.bytes != null && Object.hasOwnProperty.call(m, "bytes"))
                    w.uint32(18).bytes(m.bytes);
                if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                    $root.tendermint.crypto.Proof.encode(m.proof, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Part message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Part();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.index = r.uint32();
                            break;
                        case 2:
                            m.bytes = r.bytes();
                            break;
                        case 3:
                            m.proof = $root.tendermint.crypto.Proof.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Part;
        })();

        types.BlockID = (function () {

            /**
             * Properties of a BlockID.
             * @memberof tendermint.types
             * @interface IBlockID
             * @property {Uint8Array|null} [hash] BlockID hash
             * @property {tendermint.types.IPartSetHeader|null} [part_set_header] BlockID part_set_header
             */

            /**
             * Constructs a new BlockID.
             * @memberof tendermint.types
             * @classdesc Represents a BlockID.
             * @implements IBlockID
             * @constructor
             * @param {tendermint.types.IBlockID=} [p] Properties to set
             */
            function BlockID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * BlockID hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.hash = $util.newBuffer([]);

            /**
             * BlockID part_set_header.
             * @member {tendermint.types.IPartSetHeader|null|undefined} part_set_header
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.part_set_header = null;

            /**
             * Encodes the specified BlockID message. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} m BlockID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(10).bytes(m.hash);
                if (m.part_set_header != null && Object.hasOwnProperty.call(m, "part_set_header"))
                    $root.tendermint.types.PartSetHeader.encode(m.part_set_header, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.BlockID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.hash = r.bytes();
                            break;
                        case 2:
                            m.part_set_header = $root.tendermint.types.PartSetHeader.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return BlockID;
        })();

        types.Header = (function () {

            /**
             * Properties of a Header.
             * @memberof tendermint.types
             * @interface IHeader
             * @property {tendermint.version.IConsensus|null} [version] Header version
             * @property {string|null} [chain_id] Header chain_id
             * @property {Long|null} [height] Header height
             * @property {google.protobuf.ITimestamp|null} [time] Header time
             * @property {tendermint.types.IBlockID|null} [last_block_id] Header last_block_id
             * @property {Uint8Array|null} [last_commit_hash] Header last_commit_hash
             * @property {Uint8Array|null} [data_hash] Header data_hash
             * @property {Uint8Array|null} [validators_hash] Header validators_hash
             * @property {Uint8Array|null} [next_validators_hash] Header next_validators_hash
             * @property {Uint8Array|null} [consensus_hash] Header consensus_hash
             * @property {Uint8Array|null} [app_hash] Header app_hash
             * @property {Uint8Array|null} [last_results_hash] Header last_results_hash
             * @property {Uint8Array|null} [evidence_hash] Header evidence_hash
             * @property {Uint8Array|null} [proposer_address] Header proposer_address
             */

            /**
             * Constructs a new Header.
             * @memberof tendermint.types
             * @classdesc Represents a Header.
             * @implements IHeader
             * @constructor
             * @param {tendermint.types.IHeader=} [p] Properties to set
             */
            function Header(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Header version.
             * @member {tendermint.version.IConsensus|null|undefined} version
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.version = null;

            /**
             * Header chain_id.
             * @member {string} chain_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.chain_id = "";

            /**
             * Header height.
             * @member {Long} height
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Header time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.time = null;

            /**
             * Header last_block_id.
             * @member {tendermint.types.IBlockID|null|undefined} last_block_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_block_id = null;

            /**
             * Header last_commit_hash.
             * @member {Uint8Array} last_commit_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_commit_hash = $util.newBuffer([]);

            /**
             * Header data_hash.
             * @member {Uint8Array} data_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.data_hash = $util.newBuffer([]);

            /**
             * Header validators_hash.
             * @member {Uint8Array} validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.validators_hash = $util.newBuffer([]);

            /**
             * Header next_validators_hash.
             * @member {Uint8Array} next_validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.next_validators_hash = $util.newBuffer([]);

            /**
             * Header consensus_hash.
             * @member {Uint8Array} consensus_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.consensus_hash = $util.newBuffer([]);

            /**
             * Header app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.app_hash = $util.newBuffer([]);

            /**
             * Header last_results_hash.
             * @member {Uint8Array} last_results_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_results_hash = $util.newBuffer([]);

            /**
             * Header evidence_hash.
             * @member {Uint8Array} evidence_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.evidence_hash = $util.newBuffer([]);

            /**
             * Header proposer_address.
             * @member {Uint8Array} proposer_address
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.proposer_address = $util.newBuffer([]);

            /**
             * Encodes the specified Header message. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} m Header message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.version != null && Object.hasOwnProperty.call(m, "version"))
                    $root.tendermint.version.Consensus.encode(m.version, w.uint32(10).fork()).ldelim();
                if (m.chain_id != null && Object.hasOwnProperty.call(m, "chain_id"))
                    w.uint32(18).string(m.chain_id);
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(24).int64(m.height);
                if (m.time != null && Object.hasOwnProperty.call(m, "time"))
                    $root.google.protobuf.Timestamp.encode(m.time, w.uint32(34).fork()).ldelim();
                if (m.last_block_id != null && Object.hasOwnProperty.call(m, "last_block_id"))
                    $root.tendermint.types.BlockID.encode(m.last_block_id, w.uint32(42).fork()).ldelim();
                if (m.last_commit_hash != null && Object.hasOwnProperty.call(m, "last_commit_hash"))
                    w.uint32(50).bytes(m.last_commit_hash);
                if (m.data_hash != null && Object.hasOwnProperty.call(m, "data_hash"))
                    w.uint32(58).bytes(m.data_hash);
                if (m.validators_hash != null && Object.hasOwnProperty.call(m, "validators_hash"))
                    w.uint32(66).bytes(m.validators_hash);
                if (m.next_validators_hash != null && Object.hasOwnProperty.call(m, "next_validators_hash"))
                    w.uint32(74).bytes(m.next_validators_hash);
                if (m.consensus_hash != null && Object.hasOwnProperty.call(m, "consensus_hash"))
                    w.uint32(82).bytes(m.consensus_hash);
                if (m.app_hash != null && Object.hasOwnProperty.call(m, "app_hash"))
                    w.uint32(90).bytes(m.app_hash);
                if (m.last_results_hash != null && Object.hasOwnProperty.call(m, "last_results_hash"))
                    w.uint32(98).bytes(m.last_results_hash);
                if (m.evidence_hash != null && Object.hasOwnProperty.call(m, "evidence_hash"))
                    w.uint32(106).bytes(m.evidence_hash);
                if (m.proposer_address != null && Object.hasOwnProperty.call(m, "proposer_address"))
                    w.uint32(114).bytes(m.proposer_address);
                return w;
            };

            /**
             * Decodes a Header message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Header();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.version = $root.tendermint.version.Consensus.decode(r, r.uint32());
                            break;
                        case 2:
                            m.chain_id = r.string();
                            break;
                        case 3:
                            m.height = r.int64();
                            break;
                        case 4:
                            m.time = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        case 5:
                            m.last_block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                            break;
                        case 6:
                            m.last_commit_hash = r.bytes();
                            break;
                        case 7:
                            m.data_hash = r.bytes();
                            break;
                        case 8:
                            m.validators_hash = r.bytes();
                            break;
                        case 9:
                            m.next_validators_hash = r.bytes();
                            break;
                        case 10:
                            m.consensus_hash = r.bytes();
                            break;
                        case 11:
                            m.app_hash = r.bytes();
                            break;
                        case 12:
                            m.last_results_hash = r.bytes();
                            break;
                        case 13:
                            m.evidence_hash = r.bytes();
                            break;
                        case 14:
                            m.proposer_address = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Header;
        })();

        types.Data = (function () {

            /**
             * Properties of a Data.
             * @memberof tendermint.types
             * @interface IData
             * @property {Array.<Uint8Array>|null} [txs] Data txs
             */

            /**
             * Constructs a new Data.
             * @memberof tendermint.types
             * @classdesc Represents a Data.
             * @implements IData
             * @constructor
             * @param {tendermint.types.IData=} [p] Properties to set
             */
            function Data(p) {
                this.txs = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Data txs.
             * @member {Array.<Uint8Array>} txs
             * @memberof tendermint.types.Data
             * @instance
             */
            Data.prototype.txs = $util.emptyArray;

            /**
             * Encodes the specified Data message. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} m Data message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.txs != null && m.txs.length) {
                    for (var i = 0; i < m.txs.length; ++i)
                        w.uint32(10).bytes(m.txs[i]);
                }
                return w;
            };

            /**
             * Decodes a Data message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Data();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.txs && m.txs.length))
                                m.txs = [];
                            m.txs.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Data;
        })();

        types.Vote = (function () {

            /**
             * Properties of a Vote.
             * @memberof tendermint.types
             * @interface IVote
             * @property {tendermint.types.SignedMsgType|null} [type] Vote type
             * @property {Long|null} [height] Vote height
             * @property {number|null} [round] Vote round
             * @property {tendermint.types.IBlockID|null} [block_id] Vote block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Vote timestamp
             * @property {Uint8Array|null} [validator_address] Vote validator_address
             * @property {number|null} [validator_index] Vote validator_index
             * @property {Uint8Array|null} [signature] Vote signature
             */

            /**
             * Constructs a new Vote.
             * @memberof tendermint.types
             * @classdesc Represents a Vote.
             * @implements IVote
             * @constructor
             * @param {tendermint.types.IVote=} [p] Properties to set
             */
            function Vote(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Vote type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.type = 0;

            /**
             * Vote height.
             * @member {Long} height
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Vote round.
             * @member {number} round
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.round = 0;

            /**
             * Vote block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.block_id = null;

            /**
             * Vote timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.timestamp = null;

            /**
             * Vote validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_address = $util.newBuffer([]);

            /**
             * Vote validator_index.
             * @member {number} validator_index
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_index = 0;

            /**
             * Vote signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Vote message. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} m Vote message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(8).int32(m.type);
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(16).int64(m.height);
                if (m.round != null && Object.hasOwnProperty.call(m, "round"))
                    w.uint32(24).int32(m.round);
                if (m.block_id != null && Object.hasOwnProperty.call(m, "block_id"))
                    $root.tendermint.types.BlockID.encode(m.block_id, w.uint32(34).fork()).ldelim();
                if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(42).fork()).ldelim();
                if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                    w.uint32(50).bytes(m.validator_address);
                if (m.validator_index != null && Object.hasOwnProperty.call(m, "validator_index"))
                    w.uint32(56).int32(m.validator_index);
                if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
                    w.uint32(66).bytes(m.signature);
                return w;
            };

            /**
             * Decodes a Vote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Vote();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        case 2:
                            m.height = r.int64();
                            break;
                        case 3:
                            m.round = r.int32();
                            break;
                        case 4:
                            m.block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                            break;
                        case 5:
                            m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        case 6:
                            m.validator_address = r.bytes();
                            break;
                        case 7:
                            m.validator_index = r.int32();
                            break;
                        case 8:
                            m.signature = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Vote;
        })();

        types.Commit = (function () {

            /**
             * Properties of a Commit.
             * @memberof tendermint.types
             * @interface ICommit
             * @property {Long|null} [height] Commit height
             * @property {number|null} [round] Commit round
             * @property {tendermint.types.IBlockID|null} [block_id] Commit block_id
             * @property {Array.<tendermint.types.ICommitSig>|null} [signatures] Commit signatures
             */

            /**
             * Constructs a new Commit.
             * @memberof tendermint.types
             * @classdesc Represents a Commit.
             * @implements ICommit
             * @constructor
             * @param {tendermint.types.ICommit=} [p] Properties to set
             */
            function Commit(p) {
                this.signatures = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Commit height.
             * @member {Long} height
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Commit round.
             * @member {number} round
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.round = 0;

            /**
             * Commit block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.block_id = null;

            /**
             * Commit signatures.
             * @member {Array.<tendermint.types.ICommitSig>} signatures
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.signatures = $util.emptyArray;

            /**
             * Encodes the specified Commit message. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} m Commit message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(8).int64(m.height);
                if (m.round != null && Object.hasOwnProperty.call(m, "round"))
                    w.uint32(16).int32(m.round);
                if (m.block_id != null && Object.hasOwnProperty.call(m, "block_id"))
                    $root.tendermint.types.BlockID.encode(m.block_id, w.uint32(26).fork()).ldelim();
                if (m.signatures != null && m.signatures.length) {
                    for (var i = 0; i < m.signatures.length; ++i)
                        $root.tendermint.types.CommitSig.encode(m.signatures[i], w.uint32(34).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a Commit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Commit();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.height = r.int64();
                            break;
                        case 2:
                            m.round = r.int32();
                            break;
                        case 3:
                            m.block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                            break;
                        case 4:
                            if (!(m.signatures && m.signatures.length))
                                m.signatures = [];
                            m.signatures.push($root.tendermint.types.CommitSig.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Commit;
        })();

        types.CommitSig = (function () {

            /**
             * Properties of a CommitSig.
             * @memberof tendermint.types
             * @interface ICommitSig
             * @property {tendermint.types.BlockIDFlag|null} [block_id_flag] CommitSig block_id_flag
             * @property {Uint8Array|null} [validator_address] CommitSig validator_address
             * @property {google.protobuf.ITimestamp|null} [timestamp] CommitSig timestamp
             * @property {Uint8Array|null} [signature] CommitSig signature
             */

            /**
             * Constructs a new CommitSig.
             * @memberof tendermint.types
             * @classdesc Represents a CommitSig.
             * @implements ICommitSig
             * @constructor
             * @param {tendermint.types.ICommitSig=} [p] Properties to set
             */
            function CommitSig(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CommitSig block_id_flag.
             * @member {tendermint.types.BlockIDFlag} block_id_flag
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.block_id_flag = 0;

            /**
             * CommitSig validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.validator_address = $util.newBuffer([]);

            /**
             * CommitSig timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.timestamp = null;

            /**
             * CommitSig signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified CommitSig message. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} m CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.block_id_flag != null && Object.hasOwnProperty.call(m, "block_id_flag"))
                    w.uint32(8).int32(m.block_id_flag);
                if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                    w.uint32(18).bytes(m.validator_address);
                if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(26).fork()).ldelim();
                if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
                    w.uint32(34).bytes(m.signature);
                return w;
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.CommitSig();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.block_id_flag = r.int32();
                            break;
                        case 2:
                            m.validator_address = r.bytes();
                            break;
                        case 3:
                            m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        case 4:
                            m.signature = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return CommitSig;
        })();

        types.Proposal = (function () {

            /**
             * Properties of a Proposal.
             * @memberof tendermint.types
             * @interface IProposal
             * @property {tendermint.types.SignedMsgType|null} [type] Proposal type
             * @property {Long|null} [height] Proposal height
             * @property {number|null} [round] Proposal round
             * @property {number|null} [pol_round] Proposal pol_round
             * @property {tendermint.types.IBlockID|null} [block_id] Proposal block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Proposal timestamp
             * @property {Uint8Array|null} [signature] Proposal signature
             */

            /**
             * Constructs a new Proposal.
             * @memberof tendermint.types
             * @classdesc Represents a Proposal.
             * @implements IProposal
             * @constructor
             * @param {tendermint.types.IProposal=} [p] Properties to set
             */
            function Proposal(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Proposal type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.type = 0;

            /**
             * Proposal height.
             * @member {Long} height
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Proposal round.
             * @member {number} round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.round = 0;

            /**
             * Proposal pol_round.
             * @member {number} pol_round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.pol_round = 0;

            /**
             * Proposal block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.block_id = null;

            /**
             * Proposal timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.timestamp = null;

            /**
             * Proposal signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Proposal message. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} m Proposal message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                    w.uint32(8).int32(m.type);
                if (m.height != null && Object.hasOwnProperty.call(m, "height"))
                    w.uint32(16).int64(m.height);
                if (m.round != null && Object.hasOwnProperty.call(m, "round"))
                    w.uint32(24).int32(m.round);
                if (m.pol_round != null && Object.hasOwnProperty.call(m, "pol_round"))
                    w.uint32(32).int32(m.pol_round);
                if (m.block_id != null && Object.hasOwnProperty.call(m, "block_id"))
                    $root.tendermint.types.BlockID.encode(m.block_id, w.uint32(42).fork()).ldelim();
                if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(50).fork()).ldelim();
                if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
                    w.uint32(58).bytes(m.signature);
                return w;
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.Proposal();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        case 2:
                            m.height = r.int64();
                            break;
                        case 3:
                            m.round = r.int32();
                            break;
                        case 4:
                            m.pol_round = r.int32();
                            break;
                        case 5:
                            m.block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                            break;
                        case 6:
                            m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
                            break;
                        case 7:
                            m.signature = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Proposal;
        })();

        types.SignedHeader = (function () {

            /**
             * Properties of a SignedHeader.
             * @memberof tendermint.types
             * @interface ISignedHeader
             * @property {tendermint.types.IHeader|null} [header] SignedHeader header
             * @property {tendermint.types.ICommit|null} [commit] SignedHeader commit
             */

            /**
             * Constructs a new SignedHeader.
             * @memberof tendermint.types
             * @classdesc Represents a SignedHeader.
             * @implements ISignedHeader
             * @constructor
             * @param {tendermint.types.ISignedHeader=} [p] Properties to set
             */
            function SignedHeader(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SignedHeader header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.header = null;

            /**
             * SignedHeader commit.
             * @member {tendermint.types.ICommit|null|undefined} commit
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.commit = null;

            /**
             * Encodes the specified SignedHeader message. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} m SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.tendermint.types.Header.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.commit != null && Object.hasOwnProperty.call(m, "commit"))
                    $root.tendermint.types.Commit.encode(m.commit, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.SignedHeader();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.header = $root.tendermint.types.Header.decode(r, r.uint32());
                            break;
                        case 2:
                            m.commit = $root.tendermint.types.Commit.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return SignedHeader;
        })();

        types.LightBlock = (function () {

            /**
             * Properties of a LightBlock.
             * @memberof tendermint.types
             * @interface ILightBlock
             * @property {tendermint.types.ISignedHeader|null} [signed_header] LightBlock signed_header
             * @property {tendermint.types.IValidatorSet|null} [validator_set] LightBlock validator_set
             */

            /**
             * Constructs a new LightBlock.
             * @memberof tendermint.types
             * @classdesc Represents a LightBlock.
             * @implements ILightBlock
             * @constructor
             * @param {tendermint.types.ILightBlock=} [p] Properties to set
             */
            function LightBlock(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * LightBlock signed_header.
             * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
             * @memberof tendermint.types.LightBlock
             * @instance
             */
            LightBlock.prototype.signed_header = null;

            /**
             * LightBlock validator_set.
             * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
             * @memberof tendermint.types.LightBlock
             * @instance
             */
            LightBlock.prototype.validator_set = null;

            /**
             * Encodes the specified LightBlock message. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.ILightBlock} m LightBlock message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlock.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.signed_header != null && Object.hasOwnProperty.call(m, "signed_header"))
                    $root.tendermint.types.SignedHeader.encode(m.signed_header, w.uint32(10).fork()).ldelim();
                if (m.validator_set != null && Object.hasOwnProperty.call(m, "validator_set"))
                    $root.tendermint.types.ValidatorSet.encode(m.validator_set, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a LightBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.LightBlock} LightBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlock.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.LightBlock();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.signed_header = $root.tendermint.types.SignedHeader.decode(r, r.uint32());
                            break;
                        case 2:
                            m.validator_set = $root.tendermint.types.ValidatorSet.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return LightBlock;
        })();

        types.BlockMeta = (function () {

            /**
             * Properties of a BlockMeta.
             * @memberof tendermint.types
             * @interface IBlockMeta
             * @property {tendermint.types.IBlockID|null} [block_id] BlockMeta block_id
             * @property {Long|null} [block_size] BlockMeta block_size
             * @property {tendermint.types.IHeader|null} [header] BlockMeta header
             * @property {Long|null} [num_txs] BlockMeta num_txs
             */

            /**
             * Constructs a new BlockMeta.
             * @memberof tendermint.types
             * @classdesc Represents a BlockMeta.
             * @implements IBlockMeta
             * @constructor
             * @param {tendermint.types.IBlockMeta=} [p] Properties to set
             */
            function BlockMeta(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * BlockMeta block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_id = null;

            /**
             * BlockMeta block_size.
             * @member {Long} block_size
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_size = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * BlockMeta header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.header = null;

            /**
             * BlockMeta num_txs.
             * @member {Long} num_txs
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.num_txs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

            /**
             * Encodes the specified BlockMeta message. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} m BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.block_id != null && Object.hasOwnProperty.call(m, "block_id"))
                    $root.tendermint.types.BlockID.encode(m.block_id, w.uint32(10).fork()).ldelim();
                if (m.block_size != null && Object.hasOwnProperty.call(m, "block_size"))
                    w.uint32(16).int64(m.block_size);
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.tendermint.types.Header.encode(m.header, w.uint32(26).fork()).ldelim();
                if (m.num_txs != null && Object.hasOwnProperty.call(m, "num_txs"))
                    w.uint32(32).int64(m.num_txs);
                return w;
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.BlockMeta();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.block_id = $root.tendermint.types.BlockID.decode(r, r.uint32());
                            break;
                        case 2:
                            m.block_size = r.int64();
                            break;
                        case 3:
                            m.header = $root.tendermint.types.Header.decode(r, r.uint32());
                            break;
                        case 4:
                            m.num_txs = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return BlockMeta;
        })();

        types.TxProof = (function () {

            /**
             * Properties of a TxProof.
             * @memberof tendermint.types
             * @interface ITxProof
             * @property {Uint8Array|null} [root_hash] TxProof root_hash
             * @property {Uint8Array|null} [data] TxProof data
             * @property {tendermint.crypto.IProof|null} [proof] TxProof proof
             */

            /**
             * Constructs a new TxProof.
             * @memberof tendermint.types
             * @classdesc Represents a TxProof.
             * @implements ITxProof
             * @constructor
             * @param {tendermint.types.ITxProof=} [p] Properties to set
             */
            function TxProof(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TxProof root_hash.
             * @member {Uint8Array} root_hash
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.root_hash = $util.newBuffer([]);

            /**
             * TxProof data.
             * @member {Uint8Array} data
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.data = $util.newBuffer([]);

            /**
             * TxProof proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.proof = null;

            /**
             * Encodes the specified TxProof message. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} m TxProof message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.root_hash != null && Object.hasOwnProperty.call(m, "root_hash"))
                    w.uint32(10).bytes(m.root_hash);
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(18).bytes(m.data);
                if (m.proof != null && Object.hasOwnProperty.call(m, "proof"))
                    $root.tendermint.crypto.Proof.encode(m.proof, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.types.TxProof();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.root_hash = r.bytes();
                            break;
                        case 2:
                            m.data = r.bytes();
                            break;
                        case 3:
                            m.proof = $root.tendermint.crypto.Proof.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return TxProof;
        })();

        return types;
    })();

    tendermint.version = (function () {

        /**
         * Namespace version.
         * @memberof tendermint
         * @namespace
         */
        const version = {};

        version.App = (function () {

            /**
             * Properties of an App.
             * @memberof tendermint.version
             * @interface IApp
             * @property {Long|null} [protocol] App protocol
             * @property {string|null} [software] App software
             */

            /**
             * Constructs a new App.
             * @memberof tendermint.version
             * @classdesc Represents an App.
             * @implements IApp
             * @constructor
             * @param {tendermint.version.IApp=} [p] Properties to set
             */
            function App(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * App protocol.
             * @member {Long} protocol
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.protocol = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * App software.
             * @member {string} software
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.software = "";

            /**
             * Encodes the specified App message. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} m App message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.protocol != null && Object.hasOwnProperty.call(m, "protocol"))
                    w.uint32(8).uint64(m.protocol);
                if (m.software != null && Object.hasOwnProperty.call(m, "software"))
                    w.uint32(18).string(m.software);
                return w;
            };

            /**
             * Decodes an App message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.version.App();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.protocol = r.uint64();
                            break;
                        case 2:
                            m.software = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return App;
        })();

        version.Consensus = (function () {

            /**
             * Properties of a Consensus.
             * @memberof tendermint.version
             * @interface IConsensus
             * @property {Long|null} [block] Consensus block
             * @property {Long|null} [app] Consensus app
             */

            /**
             * Constructs a new Consensus.
             * @memberof tendermint.version
             * @classdesc Represents a Consensus.
             * @implements IConsensus
             * @constructor
             * @param {tendermint.version.IConsensus=} [p] Properties to set
             */
            function Consensus(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Consensus block.
             * @member {Long} block
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.block = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * Consensus app.
             * @member {Long} app
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.app = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

            /**
             * Encodes the specified Consensus message. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} m Consensus message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.block != null && Object.hasOwnProperty.call(m, "block"))
                    w.uint32(8).uint64(m.block);
                if (m.app != null && Object.hasOwnProperty.call(m, "app"))
                    w.uint32(16).uint64(m.app);
                return w;
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.tendermint.version.Consensus();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.block = r.uint64();
                            break;
                        case 2:
                            m.app = r.uint64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Consensus;
        })();

        return version;
    })();

    return tendermint;
})();

export const oraichain = $root.oraichain = (() => {

    /**
     * Namespace oraichain.
     * @exports oraichain
     * @namespace
     */
    const oraichain = {};

    oraichain.orai = (function () {

        /**
         * Namespace orai.
         * @memberof oraichain
         * @namespace
         */
        const orai = {};

        orai.aioracle = (function () {

            /**
             * Namespace aioracle.
             * @memberof oraichain.orai
             * @namespace
             */
            const aioracle = {};

            aioracle.AIOracle = (function () {

                /**
                 * Properties of a AIOracle.
                 * @memberof oraichain.orai.aioracle
                 * @interface IAIOracle
                 * @property {string|null} [request_id] AIOracle request_id
                 * @property {Uint8Array|null} [contract] AIOracle contract
                 * @property {Uint8Array|null} [creator] AIOracle creator
                 * @property {Array.<Uint8Array>|null} [validators] AIOracle validators
                 * @property {Long|null} [block_height] AIOracle block_height
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fees] AIOracle fees
                 * @property {Uint8Array|null} [input] AIOracle input
                 * @property {boolean|null} [test_only] AIOracle test_only
                 */

                /**
                 * Constructs a new AIOracle.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a AIOracle.
                 * @implements IAIOracle
                 * @constructor
                 * @param {oraichain.orai.aioracle.IAIOracle=} [p] Properties to set
                 */
                function AIOracle(p) {
                    this.validators = [];
                    this.fees = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AIOracle request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.request_id = "";

                /**
                 * AIOracle contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.contract = $util.newBuffer([]);

                /**
                 * AIOracle creator.
                 * @member {Uint8Array} creator
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.creator = $util.newBuffer([]);

                /**
                 * AIOracle validators.
                 * @member {Array.<Uint8Array>} validators
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.validators = $util.emptyArray;

                /**
                 * AIOracle block_height.
                 * @member {Long} block_height
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * AIOracle fees.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fees
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.fees = $util.emptyArray;

                /**
                 * AIOracle input.
                 * @member {Uint8Array} input
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.input = $util.newBuffer([]);

                /**
                 * AIOracle test_only.
                 * @member {boolean} test_only
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @instance
                 */
                AIOracle.prototype.test_only = false;

                /**
                 * Encodes the specified AIOracle message. Does not implicitly {@link oraichain.orai.aioracle.AIOracle.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @static
                 * @param {oraichain.orai.aioracle.IAIOracle} m AIOracle message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AIOracle.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(18).bytes(m.contract);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(26).bytes(m.creator);
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            w.uint32(34).bytes(m.validators[i]);
                    }
                    if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                        w.uint32(40).int64(m.block_height);
                    if (m.fees != null && m.fees.length) {
                        for (var i = 0; i < m.fees.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.fees[i], w.uint32(50).fork()).ldelim();
                    }
                    if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                        w.uint32(58).bytes(m.input);
                    if (m.test_only != null && Object.hasOwnProperty.call(m, "test_only"))
                        w.uint32(64).bool(m.test_only);
                    return w;
                };

                /**
                 * Decodes a AIOracle message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.AIOracle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.AIOracle} AIOracle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AIOracle.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.AIOracle();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            case 2:
                                m.contract = r.bytes();
                                break;
                            case 3:
                                m.creator = r.bytes();
                                break;
                            case 4:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push(r.bytes());
                                break;
                            case 5:
                                m.block_height = r.int64();
                                break;
                            case 6:
                                if (!(m.fees && m.fees.length))
                                    m.fees = [];
                                m.fees.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 7:
                                m.input = r.bytes();
                                break;
                            case 8:
                                m.test_only = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return AIOracle;
            })();

            aioracle.EntryPoint = (function () {

                /**
                 * Properties of an EntryPoint.
                 * @memberof oraichain.orai.aioracle
                 * @interface IEntryPoint
                 * @property {string|null} [url] EntryPoint url
                 * @property {Array.<string>|null} [headers] EntryPoint headers
                 * @property {Uint8Array|null} [owner] EntryPoint owner
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [provider_fees] EntryPoint provider_fees
                 */

                /**
                 * Constructs a new EntryPoint.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents an EntryPoint.
                 * @implements IEntryPoint
                 * @constructor
                 * @param {oraichain.orai.aioracle.IEntryPoint=} [p] Properties to set
                 */
                function EntryPoint(p) {
                    this.headers = [];
                    this.provider_fees = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * EntryPoint url.
                 * @member {string} url
                 * @memberof oraichain.orai.aioracle.EntryPoint
                 * @instance
                 */
                EntryPoint.prototype.url = "";

                /**
                 * EntryPoint headers.
                 * @member {Array.<string>} headers
                 * @memberof oraichain.orai.aioracle.EntryPoint
                 * @instance
                 */
                EntryPoint.prototype.headers = $util.emptyArray;

                /**
                 * EntryPoint owner.
                 * @member {Uint8Array} owner
                 * @memberof oraichain.orai.aioracle.EntryPoint
                 * @instance
                 */
                EntryPoint.prototype.owner = $util.newBuffer([]);

                /**
                 * EntryPoint provider_fees.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} provider_fees
                 * @memberof oraichain.orai.aioracle.EntryPoint
                 * @instance
                 */
                EntryPoint.prototype.provider_fees = $util.emptyArray;

                /**
                 * Encodes the specified EntryPoint message. Does not implicitly {@link oraichain.orai.aioracle.EntryPoint.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.EntryPoint
                 * @static
                 * @param {oraichain.orai.aioracle.IEntryPoint} m EntryPoint message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EntryPoint.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.url != null && Object.hasOwnProperty.call(m, "url"))
                        w.uint32(10).string(m.url);
                    if (m.headers != null && m.headers.length) {
                        for (var i = 0; i < m.headers.length; ++i)
                            w.uint32(18).string(m.headers[i]);
                    }
                    if (m.owner != null && Object.hasOwnProperty.call(m, "owner"))
                        w.uint32(26).bytes(m.owner);
                    if (m.provider_fees != null && m.provider_fees.length) {
                        for (var i = 0; i < m.provider_fees.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.provider_fees[i], w.uint32(34).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes an EntryPoint message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.EntryPoint
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.EntryPoint} EntryPoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EntryPoint.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.EntryPoint();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.url = r.string();
                                break;
                            case 2:
                                if (!(m.headers && m.headers.length))
                                    m.headers = [];
                                m.headers.push(r.string());
                                break;
                            case 3:
                                m.owner = r.bytes();
                                break;
                            case 4:
                                if (!(m.provider_fees && m.provider_fees.length))
                                    m.provider_fees = [];
                                m.provider_fees.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return EntryPoint;
            })();

            aioracle.Result = (function () {

                /**
                 * Properties of a Result.
                 * @memberof oraichain.orai.aioracle
                 * @interface IResult
                 * @property {oraichain.orai.aioracle.IEntryPoint|null} [entry_point] Result entry_point
                 * @property {Uint8Array|null} [result] Result result
                 * @property {string|null} [status] Result status
                 */

                /**
                 * Constructs a new Result.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Result.
                 * @implements IResult
                 * @constructor
                 * @param {oraichain.orai.aioracle.IResult=} [p] Properties to set
                 */
                function Result(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Result entry_point.
                 * @member {oraichain.orai.aioracle.IEntryPoint|null|undefined} entry_point
                 * @memberof oraichain.orai.aioracle.Result
                 * @instance
                 */
                Result.prototype.entry_point = null;

                /**
                 * Result result.
                 * @member {Uint8Array} result
                 * @memberof oraichain.orai.aioracle.Result
                 * @instance
                 */
                Result.prototype.result = $util.newBuffer([]);

                /**
                 * Result status.
                 * @member {string} status
                 * @memberof oraichain.orai.aioracle.Result
                 * @instance
                 */
                Result.prototype.status = "";

                /**
                 * Encodes the specified Result message. Does not implicitly {@link oraichain.orai.aioracle.Result.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Result
                 * @static
                 * @param {oraichain.orai.aioracle.IResult} m Result message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Result.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.entry_point != null && Object.hasOwnProperty.call(m, "entry_point"))
                        $root.oraichain.orai.aioracle.EntryPoint.encode(m.entry_point, w.uint32(10).fork()).ldelim();
                    if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                        w.uint32(18).bytes(m.result);
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(26).string(m.status);
                    return w;
                };

                /**
                 * Decodes a Result message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Result
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Result} Result
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Result.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Result();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.entry_point = $root.oraichain.orai.aioracle.EntryPoint.decode(r, r.uint32());
                                break;
                            case 2:
                                m.result = r.bytes();
                                break;
                            case 3:
                                m.status = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Result;
            })();

            aioracle.BaseReport = (function () {

                /**
                 * Properties of a BaseReport.
                 * @memberof oraichain.orai.aioracle
                 * @interface IBaseReport
                 * @property {string|null} [request_id] BaseReport request_id
                 * @property {Long|null} [block_height] BaseReport block_height
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fees] BaseReport fees
                 * @property {Uint8Array|null} [validator_address] BaseReport validator_address
                 */

                /**
                 * Constructs a new BaseReport.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a BaseReport.
                 * @implements IBaseReport
                 * @constructor
                 * @param {oraichain.orai.aioracle.IBaseReport=} [p] Properties to set
                 */
                function BaseReport(p) {
                    this.fees = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BaseReport request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.BaseReport
                 * @instance
                 */
                BaseReport.prototype.request_id = "";

                /**
                 * BaseReport block_height.
                 * @member {Long} block_height
                 * @memberof oraichain.orai.aioracle.BaseReport
                 * @instance
                 */
                BaseReport.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * BaseReport fees.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fees
                 * @memberof oraichain.orai.aioracle.BaseReport
                 * @instance
                 */
                BaseReport.prototype.fees = $util.emptyArray;

                /**
                 * BaseReport validator_address.
                 * @member {Uint8Array} validator_address
                 * @memberof oraichain.orai.aioracle.BaseReport
                 * @instance
                 */
                BaseReport.prototype.validator_address = $util.newBuffer([]);

                /**
                 * Encodes the specified BaseReport message. Does not implicitly {@link oraichain.orai.aioracle.BaseReport.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.BaseReport
                 * @static
                 * @param {oraichain.orai.aioracle.IBaseReport} m BaseReport message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BaseReport.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                        w.uint32(24).int64(m.block_height);
                    if (m.fees != null && m.fees.length) {
                        for (var i = 0; i < m.fees.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.fees[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.validator_address != null && Object.hasOwnProperty.call(m, "validator_address"))
                        w.uint32(42).bytes(m.validator_address);
                    return w;
                };

                /**
                 * Decodes a BaseReport message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.BaseReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.BaseReport} BaseReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BaseReport.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.BaseReport();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            case 3:
                                m.block_height = r.int64();
                                break;
                            case 4:
                                if (!(m.fees && m.fees.length))
                                    m.fees = [];
                                m.fees.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 5:
                                m.validator_address = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BaseReport;
            })();

            aioracle.Report = (function () {

                /**
                 * Properties of a Report.
                 * @memberof oraichain.orai.aioracle
                 * @interface IReport
                 * @property {oraichain.orai.aioracle.IBaseReport|null} [base_report] Report base_report
                 * @property {Array.<oraichain.orai.aioracle.IResult>|null} [data_source_results] Report data_source_results
                 * @property {string|null} [result_status] Report result_status
                 * @property {Uint8Array|null} [aggregated_result] Report aggregated_result
                 */

                /**
                 * Constructs a new Report.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Report.
                 * @implements IReport
                 * @constructor
                 * @param {oraichain.orai.aioracle.IReport=} [p] Properties to set
                 */
                function Report(p) {
                    this.data_source_results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Report base_report.
                 * @member {oraichain.orai.aioracle.IBaseReport|null|undefined} base_report
                 * @memberof oraichain.orai.aioracle.Report
                 * @instance
                 */
                Report.prototype.base_report = null;

                /**
                 * Report data_source_results.
                 * @member {Array.<oraichain.orai.aioracle.IResult>} data_source_results
                 * @memberof oraichain.orai.aioracle.Report
                 * @instance
                 */
                Report.prototype.data_source_results = $util.emptyArray;

                /**
                 * Report result_status.
                 * @member {string} result_status
                 * @memberof oraichain.orai.aioracle.Report
                 * @instance
                 */
                Report.prototype.result_status = "";

                /**
                 * Report aggregated_result.
                 * @member {Uint8Array} aggregated_result
                 * @memberof oraichain.orai.aioracle.Report
                 * @instance
                 */
                Report.prototype.aggregated_result = $util.newBuffer([]);

                /**
                 * Encodes the specified Report message. Does not implicitly {@link oraichain.orai.aioracle.Report.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Report
                 * @static
                 * @param {oraichain.orai.aioracle.IReport} m Report message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Report.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_report != null && Object.hasOwnProperty.call(m, "base_report"))
                        $root.oraichain.orai.aioracle.BaseReport.encode(m.base_report, w.uint32(10).fork()).ldelim();
                    if (m.data_source_results != null && m.data_source_results.length) {
                        for (var i = 0; i < m.data_source_results.length; ++i)
                            $root.oraichain.orai.aioracle.Result.encode(m.data_source_results[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.result_status != null && Object.hasOwnProperty.call(m, "result_status"))
                        w.uint32(34).string(m.result_status);
                    if (m.aggregated_result != null && Object.hasOwnProperty.call(m, "aggregated_result"))
                        w.uint32(42).bytes(m.aggregated_result);
                    return w;
                };

                /**
                 * Decodes a Report message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Report
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Report} Report
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Report.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Report();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_report = $root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.data_source_results && m.data_source_results.length))
                                    m.data_source_results = [];
                                m.data_source_results.push($root.oraichain.orai.aioracle.Result.decode(r, r.uint32()));
                                break;
                            case 4:
                                m.result_status = r.string();
                                break;
                            case 5:
                                m.aggregated_result = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Report;
            })();

            aioracle.TestCaseReport = (function () {

                /**
                 * Properties of a TestCaseReport.
                 * @memberof oraichain.orai.aioracle
                 * @interface ITestCaseReport
                 * @property {oraichain.orai.aioracle.IBaseReport|null} [base_report] TestCaseReport base_report
                 * @property {Array.<oraichain.orai.aioracle.IResultWithTestCase>|null} [results_with_test_case] TestCaseReport results_with_test_case
                 */

                /**
                 * Constructs a new TestCaseReport.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a TestCaseReport.
                 * @implements ITestCaseReport
                 * @constructor
                 * @param {oraichain.orai.aioracle.ITestCaseReport=} [p] Properties to set
                 */
                function TestCaseReport(p) {
                    this.results_with_test_case = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * TestCaseReport base_report.
                 * @member {oraichain.orai.aioracle.IBaseReport|null|undefined} base_report
                 * @memberof oraichain.orai.aioracle.TestCaseReport
                 * @instance
                 */
                TestCaseReport.prototype.base_report = null;

                /**
                 * TestCaseReport results_with_test_case.
                 * @member {Array.<oraichain.orai.aioracle.IResultWithTestCase>} results_with_test_case
                 * @memberof oraichain.orai.aioracle.TestCaseReport
                 * @instance
                 */
                TestCaseReport.prototype.results_with_test_case = $util.emptyArray;

                /**
                 * Encodes the specified TestCaseReport message. Does not implicitly {@link oraichain.orai.aioracle.TestCaseReport.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.TestCaseReport
                 * @static
                 * @param {oraichain.orai.aioracle.ITestCaseReport} m TestCaseReport message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TestCaseReport.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_report != null && Object.hasOwnProperty.call(m, "base_report"))
                        $root.oraichain.orai.aioracle.BaseReport.encode(m.base_report, w.uint32(10).fork()).ldelim();
                    if (m.results_with_test_case != null && m.results_with_test_case.length) {
                        for (var i = 0; i < m.results_with_test_case.length; ++i)
                            $root.oraichain.orai.aioracle.ResultWithTestCase.encode(m.results_with_test_case[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a TestCaseReport message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.TestCaseReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.TestCaseReport} TestCaseReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TestCaseReport.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.TestCaseReport();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_report = $root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.results_with_test_case && m.results_with_test_case.length))
                                    m.results_with_test_case = [];
                                m.results_with_test_case.push($root.oraichain.orai.aioracle.ResultWithTestCase.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return TestCaseReport;
            })();

            aioracle.AIOracleResult = (function () {

                /**
                 * Properties of a AIOracleResult.
                 * @memberof oraichain.orai.aioracle
                 * @interface IAIOracleResult
                 * @property {string|null} [request_id] AIOracleResult request_id
                 * @property {Array.<oraichain.orai.aioracle.IValResult>|null} [results] AIOracleResult results
                 * @property {string|null} [status] AIOracleResult status
                 */

                /**
                 * Constructs a new AIOracleResult.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a AIOracleResult.
                 * @implements IAIOracleResult
                 * @constructor
                 * @param {oraichain.orai.aioracle.IAIOracleResult=} [p] Properties to set
                 */
                function AIOracleResult(p) {
                    this.results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AIOracleResult request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.AIOracleResult
                 * @instance
                 */
                AIOracleResult.prototype.request_id = "";

                /**
                 * AIOracleResult results.
                 * @member {Array.<oraichain.orai.aioracle.IValResult>} results
                 * @memberof oraichain.orai.aioracle.AIOracleResult
                 * @instance
                 */
                AIOracleResult.prototype.results = $util.emptyArray;

                /**
                 * AIOracleResult status.
                 * @member {string} status
                 * @memberof oraichain.orai.aioracle.AIOracleResult
                 * @instance
                 */
                AIOracleResult.prototype.status = "";

                /**
                 * Encodes the specified AIOracleResult message. Does not implicitly {@link oraichain.orai.aioracle.AIOracleResult.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.AIOracleResult
                 * @static
                 * @param {oraichain.orai.aioracle.IAIOracleResult} m AIOracleResult message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AIOracleResult.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    if (m.results != null && m.results.length) {
                        for (var i = 0; i < m.results.length; ++i)
                            $root.oraichain.orai.aioracle.ValResult.encode(m.results[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(26).string(m.status);
                    return w;
                };

                /**
                 * Decodes a AIOracleResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.AIOracleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.AIOracleResult} AIOracleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AIOracleResult.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.AIOracleResult();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            case 2:
                                if (!(m.results && m.results.length))
                                    m.results = [];
                                m.results.push($root.oraichain.orai.aioracle.ValResult.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.status = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return AIOracleResult;
            })();

            aioracle.BaseReward = (function () {

                /**
                 * Properties of a BaseReward.
                 * @memberof oraichain.orai.aioracle
                 * @interface IBaseReward
                 * @property {Array.<oraichain.orai.aioracle.IValidator>|null} [validators] BaseReward validators
                 * @property {Long|null} [block_height] BaseReward block_height
                 * @property {Long|null} [total_power] BaseReward total_power
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [provider_fees] BaseReward provider_fees
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [validator_fees] BaseReward validator_fees
                 */

                /**
                 * Constructs a new BaseReward.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a BaseReward.
                 * @implements IBaseReward
                 * @constructor
                 * @param {oraichain.orai.aioracle.IBaseReward=} [p] Properties to set
                 */
                function BaseReward(p) {
                    this.validators = [];
                    this.provider_fees = [];
                    this.validator_fees = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BaseReward validators.
                 * @member {Array.<oraichain.orai.aioracle.IValidator>} validators
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @instance
                 */
                BaseReward.prototype.validators = $util.emptyArray;

                /**
                 * BaseReward block_height.
                 * @member {Long} block_height
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @instance
                 */
                BaseReward.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * BaseReward total_power.
                 * @member {Long} total_power
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @instance
                 */
                BaseReward.prototype.total_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * BaseReward provider_fees.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} provider_fees
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @instance
                 */
                BaseReward.prototype.provider_fees = $util.emptyArray;

                /**
                 * BaseReward validator_fees.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} validator_fees
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @instance
                 */
                BaseReward.prototype.validator_fees = $util.emptyArray;

                /**
                 * Encodes the specified BaseReward message. Does not implicitly {@link oraichain.orai.aioracle.BaseReward.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @static
                 * @param {oraichain.orai.aioracle.IBaseReward} m BaseReward message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BaseReward.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            $root.oraichain.orai.aioracle.Validator.encode(m.validators[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                        w.uint32(16).int64(m.block_height);
                    if (m.total_power != null && Object.hasOwnProperty.call(m, "total_power"))
                        w.uint32(24).int64(m.total_power);
                    if (m.provider_fees != null && m.provider_fees.length) {
                        for (var i = 0; i < m.provider_fees.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.provider_fees[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.validator_fees != null && m.validator_fees.length) {
                        for (var i = 0; i < m.validator_fees.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.validator_fees[i], w.uint32(42).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a BaseReward message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.BaseReward
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.BaseReward} BaseReward
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BaseReward.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.BaseReward();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push($root.oraichain.orai.aioracle.Validator.decode(r, r.uint32()));
                                break;
                            case 2:
                                m.block_height = r.int64();
                                break;
                            case 3:
                                m.total_power = r.int64();
                                break;
                            case 4:
                                if (!(m.provider_fees && m.provider_fees.length))
                                    m.provider_fees = [];
                                m.provider_fees.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 5:
                                if (!(m.validator_fees && m.validator_fees.length))
                                    m.validator_fees = [];
                                m.validator_fees.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return BaseReward;
            })();

            aioracle.Reward = (function () {

                /**
                 * Properties of a Reward.
                 * @memberof oraichain.orai.aioracle
                 * @interface IReward
                 * @property {oraichain.orai.aioracle.IBaseReward|null} [base_reward] Reward base_reward
                 * @property {Array.<oraichain.orai.aioracle.IResult>|null} [results] Reward results
                 */

                /**
                 * Constructs a new Reward.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Reward.
                 * @implements IReward
                 * @constructor
                 * @param {oraichain.orai.aioracle.IReward=} [p] Properties to set
                 */
                function Reward(p) {
                    this.results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Reward base_reward.
                 * @member {oraichain.orai.aioracle.IBaseReward|null|undefined} base_reward
                 * @memberof oraichain.orai.aioracle.Reward
                 * @instance
                 */
                Reward.prototype.base_reward = null;

                /**
                 * Reward results.
                 * @member {Array.<oraichain.orai.aioracle.IResult>} results
                 * @memberof oraichain.orai.aioracle.Reward
                 * @instance
                 */
                Reward.prototype.results = $util.emptyArray;

                /**
                 * Encodes the specified Reward message. Does not implicitly {@link oraichain.orai.aioracle.Reward.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Reward
                 * @static
                 * @param {oraichain.orai.aioracle.IReward} m Reward message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Reward.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_reward != null && Object.hasOwnProperty.call(m, "base_reward"))
                        $root.oraichain.orai.aioracle.BaseReward.encode(m.base_reward, w.uint32(10).fork()).ldelim();
                    if (m.results != null && m.results.length) {
                        for (var i = 0; i < m.results.length; ++i)
                            $root.oraichain.orai.aioracle.Result.encode(m.results[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a Reward message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Reward
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Reward} Reward
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Reward.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Reward();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_reward = $root.oraichain.orai.aioracle.BaseReward.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.results && m.results.length))
                                    m.results = [];
                                m.results.push($root.oraichain.orai.aioracle.Result.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Reward;
            })();

            aioracle.ResultWithTestCase = (function () {

                /**
                 * Properties of a ResultWithTestCase.
                 * @memberof oraichain.orai.aioracle
                 * @interface IResultWithTestCase
                 * @property {oraichain.orai.aioracle.IEntryPoint|null} [entry_point] ResultWithTestCase entry_point
                 * @property {Array.<oraichain.orai.aioracle.IResult>|null} [test_case_results] ResultWithTestCase test_case_results
                 * @property {string|null} [status] ResultWithTestCase status
                 */

                /**
                 * Constructs a new ResultWithTestCase.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a ResultWithTestCase.
                 * @implements IResultWithTestCase
                 * @constructor
                 * @param {oraichain.orai.aioracle.IResultWithTestCase=} [p] Properties to set
                 */
                function ResultWithTestCase(p) {
                    this.test_case_results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ResultWithTestCase entry_point.
                 * @member {oraichain.orai.aioracle.IEntryPoint|null|undefined} entry_point
                 * @memberof oraichain.orai.aioracle.ResultWithTestCase
                 * @instance
                 */
                ResultWithTestCase.prototype.entry_point = null;

                /**
                 * ResultWithTestCase test_case_results.
                 * @member {Array.<oraichain.orai.aioracle.IResult>} test_case_results
                 * @memberof oraichain.orai.aioracle.ResultWithTestCase
                 * @instance
                 */
                ResultWithTestCase.prototype.test_case_results = $util.emptyArray;

                /**
                 * ResultWithTestCase status.
                 * @member {string} status
                 * @memberof oraichain.orai.aioracle.ResultWithTestCase
                 * @instance
                 */
                ResultWithTestCase.prototype.status = "";

                /**
                 * Encodes the specified ResultWithTestCase message. Does not implicitly {@link oraichain.orai.aioracle.ResultWithTestCase.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.ResultWithTestCase
                 * @static
                 * @param {oraichain.orai.aioracle.IResultWithTestCase} m ResultWithTestCase message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResultWithTestCase.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.entry_point != null && Object.hasOwnProperty.call(m, "entry_point"))
                        $root.oraichain.orai.aioracle.EntryPoint.encode(m.entry_point, w.uint32(10).fork()).ldelim();
                    if (m.test_case_results != null && m.test_case_results.length) {
                        for (var i = 0; i < m.test_case_results.length; ++i)
                            $root.oraichain.orai.aioracle.Result.encode(m.test_case_results[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(26).string(m.status);
                    return w;
                };

                /**
                 * Decodes a ResultWithTestCase message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.ResultWithTestCase
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.ResultWithTestCase} ResultWithTestCase
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResultWithTestCase.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.ResultWithTestCase();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.entry_point = $root.oraichain.orai.aioracle.EntryPoint.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.test_case_results && m.test_case_results.length))
                                    m.test_case_results = [];
                                m.test_case_results.push($root.oraichain.orai.aioracle.Result.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.status = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ResultWithTestCase;
            })();

            aioracle.Validator = (function () {

                /**
                 * Properties of a Validator.
                 * @memberof oraichain.orai.aioracle
                 * @interface IValidator
                 * @property {Uint8Array|null} [address] Validator address
                 * @property {Long|null} [voting_power] Validator voting_power
                 * @property {string|null} [status] Validator status
                 */

                /**
                 * Constructs a new Validator.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Validator.
                 * @implements IValidator
                 * @constructor
                 * @param {oraichain.orai.aioracle.IValidator=} [p] Properties to set
                 */
                function Validator(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Validator address.
                 * @member {Uint8Array} address
                 * @memberof oraichain.orai.aioracle.Validator
                 * @instance
                 */
                Validator.prototype.address = $util.newBuffer([]);

                /**
                 * Validator voting_power.
                 * @member {Long} voting_power
                 * @memberof oraichain.orai.aioracle.Validator
                 * @instance
                 */
                Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Validator status.
                 * @member {string} status
                 * @memberof oraichain.orai.aioracle.Validator
                 * @instance
                 */
                Validator.prototype.status = "";

                /**
                 * Encodes the specified Validator message. Does not implicitly {@link oraichain.orai.aioracle.Validator.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Validator
                 * @static
                 * @param {oraichain.orai.aioracle.IValidator} m Validator message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Validator.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && Object.hasOwnProperty.call(m, "address"))
                        w.uint32(10).bytes(m.address);
                    if (m.voting_power != null && Object.hasOwnProperty.call(m, "voting_power"))
                        w.uint32(16).int64(m.voting_power);
                    if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                        w.uint32(26).string(m.status);
                    return w;
                };

                /**
                 * Decodes a Validator message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Validator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Validator} Validator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Validator.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Validator();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.address = r.bytes();
                                break;
                            case 2:
                                m.voting_power = r.int64();
                                break;
                            case 3:
                                m.status = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Validator;
            })();

            aioracle.ValResult = (function () {

                /**
                 * Properties of a ValResult.
                 * @memberof oraichain.orai.aioracle
                 * @interface IValResult
                 * @property {oraichain.orai.aioracle.IValidator|null} [validator] ValResult validator
                 * @property {Uint8Array|null} [result] ValResult result
                 * @property {string|null} [result_status] ValResult result_status
                 */

                /**
                 * Constructs a new ValResult.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a ValResult.
                 * @implements IValResult
                 * @constructor
                 * @param {oraichain.orai.aioracle.IValResult=} [p] Properties to set
                 */
                function ValResult(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ValResult validator.
                 * @member {oraichain.orai.aioracle.IValidator|null|undefined} validator
                 * @memberof oraichain.orai.aioracle.ValResult
                 * @instance
                 */
                ValResult.prototype.validator = null;

                /**
                 * ValResult result.
                 * @member {Uint8Array} result
                 * @memberof oraichain.orai.aioracle.ValResult
                 * @instance
                 */
                ValResult.prototype.result = $util.newBuffer([]);

                /**
                 * ValResult result_status.
                 * @member {string} result_status
                 * @memberof oraichain.orai.aioracle.ValResult
                 * @instance
                 */
                ValResult.prototype.result_status = "";

                /**
                 * Encodes the specified ValResult message. Does not implicitly {@link oraichain.orai.aioracle.ValResult.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.ValResult
                 * @static
                 * @param {oraichain.orai.aioracle.IValResult} m ValResult message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValResult.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validator != null && Object.hasOwnProperty.call(m, "validator"))
                        $root.oraichain.orai.aioracle.Validator.encode(m.validator, w.uint32(10).fork()).ldelim();
                    if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                        w.uint32(18).bytes(m.result);
                    if (m.result_status != null && Object.hasOwnProperty.call(m, "result_status"))
                        w.uint32(26).string(m.result_status);
                    return w;
                };

                /**
                 * Decodes a ValResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.ValResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.ValResult} ValResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValResult.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.ValResult();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.validator = $root.oraichain.orai.aioracle.Validator.decode(r, r.uint32());
                                break;
                            case 2:
                                m.result = r.bytes();
                                break;
                            case 3:
                                m.result_status = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ValResult;
            })();

            aioracle.Params = (function () {

                /**
                 * Properties of a Params.
                 * @memberof oraichain.orai.aioracle
                 * @interface IParams
                 * @property {Long|null} [maximum_ai_oracle_request_bytes] Params maximum_ai_oracle_request_bytes
                 * @property {Long|null} [reward_ai_oracle_percentages] Params reward_ai_oracle_percentages
                 * @property {Long|null} [reports_percentages] Params reports_percentages
                 * @property {Long|null} [maximum_ai_oracle_response_bytes] Params maximum_ai_oracle_response_bytes
                 */

                /**
                 * Constructs a new Params.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {oraichain.orai.aioracle.IParams=} [p] Properties to set
                 */
                function Params(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Params maximum_ai_oracle_request_bytes.
                 * @member {Long} maximum_ai_oracle_request_bytes
                 * @memberof oraichain.orai.aioracle.Params
                 * @instance
                 */
                Params.prototype.maximum_ai_oracle_request_bytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params reward_ai_oracle_percentages.
                 * @member {Long} reward_ai_oracle_percentages
                 * @memberof oraichain.orai.aioracle.Params
                 * @instance
                 */
                Params.prototype.reward_ai_oracle_percentages = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params reports_percentages.
                 * @member {Long} reports_percentages
                 * @memberof oraichain.orai.aioracle.Params
                 * @instance
                 */
                Params.prototype.reports_percentages = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Params maximum_ai_oracle_response_bytes.
                 * @member {Long} maximum_ai_oracle_response_bytes
                 * @memberof oraichain.orai.aioracle.Params
                 * @instance
                 */
                Params.prototype.maximum_ai_oracle_response_bytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link oraichain.orai.aioracle.Params.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Params
                 * @static
                 * @param {oraichain.orai.aioracle.IParams} m Params message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.maximum_ai_oracle_request_bytes != null && Object.hasOwnProperty.call(m, "maximum_ai_oracle_request_bytes"))
                        w.uint32(8).uint64(m.maximum_ai_oracle_request_bytes);
                    if (m.reward_ai_oracle_percentages != null && Object.hasOwnProperty.call(m, "reward_ai_oracle_percentages"))
                        w.uint32(16).uint64(m.reward_ai_oracle_percentages);
                    if (m.reports_percentages != null && Object.hasOwnProperty.call(m, "reports_percentages"))
                        w.uint32(24).uint64(m.reports_percentages);
                    if (m.maximum_ai_oracle_response_bytes != null && Object.hasOwnProperty.call(m, "maximum_ai_oracle_response_bytes"))
                        w.uint32(32).uint64(m.maximum_ai_oracle_response_bytes);
                    return w;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Params();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.maximum_ai_oracle_request_bytes = r.uint64();
                                break;
                            case 2:
                                m.reward_ai_oracle_percentages = r.uint64();
                                break;
                            case 3:
                                m.reports_percentages = r.uint64();
                                break;
                            case 4:
                                m.maximum_ai_oracle_response_bytes = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Params;
            })();

            aioracle.QueryAIOracleReq = (function () {

                /**
                 * Properties of a QueryAIOracleReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryAIOracleReq
                 * @property {string|null} [request_id] QueryAIOracleReq request_id
                 */

                /**
                 * Constructs a new QueryAIOracleReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryAIOracleReq.
                 * @implements IQueryAIOracleReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryAIOracleReq=} [p] Properties to set
                 */
                function QueryAIOracleReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAIOracleReq request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.QueryAIOracleReq
                 * @instance
                 */
                QueryAIOracleReq.prototype.request_id = "";

                /**
                 * Encodes the specified QueryAIOracleReq message. Does not implicitly {@link oraichain.orai.aioracle.QueryAIOracleReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleReq
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryAIOracleReq} m QueryAIOracleReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAIOracleReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    return w;
                };

                /**
                 * Decodes a QueryAIOracleReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryAIOracleReq} QueryAIOracleReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAIOracleReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryAIOracleReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAIOracleReq;
            })();

            aioracle.QueryAIOracleRes = (function () {

                /**
                 * Properties of a QueryAIOracleRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryAIOracleRes
                 * @property {string|null} [request_id] QueryAIOracleRes request_id
                 * @property {Uint8Array|null} [contract] QueryAIOracleRes contract
                 * @property {Uint8Array|null} [creator] QueryAIOracleRes creator
                 * @property {Array.<Uint8Array>|null} [validators] QueryAIOracleRes validators
                 * @property {Long|null} [block_height] QueryAIOracleRes block_height
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fees] QueryAIOracleRes fees
                 * @property {Uint8Array|null} [input] QueryAIOracleRes input
                 */

                /**
                 * Constructs a new QueryAIOracleRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryAIOracleRes.
                 * @implements IQueryAIOracleRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryAIOracleRes=} [p] Properties to set
                 */
                function QueryAIOracleRes(p) {
                    this.validators = [];
                    this.fees = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAIOracleRes request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.request_id = "";

                /**
                 * QueryAIOracleRes contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.contract = $util.newBuffer([]);

                /**
                 * QueryAIOracleRes creator.
                 * @member {Uint8Array} creator
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.creator = $util.newBuffer([]);

                /**
                 * QueryAIOracleRes validators.
                 * @member {Array.<Uint8Array>} validators
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.validators = $util.emptyArray;

                /**
                 * QueryAIOracleRes block_height.
                 * @member {Long} block_height
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.block_height = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * QueryAIOracleRes fees.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fees
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.fees = $util.emptyArray;

                /**
                 * QueryAIOracleRes input.
                 * @member {Uint8Array} input
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @instance
                 */
                QueryAIOracleRes.prototype.input = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryAIOracleRes message. Does not implicitly {@link oraichain.orai.aioracle.QueryAIOracleRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryAIOracleRes} m QueryAIOracleRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAIOracleRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(18).bytes(m.contract);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(26).bytes(m.creator);
                    if (m.validators != null && m.validators.length) {
                        for (var i = 0; i < m.validators.length; ++i)
                            w.uint32(34).bytes(m.validators[i]);
                    }
                    if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                        w.uint32(40).int64(m.block_height);
                    if (m.fees != null && m.fees.length) {
                        for (var i = 0; i < m.fees.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(m.fees[i], w.uint32(50).fork()).ldelim();
                    }
                    if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                        w.uint32(58).bytes(m.input);
                    return w;
                };

                /**
                 * Decodes a QueryAIOracleRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryAIOracleRes} QueryAIOracleRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAIOracleRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryAIOracleRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            case 2:
                                m.contract = r.bytes();
                                break;
                            case 3:
                                m.creator = r.bytes();
                                break;
                            case 4:
                                if (!(m.validators && m.validators.length))
                                    m.validators = [];
                                m.validators.push(r.bytes());
                                break;
                            case 5:
                                m.block_height = r.int64();
                                break;
                            case 6:
                                if (!(m.fees && m.fees.length))
                                    m.fees = [];
                                m.fees.push($root.cosmos.base.v1beta1.Coin.decode(r, r.uint32()));
                                break;
                            case 7:
                                m.input = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAIOracleRes;
            })();

            aioracle.QueryAIOracleIDsReq = (function () {

                /**
                 * Properties of a QueryAIOracleIDsReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryAIOracleIDsReq
                 * @property {Long|null} [page] QueryAIOracleIDsReq page
                 * @property {Long|null} [limit] QueryAIOracleIDsReq limit
                 */

                /**
                 * Constructs a new QueryAIOracleIDsReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryAIOracleIDsReq.
                 * @implements IQueryAIOracleIDsReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryAIOracleIDsReq=} [p] Properties to set
                 */
                function QueryAIOracleIDsReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAIOracleIDsReq page.
                 * @member {Long} page
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsReq
                 * @instance
                 */
                QueryAIOracleIDsReq.prototype.page = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * QueryAIOracleIDsReq limit.
                 * @member {Long} limit
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsReq
                 * @instance
                 */
                QueryAIOracleIDsReq.prototype.limit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * Encodes the specified QueryAIOracleIDsReq message. Does not implicitly {@link oraichain.orai.aioracle.QueryAIOracleIDsReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsReq
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryAIOracleIDsReq} m QueryAIOracleIDsReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAIOracleIDsReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.page != null && Object.hasOwnProperty.call(m, "page"))
                        w.uint32(8).int64(m.page);
                    if (m.limit != null && Object.hasOwnProperty.call(m, "limit"))
                        w.uint32(16).int64(m.limit);
                    return w;
                };

                /**
                 * Decodes a QueryAIOracleIDsReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryAIOracleIDsReq} QueryAIOracleIDsReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAIOracleIDsReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryAIOracleIDsReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.page = r.int64();
                                break;
                            case 2:
                                m.limit = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAIOracleIDsReq;
            })();

            aioracle.QueryAIOracleIDsRes = (function () {

                /**
                 * Properties of a QueryAIOracleIDsRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryAIOracleIDsRes
                 * @property {Array.<string>|null} [request_ids] QueryAIOracleIDsRes request_ids
                 */

                /**
                 * Constructs a new QueryAIOracleIDsRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryAIOracleIDsRes.
                 * @implements IQueryAIOracleIDsRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryAIOracleIDsRes=} [p] Properties to set
                 */
                function QueryAIOracleIDsRes(p) {
                    this.request_ids = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryAIOracleIDsRes request_ids.
                 * @member {Array.<string>} request_ids
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsRes
                 * @instance
                 */
                QueryAIOracleIDsRes.prototype.request_ids = $util.emptyArray;

                /**
                 * Encodes the specified QueryAIOracleIDsRes message. Does not implicitly {@link oraichain.orai.aioracle.QueryAIOracleIDsRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsRes
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryAIOracleIDsRes} m QueryAIOracleIDsRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAIOracleIDsRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_ids != null && m.request_ids.length) {
                        for (var i = 0; i < m.request_ids.length; ++i)
                            w.uint32(10).string(m.request_ids[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a QueryAIOracleIDsRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryAIOracleIDsRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryAIOracleIDsRes} QueryAIOracleIDsRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAIOracleIDsRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryAIOracleIDsRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.request_ids && m.request_ids.length))
                                    m.request_ids = [];
                                m.request_ids.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryAIOracleIDsRes;
            })();

            aioracle.Fetch = (function () {

                /**
                 * Properties of a Fetch.
                 * @memberof oraichain.orai.aioracle
                 * @interface IFetch
                 * @property {string|null} [url] Fetch url
                 * @property {Array.<string>|null} [headers] Fetch headers
                 * @property {string|null} [method] Fetch method
                 * @property {string|null} [body] Fetch body
                 */

                /**
                 * Constructs a new Fetch.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Fetch.
                 * @implements IFetch
                 * @constructor
                 * @param {oraichain.orai.aioracle.IFetch=} [p] Properties to set
                 */
                function Fetch(p) {
                    this.headers = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Fetch url.
                 * @member {string} url
                 * @memberof oraichain.orai.aioracle.Fetch
                 * @instance
                 */
                Fetch.prototype.url = "";

                /**
                 * Fetch headers.
                 * @member {Array.<string>} headers
                 * @memberof oraichain.orai.aioracle.Fetch
                 * @instance
                 */
                Fetch.prototype.headers = $util.emptyArray;

                /**
                 * Fetch method.
                 * @member {string} method
                 * @memberof oraichain.orai.aioracle.Fetch
                 * @instance
                 */
                Fetch.prototype.method = "";

                /**
                 * Fetch body.
                 * @member {string} body
                 * @memberof oraichain.orai.aioracle.Fetch
                 * @instance
                 */
                Fetch.prototype.body = "";

                /**
                 * Encodes the specified Fetch message. Does not implicitly {@link oraichain.orai.aioracle.Fetch.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Fetch
                 * @static
                 * @param {oraichain.orai.aioracle.IFetch} m Fetch message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fetch.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.url != null && Object.hasOwnProperty.call(m, "url"))
                        w.uint32(10).string(m.url);
                    if (m.headers != null && m.headers.length) {
                        for (var i = 0; i < m.headers.length; ++i)
                            w.uint32(18).string(m.headers[i]);
                    }
                    if (m.method != null && Object.hasOwnProperty.call(m, "method"))
                        w.uint32(26).string(m.method);
                    if (m.body != null && Object.hasOwnProperty.call(m, "body"))
                        w.uint32(34).string(m.body);
                    return w;
                };

                /**
                 * Decodes a Fetch message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Fetch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Fetch} Fetch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fetch.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Fetch();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.url = r.string();
                                break;
                            case 2:
                                if (!(m.headers && m.headers.length))
                                    m.headers = [];
                                m.headers.push(r.string());
                                break;
                            case 3:
                                m.method = r.string();
                                break;
                            case 4:
                                m.body = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Fetch;
            })();

            aioracle.Request = (function () {

                /**
                 * Properties of a Request.
                 * @memberof oraichain.orai.aioracle
                 * @interface IRequest
                 * @property {oraichain.orai.aioracle.IFetch|null} [fetch] Request fetch
                 */

                /**
                 * Constructs a new Request.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a Request.
                 * @implements IRequest
                 * @constructor
                 * @param {oraichain.orai.aioracle.IRequest=} [p] Properties to set
                 */
                function Request(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Request fetch.
                 * @member {oraichain.orai.aioracle.IFetch|null|undefined} fetch
                 * @memberof oraichain.orai.aioracle.Request
                 * @instance
                 */
                Request.prototype.fetch = null;

                /**
                 * Encodes the specified Request message. Does not implicitly {@link oraichain.orai.aioracle.Request.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.Request
                 * @static
                 * @param {oraichain.orai.aioracle.IRequest} m Request message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Request.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.fetch != null && Object.hasOwnProperty.call(m, "fetch"))
                        $root.oraichain.orai.aioracle.Fetch.encode(m.fetch, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a Request message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.Request
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.Request} Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Request.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.Request();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.fetch = $root.oraichain.orai.aioracle.Fetch.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return Request;
            })();

            aioracle.EmptyParams = (function () {

                /**
                 * Properties of an EmptyParams.
                 * @memberof oraichain.orai.aioracle
                 * @interface IEmptyParams
                 */

                /**
                 * Constructs a new EmptyParams.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents an EmptyParams.
                 * @implements IEmptyParams
                 * @constructor
                 * @param {oraichain.orai.aioracle.IEmptyParams=} [p] Properties to set
                 */
                function EmptyParams(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified EmptyParams message. Does not implicitly {@link oraichain.orai.aioracle.EmptyParams.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.EmptyParams
                 * @static
                 * @param {oraichain.orai.aioracle.IEmptyParams} m EmptyParams message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EmptyParams.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes an EmptyParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.EmptyParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.EmptyParams} EmptyParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EmptyParams.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.EmptyParams();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return EmptyParams;
            })();

            aioracle.RequestDataSource = (function () {

                /**
                 * Properties of a RequestDataSource.
                 * @memberof oraichain.orai.aioracle
                 * @interface IRequestDataSource
                 * @property {oraichain.orai.aioracle.IEntryPoint|null} [dsource] RequestDataSource dsource
                 * @property {string|null} [input] RequestDataSource input
                 */

                /**
                 * Constructs a new RequestDataSource.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a RequestDataSource.
                 * @implements IRequestDataSource
                 * @constructor
                 * @param {oraichain.orai.aioracle.IRequestDataSource=} [p] Properties to set
                 */
                function RequestDataSource(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * RequestDataSource dsource.
                 * @member {oraichain.orai.aioracle.IEntryPoint|null|undefined} dsource
                 * @memberof oraichain.orai.aioracle.RequestDataSource
                 * @instance
                 */
                RequestDataSource.prototype.dsource = null;

                /**
                 * RequestDataSource input.
                 * @member {string} input
                 * @memberof oraichain.orai.aioracle.RequestDataSource
                 * @instance
                 */
                RequestDataSource.prototype.input = "";

                /**
                 * Encodes the specified RequestDataSource message. Does not implicitly {@link oraichain.orai.aioracle.RequestDataSource.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.RequestDataSource
                 * @static
                 * @param {oraichain.orai.aioracle.IRequestDataSource} m RequestDataSource message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestDataSource.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.dsource != null && Object.hasOwnProperty.call(m, "dsource"))
                        $root.oraichain.orai.aioracle.EntryPoint.encode(m.dsource, w.uint32(10).fork()).ldelim();
                    if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                        w.uint32(18).string(m.input);
                    return w;
                };

                /**
                 * Decodes a RequestDataSource message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.RequestDataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.RequestDataSource} RequestDataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestDataSource.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.RequestDataSource();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.dsource = $root.oraichain.orai.aioracle.EntryPoint.decode(r, r.uint32());
                                break;
                            case 2:
                                m.input = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return RequestDataSource;
            })();

            aioracle.RequestTestCase = (function () {

                /**
                 * Properties of a RequestTestCase.
                 * @memberof oraichain.orai.aioracle
                 * @interface IRequestTestCase
                 * @property {oraichain.orai.aioracle.IEntryPoint|null} [tcase] RequestTestCase tcase
                 * @property {oraichain.orai.aioracle.IEntryPoint|null} [input] RequestTestCase input
                 */

                /**
                 * Constructs a new RequestTestCase.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a RequestTestCase.
                 * @implements IRequestTestCase
                 * @constructor
                 * @param {oraichain.orai.aioracle.IRequestTestCase=} [p] Properties to set
                 */
                function RequestTestCase(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * RequestTestCase tcase.
                 * @member {oraichain.orai.aioracle.IEntryPoint|null|undefined} tcase
                 * @memberof oraichain.orai.aioracle.RequestTestCase
                 * @instance
                 */
                RequestTestCase.prototype.tcase = null;

                /**
                 * RequestTestCase input.
                 * @member {oraichain.orai.aioracle.IEntryPoint|null|undefined} input
                 * @memberof oraichain.orai.aioracle.RequestTestCase
                 * @instance
                 */
                RequestTestCase.prototype.input = null;

                /**
                 * Encodes the specified RequestTestCase message. Does not implicitly {@link oraichain.orai.aioracle.RequestTestCase.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.RequestTestCase
                 * @static
                 * @param {oraichain.orai.aioracle.IRequestTestCase} m RequestTestCase message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestTestCase.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.tcase != null && Object.hasOwnProperty.call(m, "tcase"))
                        $root.oraichain.orai.aioracle.EntryPoint.encode(m.tcase, w.uint32(10).fork()).ldelim();
                    if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                        $root.oraichain.orai.aioracle.EntryPoint.encode(m.input, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a RequestTestCase message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.RequestTestCase
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.RequestTestCase} RequestTestCase
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestTestCase.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.RequestTestCase();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.tcase = $root.oraichain.orai.aioracle.EntryPoint.decode(r, r.uint32());
                                break;
                            case 2:
                                m.input = $root.oraichain.orai.aioracle.EntryPoint.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return RequestTestCase;
            })();

            aioracle.RequestOracleScript = (function () {

                /**
                 * Properties of a RequestOracleScript.
                 * @memberof oraichain.orai.aioracle
                 * @interface IRequestOracleScript
                 * @property {Array.<string>|null} [results] RequestOracleScript results
                 */

                /**
                 * Constructs a new RequestOracleScript.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a RequestOracleScript.
                 * @implements IRequestOracleScript
                 * @constructor
                 * @param {oraichain.orai.aioracle.IRequestOracleScript=} [p] Properties to set
                 */
                function RequestOracleScript(p) {
                    this.results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * RequestOracleScript results.
                 * @member {Array.<string>} results
                 * @memberof oraichain.orai.aioracle.RequestOracleScript
                 * @instance
                 */
                RequestOracleScript.prototype.results = $util.emptyArray;

                /**
                 * Encodes the specified RequestOracleScript message. Does not implicitly {@link oraichain.orai.aioracle.RequestOracleScript.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.RequestOracleScript
                 * @static
                 * @param {oraichain.orai.aioracle.IRequestOracleScript} m RequestOracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestOracleScript.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.results != null && m.results.length) {
                        for (var i = 0; i < m.results.length; ++i)
                            w.uint32(10).string(m.results[i]);
                    }
                    return w;
                };

                /**
                 * Decodes a RequestOracleScript message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.RequestOracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.RequestOracleScript} RequestOracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestOracleScript.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.RequestOracleScript();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.results && m.results.length))
                                    m.results = [];
                                m.results.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return RequestOracleScript;
            })();

            aioracle.QueryDataSourceSmartContract = (function () {

                /**
                 * Properties of a QueryDataSourceSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryDataSourceSmartContract
                 * @property {oraichain.orai.aioracle.IRequestDataSource|null} [get] QueryDataSourceSmartContract get
                 */

                /**
                 * Constructs a new QueryDataSourceSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryDataSourceSmartContract.
                 * @implements IQueryDataSourceSmartContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryDataSourceSmartContract=} [p] Properties to set
                 */
                function QueryDataSourceSmartContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDataSourceSmartContract get.
                 * @member {oraichain.orai.aioracle.IRequestDataSource|null|undefined} get
                 * @memberof oraichain.orai.aioracle.QueryDataSourceSmartContract
                 * @instance
                 */
                QueryDataSourceSmartContract.prototype.get = null;

                /**
                 * Encodes the specified QueryDataSourceSmartContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryDataSourceSmartContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceSmartContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryDataSourceSmartContract} m QueryDataSourceSmartContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceSmartContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.get != null && Object.hasOwnProperty.call(m, "get"))
                        $root.oraichain.orai.aioracle.RequestDataSource.encode(m.get, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDataSourceSmartContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceSmartContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryDataSourceSmartContract} QueryDataSourceSmartContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceSmartContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryDataSourceSmartContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.get = $root.oraichain.orai.aioracle.RequestDataSource.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDataSourceSmartContract;
            })();

            aioracle.QueryTestCaseSmartContract = (function () {

                /**
                 * Properties of a QueryTestCaseSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryTestCaseSmartContract
                 * @property {oraichain.orai.aioracle.IRequestTestCase|null} [test] QueryTestCaseSmartContract test
                 */

                /**
                 * Constructs a new QueryTestCaseSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryTestCaseSmartContract.
                 * @implements IQueryTestCaseSmartContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryTestCaseSmartContract=} [p] Properties to set
                 */
                function QueryTestCaseSmartContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTestCaseSmartContract test.
                 * @member {oraichain.orai.aioracle.IRequestTestCase|null|undefined} test
                 * @memberof oraichain.orai.aioracle.QueryTestCaseSmartContract
                 * @instance
                 */
                QueryTestCaseSmartContract.prototype.test = null;

                /**
                 * Encodes the specified QueryTestCaseSmartContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryTestCaseSmartContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseSmartContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryTestCaseSmartContract} m QueryTestCaseSmartContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTestCaseSmartContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.test != null && Object.hasOwnProperty.call(m, "test"))
                        $root.oraichain.orai.aioracle.RequestTestCase.encode(m.test, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryTestCaseSmartContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseSmartContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryTestCaseSmartContract} QueryTestCaseSmartContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTestCaseSmartContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryTestCaseSmartContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.test = $root.oraichain.orai.aioracle.RequestTestCase.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTestCaseSmartContract;
            })();

            aioracle.QueryOracleScriptSmartContract = (function () {

                /**
                 * Properties of a QueryOracleScriptSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryOracleScriptSmartContract
                 * @property {oraichain.orai.aioracle.IRequestOracleScript|null} [aggregate] QueryOracleScriptSmartContract aggregate
                 */

                /**
                 * Constructs a new QueryOracleScriptSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryOracleScriptSmartContract.
                 * @implements IQueryOracleScriptSmartContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryOracleScriptSmartContract=} [p] Properties to set
                 */
                function QueryOracleScriptSmartContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryOracleScriptSmartContract aggregate.
                 * @member {oraichain.orai.aioracle.IRequestOracleScript|null|undefined} aggregate
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptSmartContract
                 * @instance
                 */
                QueryOracleScriptSmartContract.prototype.aggregate = null;

                /**
                 * Encodes the specified QueryOracleScriptSmartContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryOracleScriptSmartContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptSmartContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryOracleScriptSmartContract} m QueryOracleScriptSmartContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryOracleScriptSmartContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.aggregate != null && Object.hasOwnProperty.call(m, "aggregate"))
                        $root.oraichain.orai.aioracle.RequestOracleScript.encode(m.aggregate, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryOracleScriptSmartContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptSmartContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryOracleScriptSmartContract} QueryOracleScriptSmartContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryOracleScriptSmartContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryOracleScriptSmartContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.aggregate = $root.oraichain.orai.aioracle.RequestOracleScript.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryOracleScriptSmartContract;
            })();

            aioracle.QueryDataSourceEntriesSmartContract = (function () {

                /**
                 * Properties of a QueryDataSourceEntriesSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryDataSourceEntriesSmartContract
                 * @property {oraichain.orai.aioracle.IEmptyParams|null} [get_data_sources] QueryDataSourceEntriesSmartContract get_data_sources
                 */

                /**
                 * Constructs a new QueryDataSourceEntriesSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryDataSourceEntriesSmartContract.
                 * @implements IQueryDataSourceEntriesSmartContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryDataSourceEntriesSmartContract=} [p] Properties to set
                 */
                function QueryDataSourceEntriesSmartContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDataSourceEntriesSmartContract get_data_sources.
                 * @member {oraichain.orai.aioracle.IEmptyParams|null|undefined} get_data_sources
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesSmartContract
                 * @instance
                 */
                QueryDataSourceEntriesSmartContract.prototype.get_data_sources = null;

                /**
                 * Encodes the specified QueryDataSourceEntriesSmartContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryDataSourceEntriesSmartContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesSmartContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryDataSourceEntriesSmartContract} m QueryDataSourceEntriesSmartContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceEntriesSmartContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.get_data_sources != null && Object.hasOwnProperty.call(m, "get_data_sources"))
                        $root.oraichain.orai.aioracle.EmptyParams.encode(m.get_data_sources, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDataSourceEntriesSmartContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesSmartContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryDataSourceEntriesSmartContract} QueryDataSourceEntriesSmartContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceEntriesSmartContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryDataSourceEntriesSmartContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.get_data_sources = $root.oraichain.orai.aioracle.EmptyParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDataSourceEntriesSmartContract;
            })();

            aioracle.QueryTestCaseEntriesSmartContract = (function () {

                /**
                 * Properties of a QueryTestCaseEntriesSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryTestCaseEntriesSmartContract
                 * @property {oraichain.orai.aioracle.IEmptyParams|null} [get_test_cases] QueryTestCaseEntriesSmartContract get_test_cases
                 */

                /**
                 * Constructs a new QueryTestCaseEntriesSmartContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryTestCaseEntriesSmartContract.
                 * @implements IQueryTestCaseEntriesSmartContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryTestCaseEntriesSmartContract=} [p] Properties to set
                 */
                function QueryTestCaseEntriesSmartContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTestCaseEntriesSmartContract get_test_cases.
                 * @member {oraichain.orai.aioracle.IEmptyParams|null|undefined} get_test_cases
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesSmartContract
                 * @instance
                 */
                QueryTestCaseEntriesSmartContract.prototype.get_test_cases = null;

                /**
                 * Encodes the specified QueryTestCaseEntriesSmartContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryTestCaseEntriesSmartContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesSmartContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryTestCaseEntriesSmartContract} m QueryTestCaseEntriesSmartContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTestCaseEntriesSmartContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.get_test_cases != null && Object.hasOwnProperty.call(m, "get_test_cases"))
                        $root.oraichain.orai.aioracle.EmptyParams.encode(m.get_test_cases, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryTestCaseEntriesSmartContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesSmartContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryTestCaseEntriesSmartContract} QueryTestCaseEntriesSmartContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTestCaseEntriesSmartContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryTestCaseEntriesSmartContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.get_test_cases = $root.oraichain.orai.aioracle.EmptyParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTestCaseEntriesSmartContract;
            })();

            aioracle.QueryDataSourceContract = (function () {

                /**
                 * Properties of a QueryDataSourceContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryDataSourceContract
                 * @property {Uint8Array|null} [contract] QueryDataSourceContract contract
                 * @property {oraichain.orai.aioracle.IRequestDataSource|null} [request] QueryDataSourceContract request
                 */

                /**
                 * Constructs a new QueryDataSourceContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryDataSourceContract.
                 * @implements IQueryDataSourceContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryDataSourceContract=} [p] Properties to set
                 */
                function QueryDataSourceContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDataSourceContract contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.QueryDataSourceContract
                 * @instance
                 */
                QueryDataSourceContract.prototype.contract = $util.newBuffer([]);

                /**
                 * QueryDataSourceContract request.
                 * @member {oraichain.orai.aioracle.IRequestDataSource|null|undefined} request
                 * @memberof oraichain.orai.aioracle.QueryDataSourceContract
                 * @instance
                 */
                QueryDataSourceContract.prototype.request = null;

                /**
                 * Encodes the specified QueryDataSourceContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryDataSourceContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryDataSourceContract} m QueryDataSourceContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(10).bytes(m.contract);
                    if (m.request != null && Object.hasOwnProperty.call(m, "request"))
                        $root.oraichain.orai.aioracle.RequestDataSource.encode(m.request, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDataSourceContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryDataSourceContract} QueryDataSourceContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryDataSourceContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract = r.bytes();
                                break;
                            case 2:
                                m.request = $root.oraichain.orai.aioracle.RequestDataSource.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDataSourceContract;
            })();

            aioracle.QueryDataSourceEntriesContract = (function () {

                /**
                 * Properties of a QueryDataSourceEntriesContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryDataSourceEntriesContract
                 * @property {Uint8Array|null} [contract] QueryDataSourceEntriesContract contract
                 * @property {oraichain.orai.aioracle.IEmptyParams|null} [request] QueryDataSourceEntriesContract request
                 */

                /**
                 * Constructs a new QueryDataSourceEntriesContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryDataSourceEntriesContract.
                 * @implements IQueryDataSourceEntriesContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryDataSourceEntriesContract=} [p] Properties to set
                 */
                function QueryDataSourceEntriesContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryDataSourceEntriesContract contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesContract
                 * @instance
                 */
                QueryDataSourceEntriesContract.prototype.contract = $util.newBuffer([]);

                /**
                 * QueryDataSourceEntriesContract request.
                 * @member {oraichain.orai.aioracle.IEmptyParams|null|undefined} request
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesContract
                 * @instance
                 */
                QueryDataSourceEntriesContract.prototype.request = null;

                /**
                 * Encodes the specified QueryDataSourceEntriesContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryDataSourceEntriesContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryDataSourceEntriesContract} m QueryDataSourceEntriesContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceEntriesContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(10).bytes(m.contract);
                    if (m.request != null && Object.hasOwnProperty.call(m, "request"))
                        $root.oraichain.orai.aioracle.EmptyParams.encode(m.request, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryDataSourceEntriesContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryDataSourceEntriesContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryDataSourceEntriesContract} QueryDataSourceEntriesContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceEntriesContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryDataSourceEntriesContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract = r.bytes();
                                break;
                            case 2:
                                m.request = $root.oraichain.orai.aioracle.EmptyParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryDataSourceEntriesContract;
            })();

            aioracle.QueryTestCaseEntriesContract = (function () {

                /**
                 * Properties of a QueryTestCaseEntriesContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryTestCaseEntriesContract
                 * @property {Uint8Array|null} [contract] QueryTestCaseEntriesContract contract
                 * @property {oraichain.orai.aioracle.IEmptyParams|null} [request] QueryTestCaseEntriesContract request
                 */

                /**
                 * Constructs a new QueryTestCaseEntriesContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryTestCaseEntriesContract.
                 * @implements IQueryTestCaseEntriesContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryTestCaseEntriesContract=} [p] Properties to set
                 */
                function QueryTestCaseEntriesContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTestCaseEntriesContract contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesContract
                 * @instance
                 */
                QueryTestCaseEntriesContract.prototype.contract = $util.newBuffer([]);

                /**
                 * QueryTestCaseEntriesContract request.
                 * @member {oraichain.orai.aioracle.IEmptyParams|null|undefined} request
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesContract
                 * @instance
                 */
                QueryTestCaseEntriesContract.prototype.request = null;

                /**
                 * Encodes the specified QueryTestCaseEntriesContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryTestCaseEntriesContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryTestCaseEntriesContract} m QueryTestCaseEntriesContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTestCaseEntriesContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(10).bytes(m.contract);
                    if (m.request != null && Object.hasOwnProperty.call(m, "request"))
                        $root.oraichain.orai.aioracle.EmptyParams.encode(m.request, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryTestCaseEntriesContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseEntriesContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryTestCaseEntriesContract} QueryTestCaseEntriesContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTestCaseEntriesContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryTestCaseEntriesContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract = r.bytes();
                                break;
                            case 2:
                                m.request = $root.oraichain.orai.aioracle.EmptyParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTestCaseEntriesContract;
            })();

            aioracle.QueryTestCaseContract = (function () {

                /**
                 * Properties of a QueryTestCaseContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryTestCaseContract
                 * @property {Uint8Array|null} [contract] QueryTestCaseContract contract
                 * @property {oraichain.orai.aioracle.IRequestTestCase|null} [request] QueryTestCaseContract request
                 */

                /**
                 * Constructs a new QueryTestCaseContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryTestCaseContract.
                 * @implements IQueryTestCaseContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryTestCaseContract=} [p] Properties to set
                 */
                function QueryTestCaseContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryTestCaseContract contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.QueryTestCaseContract
                 * @instance
                 */
                QueryTestCaseContract.prototype.contract = $util.newBuffer([]);

                /**
                 * QueryTestCaseContract request.
                 * @member {oraichain.orai.aioracle.IRequestTestCase|null|undefined} request
                 * @memberof oraichain.orai.aioracle.QueryTestCaseContract
                 * @instance
                 */
                QueryTestCaseContract.prototype.request = null;

                /**
                 * Encodes the specified QueryTestCaseContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryTestCaseContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryTestCaseContract} m QueryTestCaseContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTestCaseContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(10).bytes(m.contract);
                    if (m.request != null && Object.hasOwnProperty.call(m, "request"))
                        $root.oraichain.orai.aioracle.RequestTestCase.encode(m.request, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryTestCaseContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryTestCaseContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryTestCaseContract} QueryTestCaseContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTestCaseContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryTestCaseContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract = r.bytes();
                                break;
                            case 2:
                                m.request = $root.oraichain.orai.aioracle.RequestTestCase.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryTestCaseContract;
            })();

            aioracle.QueryOracleScriptContract = (function () {

                /**
                 * Properties of a QueryOracleScriptContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryOracleScriptContract
                 * @property {Uint8Array|null} [contract] QueryOracleScriptContract contract
                 * @property {oraichain.orai.aioracle.IRequestOracleScript|null} [request] QueryOracleScriptContract request
                 */

                /**
                 * Constructs a new QueryOracleScriptContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryOracleScriptContract.
                 * @implements IQueryOracleScriptContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryOracleScriptContract=} [p] Properties to set
                 */
                function QueryOracleScriptContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryOracleScriptContract contract.
                 * @member {Uint8Array} contract
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptContract
                 * @instance
                 */
                QueryOracleScriptContract.prototype.contract = $util.newBuffer([]);

                /**
                 * QueryOracleScriptContract request.
                 * @member {oraichain.orai.aioracle.IRequestOracleScript|null|undefined} request
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptContract
                 * @instance
                 */
                QueryOracleScriptContract.prototype.request = null;

                /**
                 * Encodes the specified QueryOracleScriptContract message. Does not implicitly {@link oraichain.orai.aioracle.QueryOracleScriptContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptContract
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryOracleScriptContract} m QueryOracleScriptContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryOracleScriptContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(10).bytes(m.contract);
                    if (m.request != null && Object.hasOwnProperty.call(m, "request"))
                        $root.oraichain.orai.aioracle.RequestOracleScript.encode(m.request, w.uint32(18).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryOracleScriptContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryOracleScriptContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryOracleScriptContract} QueryOracleScriptContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryOracleScriptContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryOracleScriptContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract = r.bytes();
                                break;
                            case 2:
                                m.request = $root.oraichain.orai.aioracle.RequestOracleScript.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryOracleScriptContract;
            })();

            aioracle.ResponseContract = (function () {

                /**
                 * Properties of a ResponseContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IResponseContract
                 * @property {Uint8Array|null} [data] ResponseContract data
                 */

                /**
                 * Constructs a new ResponseContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a ResponseContract.
                 * @implements IResponseContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IResponseContract=} [p] Properties to set
                 */
                function ResponseContract(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ResponseContract data.
                 * @member {Uint8Array} data
                 * @memberof oraichain.orai.aioracle.ResponseContract
                 * @instance
                 */
                ResponseContract.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified ResponseContract message. Does not implicitly {@link oraichain.orai.aioracle.ResponseContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.ResponseContract
                 * @static
                 * @param {oraichain.orai.aioracle.IResponseContract} m ResponseContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };

                /**
                 * Decodes a ResponseContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.ResponseContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.ResponseContract} ResponseContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.ResponseContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.data = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ResponseContract;
            })();

            aioracle.ResponseEntryPointContract = (function () {

                /**
                 * Properties of a ResponseEntryPointContract.
                 * @memberof oraichain.orai.aioracle
                 * @interface IResponseEntryPointContract
                 * @property {Array.<oraichain.orai.aioracle.IEntryPoint>|null} [data] ResponseEntryPointContract data
                 */

                /**
                 * Constructs a new ResponseEntryPointContract.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a ResponseEntryPointContract.
                 * @implements IResponseEntryPointContract
                 * @constructor
                 * @param {oraichain.orai.aioracle.IResponseEntryPointContract=} [p] Properties to set
                 */
                function ResponseEntryPointContract(p) {
                    this.data = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ResponseEntryPointContract data.
                 * @member {Array.<oraichain.orai.aioracle.IEntryPoint>} data
                 * @memberof oraichain.orai.aioracle.ResponseEntryPointContract
                 * @instance
                 */
                ResponseEntryPointContract.prototype.data = $util.emptyArray;

                /**
                 * Encodes the specified ResponseEntryPointContract message. Does not implicitly {@link oraichain.orai.aioracle.ResponseEntryPointContract.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.ResponseEntryPointContract
                 * @static
                 * @param {oraichain.orai.aioracle.IResponseEntryPointContract} m ResponseEntryPointContract message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseEntryPointContract.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && m.data.length) {
                        for (var i = 0; i < m.data.length; ++i)
                            $root.oraichain.orai.aioracle.EntryPoint.encode(m.data[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ResponseEntryPointContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.ResponseEntryPointContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.ResponseEntryPointContract} ResponseEntryPointContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseEntryPointContract.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.ResponseEntryPointContract();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.data && m.data.length))
                                    m.data = [];
                                m.data.push($root.oraichain.orai.aioracle.EntryPoint.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return ResponseEntryPointContract;
            })();

            aioracle.QueryRewardReq = (function () {

                /**
                 * Properties of a QueryRewardReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryRewardReq
                 * @property {string|null} [block_height] QueryRewardReq block_height
                 */

                /**
                 * Constructs a new QueryRewardReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryRewardReq.
                 * @implements IQueryRewardReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryRewardReq=} [p] Properties to set
                 */
                function QueryRewardReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryRewardReq block_height.
                 * @member {string} block_height
                 * @memberof oraichain.orai.aioracle.QueryRewardReq
                 * @instance
                 */
                QueryRewardReq.prototype.block_height = "";

                /**
                 * Encodes the specified QueryRewardReq message. Does not implicitly {@link oraichain.orai.aioracle.QueryRewardReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryRewardReq
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryRewardReq} m QueryRewardReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRewardReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.block_height != null && Object.hasOwnProperty.call(m, "block_height"))
                        w.uint32(10).string(m.block_height);
                    return w;
                };

                /**
                 * Decodes a QueryRewardReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryRewardReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryRewardReq} QueryRewardReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRewardReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryRewardReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.block_height = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryRewardReq;
            })();

            aioracle.QueryRewardRes = (function () {

                /**
                 * Properties of a QueryRewardRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryRewardRes
                 * @property {oraichain.orai.aioracle.IReward|null} [reward] QueryRewardRes reward
                 */

                /**
                 * Constructs a new QueryRewardRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryRewardRes.
                 * @implements IQueryRewardRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryRewardRes=} [p] Properties to set
                 */
                function QueryRewardRes(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryRewardRes reward.
                 * @member {oraichain.orai.aioracle.IReward|null|undefined} reward
                 * @memberof oraichain.orai.aioracle.QueryRewardRes
                 * @instance
                 */
                QueryRewardRes.prototype.reward = null;

                /**
                 * Encodes the specified QueryRewardRes message. Does not implicitly {@link oraichain.orai.aioracle.QueryRewardRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryRewardRes
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryRewardRes} m QueryRewardRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRewardRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.reward != null && Object.hasOwnProperty.call(m, "reward"))
                        $root.oraichain.orai.aioracle.Reward.encode(m.reward, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryRewardRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryRewardRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryRewardRes} QueryRewardRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRewardRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryRewardRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.reward = $root.oraichain.orai.aioracle.Reward.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryRewardRes;
            })();

            aioracle.QueryFullOracleReq = (function () {

                /**
                 * Properties of a QueryFullOracleReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryFullOracleReq
                 * @property {string|null} [request_id] QueryFullOracleReq request_id
                 */

                /**
                 * Constructs a new QueryFullOracleReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryFullOracleReq.
                 * @implements IQueryFullOracleReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryFullOracleReq=} [p] Properties to set
                 */
                function QueryFullOracleReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryFullOracleReq request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.QueryFullOracleReq
                 * @instance
                 */
                QueryFullOracleReq.prototype.request_id = "";

                /**
                 * Encodes the specified QueryFullOracleReq message. Does not implicitly {@link oraichain.orai.aioracle.QueryFullOracleReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryFullOracleReq
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryFullOracleReq} m QueryFullOracleReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFullOracleReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    return w;
                };

                /**
                 * Decodes a QueryFullOracleReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryFullOracleReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryFullOracleReq} QueryFullOracleReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFullOracleReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryFullOracleReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryFullOracleReq;
            })();

            aioracle.QueryFullOracleRes = (function () {

                /**
                 * Properties of a QueryFullOracleRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryFullOracleRes
                 * @property {oraichain.orai.aioracle.IAIOracle|null} [ai_oracle] QueryFullOracleRes ai_oracle
                 * @property {Array.<oraichain.orai.aioracle.IReport>|null} [reports] QueryFullOracleRes reports
                 * @property {Array.<oraichain.orai.aioracle.ITestCaseReport>|null} [testcase_reports] QueryFullOracleRes testcase_reports
                 * @property {oraichain.orai.aioracle.IAIOracleResult|null} [result] QueryFullOracleRes result
                 */

                /**
                 * Constructs a new QueryFullOracleRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryFullOracleRes.
                 * @implements IQueryFullOracleRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryFullOracleRes=} [p] Properties to set
                 */
                function QueryFullOracleRes(p) {
                    this.reports = [];
                    this.testcase_reports = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryFullOracleRes ai_oracle.
                 * @member {oraichain.orai.aioracle.IAIOracle|null|undefined} ai_oracle
                 * @memberof oraichain.orai.aioracle.QueryFullOracleRes
                 * @instance
                 */
                QueryFullOracleRes.prototype.ai_oracle = null;

                /**
                 * QueryFullOracleRes reports.
                 * @member {Array.<oraichain.orai.aioracle.IReport>} reports
                 * @memberof oraichain.orai.aioracle.QueryFullOracleRes
                 * @instance
                 */
                QueryFullOracleRes.prototype.reports = $util.emptyArray;

                /**
                 * QueryFullOracleRes testcase_reports.
                 * @member {Array.<oraichain.orai.aioracle.ITestCaseReport>} testcase_reports
                 * @memberof oraichain.orai.aioracle.QueryFullOracleRes
                 * @instance
                 */
                QueryFullOracleRes.prototype.testcase_reports = $util.emptyArray;

                /**
                 * QueryFullOracleRes result.
                 * @member {oraichain.orai.aioracle.IAIOracleResult|null|undefined} result
                 * @memberof oraichain.orai.aioracle.QueryFullOracleRes
                 * @instance
                 */
                QueryFullOracleRes.prototype.result = null;

                /**
                 * Encodes the specified QueryFullOracleRes message. Does not implicitly {@link oraichain.orai.aioracle.QueryFullOracleRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryFullOracleRes
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryFullOracleRes} m QueryFullOracleRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFullOracleRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.ai_oracle != null && Object.hasOwnProperty.call(m, "ai_oracle"))
                        $root.oraichain.orai.aioracle.AIOracle.encode(m.ai_oracle, w.uint32(10).fork()).ldelim();
                    if (m.reports != null && m.reports.length) {
                        for (var i = 0; i < m.reports.length; ++i)
                            $root.oraichain.orai.aioracle.Report.encode(m.reports[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.testcase_reports != null && m.testcase_reports.length) {
                        for (var i = 0; i < m.testcase_reports.length; ++i)
                            $root.oraichain.orai.aioracle.TestCaseReport.encode(m.testcase_reports[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                        $root.oraichain.orai.aioracle.AIOracleResult.encode(m.result, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryFullOracleRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryFullOracleRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryFullOracleRes} QueryFullOracleRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFullOracleRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryFullOracleRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.ai_oracle = $root.oraichain.orai.aioracle.AIOracle.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.reports && m.reports.length))
                                    m.reports = [];
                                m.reports.push($root.oraichain.orai.aioracle.Report.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.testcase_reports && m.testcase_reports.length))
                                    m.testcase_reports = [];
                                m.testcase_reports.push($root.oraichain.orai.aioracle.TestCaseReport.decode(r, r.uint32()));
                                break;
                            case 4:
                                m.result = $root.oraichain.orai.aioracle.AIOracleResult.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryFullOracleRes;
            })();

            aioracle.MinFeesReq = (function () {

                /**
                 * Properties of a MinFeesReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMinFeesReq
                 * @property {string|null} [contract_addr] MinFeesReq contract_addr
                 * @property {Long|null} [val_num] MinFeesReq val_num
                 * @property {boolean|null} [test_only] MinFeesReq test_only
                 */

                /**
                 * Constructs a new MinFeesReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MinFeesReq.
                 * @implements IMinFeesReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMinFeesReq=} [p] Properties to set
                 */
                function MinFeesReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MinFeesReq contract_addr.
                 * @member {string} contract_addr
                 * @memberof oraichain.orai.aioracle.MinFeesReq
                 * @instance
                 */
                MinFeesReq.prototype.contract_addr = "";

                /**
                 * MinFeesReq val_num.
                 * @member {Long} val_num
                 * @memberof oraichain.orai.aioracle.MinFeesReq
                 * @instance
                 */
                MinFeesReq.prototype.val_num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * MinFeesReq test_only.
                 * @member {boolean} test_only
                 * @memberof oraichain.orai.aioracle.MinFeesReq
                 * @instance
                 */
                MinFeesReq.prototype.test_only = false;

                /**
                 * Encodes the specified MinFeesReq message. Does not implicitly {@link oraichain.orai.aioracle.MinFeesReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MinFeesReq
                 * @static
                 * @param {oraichain.orai.aioracle.IMinFeesReq} m MinFeesReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MinFeesReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contract_addr != null && Object.hasOwnProperty.call(m, "contract_addr"))
                        w.uint32(10).string(m.contract_addr);
                    if (m.val_num != null && Object.hasOwnProperty.call(m, "val_num"))
                        w.uint32(16).int64(m.val_num);
                    if (m.test_only != null && Object.hasOwnProperty.call(m, "test_only"))
                        w.uint32(24).bool(m.test_only);
                    return w;
                };

                /**
                 * Decodes a MinFeesReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MinFeesReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MinFeesReq} MinFeesReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MinFeesReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MinFeesReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.contract_addr = r.string();
                                break;
                            case 2:
                                m.val_num = r.int64();
                                break;
                            case 3:
                                m.test_only = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MinFeesReq;
            })();

            aioracle.MinFeesRes = (function () {

                /**
                 * Properties of a MinFeesRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMinFeesRes
                 * @property {string|null} [minimum_fees] MinFeesRes minimum_fees
                 */

                /**
                 * Constructs a new MinFeesRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MinFeesRes.
                 * @implements IMinFeesRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMinFeesRes=} [p] Properties to set
                 */
                function MinFeesRes(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MinFeesRes minimum_fees.
                 * @member {string} minimum_fees
                 * @memberof oraichain.orai.aioracle.MinFeesRes
                 * @instance
                 */
                MinFeesRes.prototype.minimum_fees = "";

                /**
                 * Encodes the specified MinFeesRes message. Does not implicitly {@link oraichain.orai.aioracle.MinFeesRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MinFeesRes
                 * @static
                 * @param {oraichain.orai.aioracle.IMinFeesRes} m MinFeesRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MinFeesRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.minimum_fees != null && Object.hasOwnProperty.call(m, "minimum_fees"))
                        w.uint32(10).string(m.minimum_fees);
                    return w;
                };

                /**
                 * Decodes a MinFeesRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MinFeesRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MinFeesRes} MinFeesRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MinFeesRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MinFeesRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.minimum_fees = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MinFeesRes;
            })();

            aioracle.MinGasPricesReq = (function () {

                /**
                 * Properties of a MinGasPricesReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMinGasPricesReq
                 */

                /**
                 * Constructs a new MinGasPricesReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MinGasPricesReq.
                 * @implements IMinGasPricesReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMinGasPricesReq=} [p] Properties to set
                 */
                function MinGasPricesReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified MinGasPricesReq message. Does not implicitly {@link oraichain.orai.aioracle.MinGasPricesReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MinGasPricesReq
                 * @static
                 * @param {oraichain.orai.aioracle.IMinGasPricesReq} m MinGasPricesReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MinGasPricesReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a MinGasPricesReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MinGasPricesReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MinGasPricesReq} MinGasPricesReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MinGasPricesReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MinGasPricesReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MinGasPricesReq;
            })();

            aioracle.MinGasPricesRes = (function () {

                /**
                 * Properties of a MinGasPricesRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMinGasPricesRes
                 * @property {string|null} [min_gas_prices] MinGasPricesRes min_gas_prices
                 */

                /**
                 * Constructs a new MinGasPricesRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MinGasPricesRes.
                 * @implements IMinGasPricesRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMinGasPricesRes=} [p] Properties to set
                 */
                function MinGasPricesRes(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MinGasPricesRes min_gas_prices.
                 * @member {string} min_gas_prices
                 * @memberof oraichain.orai.aioracle.MinGasPricesRes
                 * @instance
                 */
                MinGasPricesRes.prototype.min_gas_prices = "";

                /**
                 * Encodes the specified MinGasPricesRes message. Does not implicitly {@link oraichain.orai.aioracle.MinGasPricesRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MinGasPricesRes
                 * @static
                 * @param {oraichain.orai.aioracle.IMinGasPricesRes} m MinGasPricesRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MinGasPricesRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.min_gas_prices != null && Object.hasOwnProperty.call(m, "min_gas_prices"))
                        w.uint32(10).string(m.min_gas_prices);
                    return w;
                };

                /**
                 * Decodes a MinGasPricesRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MinGasPricesRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MinGasPricesRes} MinGasPricesRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MinGasPricesRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MinGasPricesRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.min_gas_prices = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MinGasPricesRes;
            })();

            aioracle.QueryParamsRequest = (function () {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryParamsRequest=} [p] Properties to set
                 */
                function QueryParamsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link oraichain.orai.aioracle.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryParamsRequest
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryParamsRequest} m QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryParamsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsRequest;
            })();

            aioracle.QueryParamsResponse = (function () {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryParamsResponse
                 * @property {oraichain.orai.aioracle.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryParamsResponse=} [p] Properties to set
                 */
                function QueryParamsResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {oraichain.orai.aioracle.IParams|null|undefined} params
                 * @memberof oraichain.orai.aioracle.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link oraichain.orai.aioracle.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryParamsResponse
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryParamsResponse} m QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.oraichain.orai.aioracle.Params.encode(m.params, w.uint32(10).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryParamsResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.params = $root.oraichain.orai.aioracle.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamsResponse;
            })();

            aioracle.QueryParamRequest = (function () {

                /**
                 * Properties of a QueryParamRequest.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryParamRequest
                 * @property {string|null} [param] QueryParamRequest param
                 */

                /**
                 * Constructs a new QueryParamRequest.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryParamRequest.
                 * @implements IQueryParamRequest
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryParamRequest=} [p] Properties to set
                 */
                function QueryParamRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamRequest param.
                 * @member {string} param
                 * @memberof oraichain.orai.aioracle.QueryParamRequest
                 * @instance
                 */
                QueryParamRequest.prototype.param = "";

                /**
                 * Encodes the specified QueryParamRequest message. Does not implicitly {@link oraichain.orai.aioracle.QueryParamRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryParamRequest
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryParamRequest} m QueryParamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.param != null && Object.hasOwnProperty.call(m, "param"))
                        w.uint32(10).string(m.param);
                    return w;
                };

                /**
                 * Decodes a QueryParamRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryParamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryParamRequest} QueryParamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryParamRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.param = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamRequest;
            })();

            aioracle.QueryParamResponse = (function () {

                /**
                 * Properties of a QueryParamResponse.
                 * @memberof oraichain.orai.aioracle
                 * @interface IQueryParamResponse
                 * @property {Long|null} [param] QueryParamResponse param
                 */

                /**
                 * Constructs a new QueryParamResponse.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a QueryParamResponse.
                 * @implements IQueryParamResponse
                 * @constructor
                 * @param {oraichain.orai.aioracle.IQueryParamResponse=} [p] Properties to set
                 */
                function QueryParamResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * QueryParamResponse param.
                 * @member {Long} param
                 * @memberof oraichain.orai.aioracle.QueryParamResponse
                 * @instance
                 */
                QueryParamResponse.prototype.param = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

                /**
                 * Encodes the specified QueryParamResponse message. Does not implicitly {@link oraichain.orai.aioracle.QueryParamResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.QueryParamResponse
                 * @static
                 * @param {oraichain.orai.aioracle.IQueryParamResponse} m QueryParamResponse message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.param != null && Object.hasOwnProperty.call(m, "param"))
                        w.uint32(8).uint64(m.param);
                    return w;
                };

                /**
                 * Decodes a QueryParamResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.QueryParamResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.QueryParamResponse} QueryParamResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.QueryParamResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.param = r.uint64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return QueryParamResponse;
            })();

            aioracle.GenesisState = (function () {

                /**
                 * Properties of a GenesisState.
                 * @memberof oraichain.orai.aioracle
                 * @interface IGenesisState
                 * @property {Array.<oraichain.orai.aioracle.IAIOracle>|null} [ai_oracles] GenesisState ai_oracles
                 * @property {Array.<oraichain.orai.aioracle.IBaseReport>|null} [BaseReports] GenesisState BaseReports
                 * @property {Array.<oraichain.orai.aioracle.IAIOracleResult>|null} [ai_oracle_results] GenesisState ai_oracle_results
                 * @property {oraichain.orai.aioracle.IParams|null} [params] GenesisState params
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {oraichain.orai.aioracle.IGenesisState=} [p] Properties to set
                 */
                function GenesisState(p) {
                    this.ai_oracles = [];
                    this.BaseReports = [];
                    this.ai_oracle_results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * GenesisState ai_oracles.
                 * @member {Array.<oraichain.orai.aioracle.IAIOracle>} ai_oracles
                 * @memberof oraichain.orai.aioracle.GenesisState
                 * @instance
                 */
                GenesisState.prototype.ai_oracles = $util.emptyArray;

                /**
                 * GenesisState BaseReports.
                 * @member {Array.<oraichain.orai.aioracle.IBaseReport>} BaseReports
                 * @memberof oraichain.orai.aioracle.GenesisState
                 * @instance
                 */
                GenesisState.prototype.BaseReports = $util.emptyArray;

                /**
                 * GenesisState ai_oracle_results.
                 * @member {Array.<oraichain.orai.aioracle.IAIOracleResult>} ai_oracle_results
                 * @memberof oraichain.orai.aioracle.GenesisState
                 * @instance
                 */
                GenesisState.prototype.ai_oracle_results = $util.emptyArray;

                /**
                 * GenesisState params.
                 * @member {oraichain.orai.aioracle.IParams|null|undefined} params
                 * @memberof oraichain.orai.aioracle.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link oraichain.orai.aioracle.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.GenesisState
                 * @static
                 * @param {oraichain.orai.aioracle.IGenesisState} m GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.ai_oracles != null && m.ai_oracles.length) {
                        for (var i = 0; i < m.ai_oracles.length; ++i)
                            $root.oraichain.orai.aioracle.AIOracle.encode(m.ai_oracles[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.BaseReports != null && m.BaseReports.length) {
                        for (var i = 0; i < m.BaseReports.length; ++i)
                            $root.oraichain.orai.aioracle.BaseReport.encode(m.BaseReports[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.ai_oracle_results != null && m.ai_oracle_results.length) {
                        for (var i = 0; i < m.ai_oracle_results.length; ++i)
                            $root.oraichain.orai.aioracle.AIOracleResult.encode(m.ai_oracle_results[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.params != null && Object.hasOwnProperty.call(m, "params"))
                        $root.oraichain.orai.aioracle.Params.encode(m.params, w.uint32(34).fork()).ldelim();
                    return w;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.GenesisState();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                if (!(m.ai_oracles && m.ai_oracles.length))
                                    m.ai_oracles = [];
                                m.ai_oracles.push($root.oraichain.orai.aioracle.AIOracle.decode(r, r.uint32()));
                                break;
                            case 2:
                                if (!(m.BaseReports && m.BaseReports.length))
                                    m.BaseReports = [];
                                m.BaseReports.push($root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32()));
                                break;
                            case 3:
                                if (!(m.ai_oracle_results && m.ai_oracle_results.length))
                                    m.ai_oracle_results = [];
                                m.ai_oracle_results.push($root.oraichain.orai.aioracle.AIOracleResult.decode(r, r.uint32()));
                                break;
                            case 4:
                                m.params = $root.oraichain.orai.aioracle.Params.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return GenesisState;
            })();

            aioracle.MsgSetAIOracleReq = (function () {

                /**
                 * Properties of a MsgSetAIOracleReq.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMsgSetAIOracleReq
                 * @property {string|null} [request_id] MsgSetAIOracleReq request_id
                 * @property {string|null} [contract] MsgSetAIOracleReq contract
                 * @property {string|null} [creator] MsgSetAIOracleReq creator
                 * @property {Long|null} [validator_count] MsgSetAIOracleReq validator_count
                 * @property {string|null} [fees] MsgSetAIOracleReq fees
                 * @property {Uint8Array|null} [input] MsgSetAIOracleReq input
                 * @property {boolean|null} [test_only] MsgSetAIOracleReq test_only
                 */

                /**
                 * Constructs a new MsgSetAIOracleReq.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MsgSetAIOracleReq.
                 * @implements IMsgSetAIOracleReq
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMsgSetAIOracleReq=} [p] Properties to set
                 */
                function MsgSetAIOracleReq(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSetAIOracleReq request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.request_id = "";

                /**
                 * MsgSetAIOracleReq contract.
                 * @member {string} contract
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.contract = "";

                /**
                 * MsgSetAIOracleReq creator.
                 * @member {string} creator
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.creator = "";

                /**
                 * MsgSetAIOracleReq validator_count.
                 * @member {Long} validator_count
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.validator_count = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * MsgSetAIOracleReq fees.
                 * @member {string} fees
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.fees = "";

                /**
                 * MsgSetAIOracleReq input.
                 * @member {Uint8Array} input
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.input = $util.newBuffer([]);

                /**
                 * MsgSetAIOracleReq test_only.
                 * @member {boolean} test_only
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @instance
                 */
                MsgSetAIOracleReq.prototype.test_only = false;

                /**
                 * Encodes the specified MsgSetAIOracleReq message. Does not implicitly {@link oraichain.orai.aioracle.MsgSetAIOracleReq.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @static
                 * @param {oraichain.orai.aioracle.IMsgSetAIOracleReq} m MsgSetAIOracleReq message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSetAIOracleReq.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(18).string(m.contract);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(26).string(m.creator);
                    if (m.validator_count != null && Object.hasOwnProperty.call(m, "validator_count"))
                        w.uint32(40).int64(m.validator_count);
                    if (m.fees != null && Object.hasOwnProperty.call(m, "fees"))
                        w.uint32(50).string(m.fees);
                    if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                        w.uint32(58).bytes(m.input);
                    if (m.test_only != null && Object.hasOwnProperty.call(m, "test_only"))
                        w.uint32(64).bool(m.test_only);
                    return w;
                };

                /**
                 * Decodes a MsgSetAIOracleReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MsgSetAIOracleReq} MsgSetAIOracleReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSetAIOracleReq.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MsgSetAIOracleReq();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            case 2:
                                m.contract = r.string();
                                break;
                            case 3:
                                m.creator = r.string();
                                break;
                            case 5:
                                m.validator_count = r.int64();
                                break;
                            case 6:
                                m.fees = r.string();
                                break;
                            case 7:
                                m.input = r.bytes();
                                break;
                            case 8:
                                m.test_only = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSetAIOracleReq;
            })();

            aioracle.MsgSetAIOracleRes = (function () {

                /**
                 * Properties of a MsgSetAIOracleRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMsgSetAIOracleRes
                 * @property {string|null} [request_id] MsgSetAIOracleRes request_id
                 * @property {string|null} [contract] MsgSetAIOracleRes contract
                 * @property {string|null} [creator] MsgSetAIOracleRes creator
                 * @property {Long|null} [validator_count] MsgSetAIOracleRes validator_count
                 * @property {string|null} [fees] MsgSetAIOracleRes fees
                 * @property {Uint8Array|null} [input] MsgSetAIOracleRes input
                 * @property {boolean|null} [test_only] MsgSetAIOracleRes test_only
                 */

                /**
                 * Constructs a new MsgSetAIOracleRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MsgSetAIOracleRes.
                 * @implements IMsgSetAIOracleRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMsgSetAIOracleRes=} [p] Properties to set
                 */
                function MsgSetAIOracleRes(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgSetAIOracleRes request_id.
                 * @member {string} request_id
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.request_id = "";

                /**
                 * MsgSetAIOracleRes contract.
                 * @member {string} contract
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.contract = "";

                /**
                 * MsgSetAIOracleRes creator.
                 * @member {string} creator
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.creator = "";

                /**
                 * MsgSetAIOracleRes validator_count.
                 * @member {Long} validator_count
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.validator_count = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

                /**
                 * MsgSetAIOracleRes fees.
                 * @member {string} fees
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.fees = "";

                /**
                 * MsgSetAIOracleRes input.
                 * @member {Uint8Array} input
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.input = $util.newBuffer([]);

                /**
                 * MsgSetAIOracleRes test_only.
                 * @member {boolean} test_only
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @instance
                 */
                MsgSetAIOracleRes.prototype.test_only = false;

                /**
                 * Encodes the specified MsgSetAIOracleRes message. Does not implicitly {@link oraichain.orai.aioracle.MsgSetAIOracleRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @static
                 * @param {oraichain.orai.aioracle.IMsgSetAIOracleRes} m MsgSetAIOracleRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSetAIOracleRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.request_id != null && Object.hasOwnProperty.call(m, "request_id"))
                        w.uint32(10).string(m.request_id);
                    if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                        w.uint32(18).string(m.contract);
                    if (m.creator != null && Object.hasOwnProperty.call(m, "creator"))
                        w.uint32(26).string(m.creator);
                    if (m.validator_count != null && Object.hasOwnProperty.call(m, "validator_count"))
                        w.uint32(40).int64(m.validator_count);
                    if (m.fees != null && Object.hasOwnProperty.call(m, "fees"))
                        w.uint32(50).string(m.fees);
                    if (m.input != null && Object.hasOwnProperty.call(m, "input"))
                        w.uint32(58).bytes(m.input);
                    if (m.test_only != null && Object.hasOwnProperty.call(m, "test_only"))
                        w.uint32(64).bool(m.test_only);
                    return w;
                };

                /**
                 * Decodes a MsgSetAIOracleRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MsgSetAIOracleRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MsgSetAIOracleRes} MsgSetAIOracleRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSetAIOracleRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MsgSetAIOracleRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.request_id = r.string();
                                break;
                            case 2:
                                m.contract = r.string();
                                break;
                            case 3:
                                m.creator = r.string();
                                break;
                            case 5:
                                m.validator_count = r.int64();
                                break;
                            case 6:
                                m.fees = r.string();
                                break;
                            case 7:
                                m.input = r.bytes();
                                break;
                            case 8:
                                m.test_only = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgSetAIOracleRes;
            })();

            aioracle.MsgCreateReport = (function () {

                /**
                 * Properties of a MsgCreateReport.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMsgCreateReport
                 * @property {oraichain.orai.aioracle.IBaseReport|null} [base_report] MsgCreateReport base_report
                 * @property {Array.<oraichain.orai.aioracle.IResult>|null} [data_source_results] MsgCreateReport data_source_results
                 * @property {string|null} [result_status] MsgCreateReport result_status
                 * @property {Uint8Array|null} [aggregated_result] MsgCreateReport aggregated_result
                 */

                /**
                 * Constructs a new MsgCreateReport.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MsgCreateReport.
                 * @implements IMsgCreateReport
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMsgCreateReport=} [p] Properties to set
                 */
                function MsgCreateReport(p) {
                    this.data_source_results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgCreateReport base_report.
                 * @member {oraichain.orai.aioracle.IBaseReport|null|undefined} base_report
                 * @memberof oraichain.orai.aioracle.MsgCreateReport
                 * @instance
                 */
                MsgCreateReport.prototype.base_report = null;

                /**
                 * MsgCreateReport data_source_results.
                 * @member {Array.<oraichain.orai.aioracle.IResult>} data_source_results
                 * @memberof oraichain.orai.aioracle.MsgCreateReport
                 * @instance
                 */
                MsgCreateReport.prototype.data_source_results = $util.emptyArray;

                /**
                 * MsgCreateReport result_status.
                 * @member {string} result_status
                 * @memberof oraichain.orai.aioracle.MsgCreateReport
                 * @instance
                 */
                MsgCreateReport.prototype.result_status = "";

                /**
                 * MsgCreateReport aggregated_result.
                 * @member {Uint8Array} aggregated_result
                 * @memberof oraichain.orai.aioracle.MsgCreateReport
                 * @instance
                 */
                MsgCreateReport.prototype.aggregated_result = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgCreateReport message. Does not implicitly {@link oraichain.orai.aioracle.MsgCreateReport.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MsgCreateReport
                 * @static
                 * @param {oraichain.orai.aioracle.IMsgCreateReport} m MsgCreateReport message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateReport.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_report != null && Object.hasOwnProperty.call(m, "base_report"))
                        $root.oraichain.orai.aioracle.BaseReport.encode(m.base_report, w.uint32(10).fork()).ldelim();
                    if (m.data_source_results != null && m.data_source_results.length) {
                        for (var i = 0; i < m.data_source_results.length; ++i)
                            $root.oraichain.orai.aioracle.Result.encode(m.data_source_results[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.result_status != null && Object.hasOwnProperty.call(m, "result_status"))
                        w.uint32(26).string(m.result_status);
                    if (m.aggregated_result != null && Object.hasOwnProperty.call(m, "aggregated_result"))
                        w.uint32(34).bytes(m.aggregated_result);
                    return w;
                };

                /**
                 * Decodes a MsgCreateReport message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MsgCreateReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MsgCreateReport} MsgCreateReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateReport.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MsgCreateReport();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_report = $root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.data_source_results && m.data_source_results.length))
                                    m.data_source_results = [];
                                m.data_source_results.push($root.oraichain.orai.aioracle.Result.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.result_status = r.string();
                                break;
                            case 4:
                                m.aggregated_result = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateReport;
            })();

            aioracle.MsgCreateTestCaseReport = (function () {

                /**
                 * Properties of a MsgCreateTestCaseReport.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMsgCreateTestCaseReport
                 * @property {oraichain.orai.aioracle.IBaseReport|null} [base_report] MsgCreateTestCaseReport base_report
                 * @property {Array.<oraichain.orai.aioracle.IResultWithTestCase>|null} [results_with_test_case] MsgCreateTestCaseReport results_with_test_case
                 */

                /**
                 * Constructs a new MsgCreateTestCaseReport.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MsgCreateTestCaseReport.
                 * @implements IMsgCreateTestCaseReport
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMsgCreateTestCaseReport=} [p] Properties to set
                 */
                function MsgCreateTestCaseReport(p) {
                    this.results_with_test_case = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgCreateTestCaseReport base_report.
                 * @member {oraichain.orai.aioracle.IBaseReport|null|undefined} base_report
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReport
                 * @instance
                 */
                MsgCreateTestCaseReport.prototype.base_report = null;

                /**
                 * MsgCreateTestCaseReport results_with_test_case.
                 * @member {Array.<oraichain.orai.aioracle.IResultWithTestCase>} results_with_test_case
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReport
                 * @instance
                 */
                MsgCreateTestCaseReport.prototype.results_with_test_case = $util.emptyArray;

                /**
                 * Encodes the specified MsgCreateTestCaseReport message. Does not implicitly {@link oraichain.orai.aioracle.MsgCreateTestCaseReport.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReport
                 * @static
                 * @param {oraichain.orai.aioracle.IMsgCreateTestCaseReport} m MsgCreateTestCaseReport message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateTestCaseReport.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_report != null && Object.hasOwnProperty.call(m, "base_report"))
                        $root.oraichain.orai.aioracle.BaseReport.encode(m.base_report, w.uint32(10).fork()).ldelim();
                    if (m.results_with_test_case != null && m.results_with_test_case.length) {
                        for (var i = 0; i < m.results_with_test_case.length; ++i)
                            $root.oraichain.orai.aioracle.ResultWithTestCase.encode(m.results_with_test_case[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgCreateTestCaseReport message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MsgCreateTestCaseReport} MsgCreateTestCaseReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateTestCaseReport.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MsgCreateTestCaseReport();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_report = $root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.results_with_test_case && m.results_with_test_case.length))
                                    m.results_with_test_case = [];
                                m.results_with_test_case.push($root.oraichain.orai.aioracle.ResultWithTestCase.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateTestCaseReport;
            })();

            aioracle.MsgCreateReportRes = (function () {

                /**
                 * Properties of a MsgCreateReportRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMsgCreateReportRes
                 * @property {oraichain.orai.aioracle.IBaseReport|null} [base_report] MsgCreateReportRes base_report
                 * @property {Array.<oraichain.orai.aioracle.IResult>|null} [data_source_results] MsgCreateReportRes data_source_results
                 * @property {string|null} [result_status] MsgCreateReportRes result_status
                 * @property {Uint8Array|null} [aggregated_result] MsgCreateReportRes aggregated_result
                 */

                /**
                 * Constructs a new MsgCreateReportRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MsgCreateReportRes.
                 * @implements IMsgCreateReportRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMsgCreateReportRes=} [p] Properties to set
                 */
                function MsgCreateReportRes(p) {
                    this.data_source_results = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgCreateReportRes base_report.
                 * @member {oraichain.orai.aioracle.IBaseReport|null|undefined} base_report
                 * @memberof oraichain.orai.aioracle.MsgCreateReportRes
                 * @instance
                 */
                MsgCreateReportRes.prototype.base_report = null;

                /**
                 * MsgCreateReportRes data_source_results.
                 * @member {Array.<oraichain.orai.aioracle.IResult>} data_source_results
                 * @memberof oraichain.orai.aioracle.MsgCreateReportRes
                 * @instance
                 */
                MsgCreateReportRes.prototype.data_source_results = $util.emptyArray;

                /**
                 * MsgCreateReportRes result_status.
                 * @member {string} result_status
                 * @memberof oraichain.orai.aioracle.MsgCreateReportRes
                 * @instance
                 */
                MsgCreateReportRes.prototype.result_status = "";

                /**
                 * MsgCreateReportRes aggregated_result.
                 * @member {Uint8Array} aggregated_result
                 * @memberof oraichain.orai.aioracle.MsgCreateReportRes
                 * @instance
                 */
                MsgCreateReportRes.prototype.aggregated_result = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgCreateReportRes message. Does not implicitly {@link oraichain.orai.aioracle.MsgCreateReportRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MsgCreateReportRes
                 * @static
                 * @param {oraichain.orai.aioracle.IMsgCreateReportRes} m MsgCreateReportRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateReportRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_report != null && Object.hasOwnProperty.call(m, "base_report"))
                        $root.oraichain.orai.aioracle.BaseReport.encode(m.base_report, w.uint32(10).fork()).ldelim();
                    if (m.data_source_results != null && m.data_source_results.length) {
                        for (var i = 0; i < m.data_source_results.length; ++i)
                            $root.oraichain.orai.aioracle.Result.encode(m.data_source_results[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.result_status != null && Object.hasOwnProperty.call(m, "result_status"))
                        w.uint32(26).string(m.result_status);
                    if (m.aggregated_result != null && Object.hasOwnProperty.call(m, "aggregated_result"))
                        w.uint32(34).bytes(m.aggregated_result);
                    return w;
                };

                /**
                 * Decodes a MsgCreateReportRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MsgCreateReportRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MsgCreateReportRes} MsgCreateReportRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateReportRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MsgCreateReportRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_report = $root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.data_source_results && m.data_source_results.length))
                                    m.data_source_results = [];
                                m.data_source_results.push($root.oraichain.orai.aioracle.Result.decode(r, r.uint32()));
                                break;
                            case 3:
                                m.result_status = r.string();
                                break;
                            case 4:
                                m.aggregated_result = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateReportRes;
            })();

            aioracle.MsgCreateTestCaseReportRes = (function () {

                /**
                 * Properties of a MsgCreateTestCaseReportRes.
                 * @memberof oraichain.orai.aioracle
                 * @interface IMsgCreateTestCaseReportRes
                 * @property {oraichain.orai.aioracle.IBaseReport|null} [base_report] MsgCreateTestCaseReportRes base_report
                 * @property {Array.<oraichain.orai.aioracle.IResultWithTestCase>|null} [results_with_test_case] MsgCreateTestCaseReportRes results_with_test_case
                 */

                /**
                 * Constructs a new MsgCreateTestCaseReportRes.
                 * @memberof oraichain.orai.aioracle
                 * @classdesc Represents a MsgCreateTestCaseReportRes.
                 * @implements IMsgCreateTestCaseReportRes
                 * @constructor
                 * @param {oraichain.orai.aioracle.IMsgCreateTestCaseReportRes=} [p] Properties to set
                 */
                function MsgCreateTestCaseReportRes(p) {
                    this.results_with_test_case = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * MsgCreateTestCaseReportRes base_report.
                 * @member {oraichain.orai.aioracle.IBaseReport|null|undefined} base_report
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReportRes
                 * @instance
                 */
                MsgCreateTestCaseReportRes.prototype.base_report = null;

                /**
                 * MsgCreateTestCaseReportRes results_with_test_case.
                 * @member {Array.<oraichain.orai.aioracle.IResultWithTestCase>} results_with_test_case
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReportRes
                 * @instance
                 */
                MsgCreateTestCaseReportRes.prototype.results_with_test_case = $util.emptyArray;

                /**
                 * Encodes the specified MsgCreateTestCaseReportRes message. Does not implicitly {@link oraichain.orai.aioracle.MsgCreateTestCaseReportRes.verify|verify} messages.
                 * @function encode
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReportRes
                 * @static
                 * @param {oraichain.orai.aioracle.IMsgCreateTestCaseReportRes} m MsgCreateTestCaseReportRes message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateTestCaseReportRes.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.base_report != null && Object.hasOwnProperty.call(m, "base_report"))
                        $root.oraichain.orai.aioracle.BaseReport.encode(m.base_report, w.uint32(10).fork()).ldelim();
                    if (m.results_with_test_case != null && m.results_with_test_case.length) {
                        for (var i = 0; i < m.results_with_test_case.length; ++i)
                            $root.oraichain.orai.aioracle.ResultWithTestCase.encode(m.results_with_test_case[i], w.uint32(18).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a MsgCreateTestCaseReportRes message from the specified reader or buffer.
                 * @function decode
                 * @memberof oraichain.orai.aioracle.MsgCreateTestCaseReportRes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {oraichain.orai.aioracle.MsgCreateTestCaseReportRes} MsgCreateTestCaseReportRes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateTestCaseReportRes.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.oraichain.orai.aioracle.MsgCreateTestCaseReportRes();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                            case 1:
                                m.base_report = $root.oraichain.orai.aioracle.BaseReport.decode(r, r.uint32());
                                break;
                            case 2:
                                if (!(m.results_with_test_case && m.results_with_test_case.length))
                                    m.results_with_test_case = [];
                                m.results_with_test_case.push($root.oraichain.orai.aioracle.ResultWithTestCase.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                        }
                    }
                    return m;
                };

                return MsgCreateTestCaseReportRes;
            })();

            return aioracle;
        })();

        return orai;
    })();

    return oraichain;
})();

export { $root as default };
